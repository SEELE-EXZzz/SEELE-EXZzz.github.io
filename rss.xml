<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>个人博客</title>
        <subtitle></subtitle>
        <icon>https://seele-exzzz.github.io/assets/favicon.ico</icon>
        <link>https://seele-exzzz.github.io</link>
        <author>
          <name>SEELE-EXZzz(纯希)</name>
        </author>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Mon, 11 Sep 2023 15:06:23 +0800</pubDate>
        <lastBuildDate>Mon, 11 Sep 2023 15:06:23 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">https://seele-exzzz.github.io/2023/09/11/project/ProjectFunction/</guid>
            <title>项目功能介绍</title>
            <link>https://seele-exzzz.github.io/2023/09/11/project/ProjectFunction/</link>
            <pubDate>Mon, 11 Sep 2023 15:06:23 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;截图&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#截图&#34;&gt;#&lt;/a&gt; 截图&lt;/h2&gt;
&lt;h3 id=&#34;1-画笔橡皮擦文字复制到剪切板的功能展示&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-画笔橡皮擦文字复制到剪切板的功能展示&#34;&gt;#&lt;/a&gt; 1. 画笔，橡皮擦，文字，复制到剪切板的功能展示。&lt;/h3&gt;
&lt;p&gt;​	画笔：可以使用下面的按钮以及输入框改变画笔的大小并在截图区域绘制。&lt;/p&gt;
&lt;p&gt;​    橡皮擦：清除用画笔绘制的内容同时可以使用下面的按钮以及输入框改变橡皮擦的大小&lt;/p&gt;
&lt;p&gt;​	文字：在截图框输入文字。&lt;/p&gt;
&lt;p&gt;​	复制：点击√即可复制到剪切板。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://typora-seele-exzzz.oss-cn-guangzhou.aliyuncs.com/img/qiuzhao/projectezgif.com-video-to-gif.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-退出撤回保存的功能展示&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-退出撤回保存的功能展示&#34;&gt;#&lt;/a&gt; 2. 退出，撤回，保存的功能展示。&lt;/h3&gt;
&lt;p&gt;​		退出：右键可以退出截图同时截图框可以拖动，截图内容以拖动后的截图框为主。&lt;/p&gt;
&lt;p&gt;​		撤回：当进入编辑截图时，点击撤回即可清除绘制以及文本等等内容。&lt;/p&gt;
&lt;p&gt;​		保存：保存按钮将图片保存。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://typora-seele-exzzz.oss-cn-guangzhou.aliyuncs.com/img/qiuzhao/projectezgif.com-video-to-gif%20(1).gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;便利贴&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#便利贴&#34;&gt;#&lt;/a&gt; 便利贴&lt;/h2&gt;
&lt;h3 id=&#34;1创建清除便利贴的功能展示&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1创建清除便利贴的功能展示&#34;&gt;#&lt;/a&gt; 1. 创建，清除便利贴的功能展示。&lt;/h3&gt;
&lt;p&gt;​	 可以创建便利贴并在便利贴记录事情。便利贴可以创建多个，且可以移动。当事情完成后就可以清除。当软件启动时，未清除的便利贴还会显示。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://typora-seele-exzzz.oss-cn-guangzhou.aliyuncs.com/img/qiuzhao/projectezgif.com-video-to-gif%20(2).gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;软件地址&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#软件地址&#34;&gt;#&lt;/a&gt; 软件地址：&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMU1va1oxc1c4LXJENlRrdHhyancwQkE/cHdkPTEyMzQ=&#34;&gt;百度网盘&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;[Release 修复了图标,便利贴清除等相关bug · SEELE-EXZzz/desktool (github.com)](https://github.com/SEELE-EXZzz/desktool/releases/tag/1.1.0)&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://seele-exzzz.github.io/2023/08/12/project/%E7%94%A8electron%E5%AE%9E%E7%8E%B0%E6%88%AA%E5%9B%BE%E5%8A%9F%E8%83%BD/</guid>
            <title>electron截图功能</title>
            <link>https://seele-exzzz.github.io/2023/08/12/project/%E7%94%A8electron%E5%AE%9E%E7%8E%B0%E6%88%AA%E5%9B%BE%E5%8A%9F%E8%83%BD/</link>
            <category term="项目" scheme="https://seele-exzzz.github.io/categories/project/" />
            <category term="vue" scheme="https://seele-exzzz.github.io/tags/vue/" />
            <category term="electron" scheme="https://seele-exzzz.github.io/tags/electron/" />
            <category term="element-ui" scheme="https://seele-exzzz.github.io/tags/element-ui/" />
            <category term="项目" scheme="https://seele-exzzz.github.io/tags/%E9%A1%B9%E7%9B%AE/" />
            <pubDate>Sat, 12 Aug 2023 18:29:32 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;前言&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;想要实现截图功能，需要设置一个全屏隐藏菜单栏且透明的窗口，在窗口上放上屏幕的截图，然后监听鼠标，获取两次鼠标点击的位置，根据这个位置将图片用 canvas.drawImage 方法将图片写入 canvas 标签。然后再做保存或者写入剪切板的操作。&lt;/p&gt;
&lt;h2 id=&#34;一-基本功能&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-基本功能&#34;&gt;#&lt;/a&gt; 一、基本功能&lt;/h2&gt;
&lt;h3 id=&#34;一-进程间通信&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-进程间通信&#34;&gt;#&lt;/a&gt; 一、进程间通信&lt;/h3&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;//渲染进程&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;el-button type=&amp;quot;primary&amp;quot; @click=&amp;quot;screenHot&amp;quot;&amp;gt;截图&amp;lt;/el-button&amp;gt; //设置一个按钮。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;screenHot()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ipcRenderer.send(&amp;#x27;screenHot&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;//向主进程发送消息。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//主进程&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let fullScreen&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ipcMain.on(&amp;#x27;screenHot&amp;#x27;,async()=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	win.hide()//主窗口隐藏&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //创建一个全屏且隐藏菜单栏的窗口。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fullScreen= new BrowserWindow(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        autoHideMenuBar: true, // 自动隐藏菜单栏&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        useContentSize: true, // width 和 height 将设置为 web 页面的尺寸&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        movable: false, // 是否可移动&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame: false, // 无边框窗口&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        resizable: false, // 窗口大小是否可调整&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        hasShadow: false, // 窗口是否有阴影&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        transparent: true, // 使窗口透明&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fullscreenable: true, // 窗口是否可以进入全屏状态&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fullscreen: true, // 窗口是否全屏&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        simpleFullscreen: true, // 在 macOS 上使用 pre-Lion 全屏&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        alwaysOnTop: false, // 窗口是否永远在别的窗口的上面&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      webPreferences: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nodeIntegration: process.env.ELECTRON_NODE_INTEGRATION,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        contextIsolation: !process.env.ELECTRON_NODE_INTEGRATION&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (process.env.WEBPACK_DEV_SERVER_URL) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      await fullScreen.loadURL(process.env.WEBPACK_DEV_SERVER_URL+&amp;#x27;screenHot.html&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      createProtocol(&amp;#x27;app&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      fullScreen.loadURL(&amp;#x27;app://./screenHot.html&amp;#x27;)//加载页面&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ipcMain.on(&amp;#x27;getFullScreen&amp;#x27;,async() =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  //获取屏幕大小,以及缩放因子scaleFactor。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  const &amp;#123; size, scaleFactor &amp;#125; = screen.getPrimaryDisplay()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  const sources = await desktopCapturer.getSources(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    types:[&amp;#x27;screen&amp;#x27;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    thumbnailSize: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      width:size.width*scaleFactor,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      height:size.height*scaleFactor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 向渲染进程发送屏幕截图&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  fullScreen.webContents.send(&amp;#x27;sendFullScreen&amp;#x27;, sources[0],size)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;二-渲染进程获取桌面截图&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-渲染进程获取桌面截图&#34;&gt;#&lt;/a&gt; 二、渲染进程获取桌面截图&lt;/h3&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;img&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;canvas&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mounted()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let img = document.querySelector(&amp;#x27;img&amp;#x27;) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ipcRenderer.send(&amp;#x27;getFullScreen&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ipcRenderer.on(&amp;#x27;sendFullScreen&amp;#x27;, (event, message) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            img.src = message.thumbnail.toDataURL()   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;三-监听鼠标获取坐标&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-监听鼠标获取坐标&#34;&gt;#&lt;/a&gt; 三、监听鼠标获取坐标&lt;/h3&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;methods:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //获取第一次鼠标按下时的坐标&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    getStartPostion(e)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this.startX = e.clientX&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this.startY = e.clientY&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //获取移动时的坐标&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    getlastPostion(e)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this.endX = e.clientX&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this.endY = e.clientY&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //删除mousemove的监听事件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    getfinallyPostion()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        document.removeEventListener(&amp;#x27;mousemove&amp;#x27;,this.getlastPostion)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mounted()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    document.addEventListener(&amp;#x27;mousedown&amp;#x27;,this.getStartPostion)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    document.addEventListener(&amp;#x27;mousemove&amp;#x27;,this.getlastPostion)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    document.addEventListener(&amp;#x27;mouseup&amp;#x27;,this.getfinallyPostion)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;四-根据坐标生成一个矩形的截图区域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四-根据坐标生成一个矩形的截图区域&#34;&gt;#&lt;/a&gt; 四、根据坐标生成一个矩形的截图区域&lt;/h3&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;div v-show=&amp;quot;isShowCutScreen&amp;quot; :style=&amp;quot;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    position: &amp;#x27;absolute&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    left: startX + &amp;#x27;px&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    top: startY + &amp;#x27;px&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    width: (endX - startX) + &amp;#x27;px&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    height: (endY - startY) + &amp;#x27;px&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    border: &amp;#x27;2px solid black&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&amp;quot;&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	return&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        isShowCutScreen:false,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        startX:0, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        startY:0,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        endX:0,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        endY:0,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//鼠标第一个点击时，截图区域展示出来&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;getStartPostion(e)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(!this.isShowCutScreen)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      this.isShowCutScreen = true  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      return&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    this.startX = e.clientX&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    this.startY = e.clientY&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//截图区域展示后再获取鼠标移动时的坐标&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;getlastPostion(e)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(!this.isShowCutScreen) return&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    this.endX = e.clientX&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    this.endY = e.clientY&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;五-将截图写入canvas同时复制至剪切板&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#五-将截图写入canvas同时复制至剪切板&#34;&gt;#&lt;/a&gt; 五、将截图写入 canvas 同时复制至剪切板&lt;/h3&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;button v-show=&amp;quot;isShowSetting&amp;quot; @click=&amp;quot;copyToclipboard&amp;quot;&amp;gt;复制并关闭&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;copyToclipboard()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	/*获取物理像素与CSS像素之比，有些设备这个比值会大于一，如果不乘这个值就会出现，截图位置和大小有偏差。相当于将截图区域的图片放大这个系数放在没有放大的canvas中，截图范围变小。*/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    const devicePixelRatio = window.devicePixelRatio&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    let canvas = document.querySelector(&amp;#x27;canvas&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    let ctx=canvas.getContext(&amp;quot;2d&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    let img=document.querySelector(&amp;#x27;img&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    let startX = this.startX*devicePixelRatio&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    let startY = this.startY*devicePixelRatio&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    let endX = this.endX*devicePixelRatio&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    let endY = this.endY*devicePixelRatio&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    let width = endX-startX&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    let height = endY-startY&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    canvas.width = width&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    canvas.height = height&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ctx.drawImage(img,startX,startY,width,height,0,0,width,height)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //将canvas变成blob对象，然后使用clipboard复制到剪切板中&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    canvas.toBlob((blob)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        navigator.clipboard.write([new ClipboardItem(&amp;#123; &amp;#x27;image/png&amp;#x27;: blob &amp;#125;)]).then(()=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ipcRenderer.send(&amp;#x27;closeFullScreen&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).catch((err)=&amp;gt;console.log(err))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;)          &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt; &lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;[基于electron、vite 和 react，我做了一个截图桌面软件 - 掘金 (juejin.cn)](https://juejin.cn/post/7239514481755127845?searchId=202308102041027394C7E481B4D632E215)&#34;&gt;在 electron 中实现截图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;[用Vite+Electron搞个微信截图工具（区域截屏工具） - 掘金 (juejin.cn)](https://juejin.cn/post/7111115472182968327?searchId=20230810204054CAEE239023ED2A291BEA)&#34;&gt;在 electron 中实现截图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;[剪贴板操作 Clipboard API 教程 - 阮一峰的网络日志 (ruanyifeng.com)](https://www.ruanyifeng.com/blog/2021/01/clipboard-api.html)&#34;&gt;剪切板使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://seele-exzzz.github.io/2023/08/09/algorithm/acm%E6%A8%A1%E5%BC%8F/</guid>
            <title>acm模式</title>
            <link>https://seele-exzzz.github.io/2023/08/09/algorithm/acm%E6%A8%A1%E5%BC%8F/</link>
            <category term="算法" scheme="https://seele-exzzz.github.io/categories/algorithm/" />
            <category term="算法" scheme="https://seele-exzzz.github.io/tags/%E7%AE%97%E6%B3%95/" />
            <pubDate>Wed, 09 Aug 2023 18:23:41 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;acm模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#acm模式&#34;&gt;#&lt;/a&gt; acm 模式&lt;/h2&gt;
&lt;p&gt;众所周知，企业机试是要使用 acm 模式的即自行处理输入输出，而不是力扣上的那种核心代码模式。所以之后了解了一下 JavaScript 获取输入输出的方式。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	javaScript Node模式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const readline = require(&amp;#x27;readline&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const rl = readline.createInterface(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	input:process.stdin,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	output:process.stdout&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rl.on(&amp;#x27;line&amp;#x27;,(input)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	//处理输入的每行数据，这里就是之前力扣上要写的代码。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	//input就是输入数据。另外有时input并不是处理的数据而是条件所以在处理数据的时候还需要判断一下。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	console.log()//在力扣return是输出数据，而acm模式则是通过console.log打印输出数据&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 与力扣相比就多了以上这些代码。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;处理输入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#处理输入&#34;&gt;#&lt;/a&gt; 处理输入&lt;/h2&gt;
&lt;h3 id=&#34;1-输入的类型转化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-输入的类型转化&#34;&gt;#&lt;/a&gt; 1. 输入的类型转化&lt;/h3&gt;
&lt;p&gt;在获取到数据后，需要分辨那些是需要用的，那些是用不着的。同时还需对数据作类型转化。因为拿到的数据大概率是字符串，需要将字符串转化为需要的数据类型比如数组，数字。可以使用正则判断，到底是数组字符串还是数字字符串。&lt;/p&gt;
&lt;h4 id=&#34;1-字符串转数字&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-字符串转数字&#34;&gt;#&lt;/a&gt; 1. 字符串转数字&lt;/h4&gt;
&lt;p&gt;​	首先如果一行只有数字的话，可以匹配非数字以及空格，如果匹配成功就说明这一行除数字，换行等其他数据类型。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let reg = /[^0-9\s]/g&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//input为输入数据，如果成功匹配则说明有除了数字空格等其他数据类型&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;if(!reg.test(input))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	todo //如果只想要某行数据是只有数字的话&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;2字符串转数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2字符串转数组&#34;&gt;#&lt;/a&gt; 2. 字符串转数组&lt;/h4&gt;
&lt;p&gt;因为数组有 [] 可以匹配这个，另外也可以使用字符串的 indexOf 方法获取 [] 的下标，用 slice () 截取字符串数组中数组的部分，然后使用 split (‘’) 转成数组&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let arr = input.slice(input.indexOf(&amp;#x27;[&amp;#x27;),input.indexOf(&amp;#x27;]&amp;#x27;)+1).spilt(&amp;#x27;&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;2输入的数据构造二叉树或者链表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2输入的数据构造二叉树或者链表&#34;&gt;#&lt;/a&gt; 2. 输入的数据构造二叉树或者链表&lt;/h3&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://seele-exzzz.github.io/2023/08/03/project/electron-%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAelectron%E9%A1%B9%E7%9B%AE/</guid>
            <title>electron配置</title>
            <link>https://seele-exzzz.github.io/2023/08/03/project/electron-%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAelectron%E9%A1%B9%E7%9B%AE/</link>
            <category term="项目" scheme="https://seele-exzzz.github.io/categories/project/" />
            <category term="vue" scheme="https://seele-exzzz.github.io/tags/vue/" />
            <category term="electron" scheme="https://seele-exzzz.github.io/tags/electron/" />
            <category term="element-ui" scheme="https://seele-exzzz.github.io/tags/element-ui/" />
            <category term="项目" scheme="https://seele-exzzz.github.io/tags/%E9%A1%B9%E7%9B%AE/" />
            <pubDate>Thu, 03 Aug 2023 15:04:45 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;electron-从零搭建一个electron项目&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#electron-从零搭建一个electron项目&#34;&gt;#&lt;/a&gt; electron - 从零搭建一个 electron 项目&lt;/h1&gt;
&lt;h2 id=&#34;前言&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;要想将 vue 引入 electron 中有两种方式，分别为 electron-vue 和 Vue CLI Plugin Electron Builder. 前者虽然出的早，但很久不维护了。因此这边使用后者即 Vue CLI Plugin Electron Builder。首先需要用 vue 的脚手架生成 vue 项目，然后在引入 electron 插件。&lt;/p&gt;
&lt;h2 id=&#34;创建electron项目&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建electron项目&#34;&gt;#&lt;/a&gt; 创建 electron 项目&lt;/h2&gt;
&lt;h3 id=&#34;1-创建vue项目&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-创建vue项目&#34;&gt;#&lt;/a&gt; 1、创建 vue 项目&lt;/h3&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;npm i @vue/cli -g //全局安装vue cli脚手架&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;vue create &amp;lt;name&amp;gt; //脚手架创建vue项目，前面和创建vue项目一模一样&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;2-添加electron插件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-添加electron插件&#34;&gt;#&lt;/a&gt; 2、添加 electron 插件&lt;/h3&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;vue add electron-builder &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cnpm i electron --S //这里用npm的话大概率下载不了，因为electron有一部分代码在GitHub中，要么改镜像要么直接用cnpm&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这时一个 electron 项目就出来了。&lt;/p&gt;
&lt;h2 id=&#34;配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置&#34;&gt;#&lt;/a&gt; 配置&lt;/h2&gt;
&lt;p&gt;如果用最新的 vue-cli 的话，这时 webpack 应该在 5 以上，5 以上的 webpack 不再自动引入 polyfill 了，原因是引入这个会让最后的打包体积变得很大，webpack 不建议开发者在浏览器端使用 polyfill。现在要么不用 node，要么手动引入 polyfill。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cnpm install --save path-browserify crypto-browserify//安装path-browserify和crypto-browserify&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//在vue.config.js中加入如下配置。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;module.exports = defineConfig(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  transpileDependencies: true,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  configureWebpack: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    resolve: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      fallback: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;quot;fs&amp;quot;: false,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;quot;path&amp;quot;: require.resolve(&amp;quot;path-browserify&amp;quot;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;quot;crypto&amp;quot;: require.resolve(&amp;quot;crypto-browserify&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;之后会出现’__dirname is not defined’这个错误。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;在上面的基础上加如下的配置即可。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;pluginOptions:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   electronBuilder:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     nodeIntegration:true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://seele-exzzz.github.io/2023/08/02/algorithm/%E9%93%BE%E8%A1%A8%E8%BF%9B%E9%98%B6-%E8%AE%BA%E9%80%92%E5%BD%92%E5%9C%A8%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8/</guid>
            <title>链表进阶</title>
            <link>https://seele-exzzz.github.io/2023/08/02/algorithm/%E9%93%BE%E8%A1%A8%E8%BF%9B%E9%98%B6-%E8%AE%BA%E9%80%92%E5%BD%92%E5%9C%A8%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8/</link>
            <category term="算法" scheme="https://seele-exzzz.github.io/categories/algorithm/" />
            <category term="算法" scheme="https://seele-exzzz.github.io/tags/%E7%AE%97%E6%B3%95/" />
            <category term="链表" scheme="https://seele-exzzz.github.io/tags/%E9%93%BE%E8%A1%A8/" />
            <category term="递归" scheme="https://seele-exzzz.github.io/tags/%E9%80%92%E5%BD%92/" />
            <pubDate>Wed, 02 Aug 2023 21:31:36 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;链表进阶-论递归在链表中的作用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#链表进阶-论递归在链表中的作用&#34;&gt;#&lt;/a&gt; 链表进阶 - 论递归在链表中的作用&lt;/h1&gt;
&lt;h2 id=&#34;前言&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;初次接触链表的时候，一方面在改变指针的时候容易出现问题导致链表出现环，当然之后只要涉及改变指针就靠画图理顺指针改变顺序解决了这个问题，另一方面链表与数组不一样的点在于链表无法回退，这时递归登场了，因为递归有回溯的过程，所以只要将链表的下一项当作参数，那么在回溯的时候自然就会进行回退。使用递归能很轻松地解决蛮多链表的问题。以下是一些用递归解决链表的类型题目。&lt;/p&gt;
&lt;h2 id=&#34;一-反转链表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-反转链表&#34;&gt;#&lt;/a&gt; 一 、反转链表&lt;/h2&gt;
&lt;p&gt;这类型题目主要是需要在外面设置一个变量储存链表，然后将链表的下一项当作递归的参数，当到达要交换的最后一个节点时就要 return，然后在回溯的部分交换，外面的链表记得在交换后往前走，里面的链表在返回上一层函数的时候会自动回退，这就起到了前后两边交换节点。同时反转链表有两种情况，一种是反转相邻的节点，另一种是反转的节点隔一个节点。&lt;/p&gt;
&lt;h3 id=&#34;a-href剑指-offer-ii-024-反转链表-力扣leetcodehttpsleetcodecnproblemsuhnkqh剑指-offer-ii-024-反转链表a&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#a-href剑指-offer-ii-024-反转链表-力扣leetcodehttpsleetcodecnproblemsuhnkqh剑指-offer-ii-024-反转链表a&#34;&gt;#&lt;/a&gt; &lt;a href=&#34;[剑指 Offer II 024. 反转链表 - 力扣（LeetCode）](https://leetcode.cn/problems/UHnkqh/)&#34;&gt;剑指 Offer II 024. 反转链表&lt;/a&gt;&lt;/h3&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var reverseList = function(head) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(!head||!head.next) return head //如果链表为空或者只有一项return原链表就行&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    /*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	这里用到了虚拟头节点，因为第一个头节点也要交换如果设置虚拟头节点方便交换头节点，另外也需要在外面设置一个变量一个正向移动，另一个在回溯中逆向移动两个交换节点就能实现链表反转。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    let cur = new ListNode(0,head),node = cur&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    const dfs=(list)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	//因为最后一个节点要交换，交换节点需要到前一个节点，所以这里到最后一个节点就return这样回溯部分就从倒二个节点开始回退&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(!list.next) return&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        //一旦交换成功就return true，一旦return的结果是true就立马return true防止继续进行回溯部分。导致已经交换过的节点继续交换。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(dfs(list.next)) return true &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        //最后一次交换有两种情况，一种就是这个，交换节点挨着。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(cur.next==list)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            let temp = cur.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cur.next = cur.next.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            temp.next = cur.next.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cur.next.next = temp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        //大部分交换时，交换的节点都隔着节点&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let temp1 = cur.next,temp2=list.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cur.next = cur.next.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        list.next = list.next.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        temp2.next = cur.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cur.next = temp2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        temp1.next = list.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        list.next = temp1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cur = temp2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        //如果要交换的节点之间隔着一个节点，交换后cur的下个节点就是list这时该赶紧return。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(cur.next==list) return true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dfs(node)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return node.next //最后return记得不要带上自己设置的虚拟头节点。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;a-href92-反转链表-ii-力扣leetcodehttpsleetcodecnproblemsreverse-linked-list-ii-92-反转链表-iia&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#a-href92-反转链表-ii-力扣leetcodehttpsleetcodecnproblemsreverse-linked-list-ii-92-反转链表-iia&#34;&gt;#&lt;/a&gt; &lt;a href=&#34;[92. 反转链表 II - 力扣（LeetCode）](https://leetcode.cn/problems/reverse-linked-list-ii/)&#34;&gt; 92. 反转链表 II&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这题与上面一题差别在于，不是整个链表反转。因此在在用递归反转链表时，需用 while 循环到达需要反转的链表节点前面，同时递归函数增加一个参数用于判断是否到达了最后一个需要反转的节点。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var reverseBetween = function(head, left, right) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(!head.next||left==right) return head &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    let node = new ListNode(0,head) //这里同样需要设置虚拟头节点，因为有可能left为1，头节点需要反转。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    let l=node,r=node&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //用while循环让l和r达到需要交换的第一个节点前。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while(left&amp;gt;1)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       l=l.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       r=r.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       left --&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       right --&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //下面代码与上题一致，无非就是多了参数，判断条件有变，交换部分的代码一致。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    const dfs =(r,right)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(right==0) return&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(dfs(r.next,right-1)) return true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(l.next==r)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            l.next = l.next.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            r.next = l.next.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            l.next.next = r&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let temp1=l.next,temp2=r.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        l.next = l.next.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        r.next = r.next.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        temp1.next = r.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        r.next = temp1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        temp2.next = l.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        l.next = temp2 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        l = temp2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(l==r||l.next==r) return true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dfs(r,right)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return node.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;a-href2074-反转偶数长度组的节点-力扣leetcodehttpsleetcodecnproblemsreverse-nodes-in-even-length-groups2074-反转偶数长度组的节点a&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#a-href2074-反转偶数长度组的节点-力扣leetcodehttpsleetcodecnproblemsreverse-nodes-in-even-length-groups2074-反转偶数长度组的节点a&#34;&gt;#&lt;/a&gt; &lt;a href=&#34;[2074. 反转偶数长度组的节点 - 力扣（LeetCode）](https://leetcode.cn/problems/reverse-nodes-in-even-length-groups/)&#34;&gt;2074. 反转偶数长度组的节点&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这题相比于上一题在于不只反转一次。反转的代码依旧可以用上面代码不过判断条件复杂一些。另外最后一组的链表长度如果小于倒数第二组的长度，这时如果长度为偶数则还要反转，而不是最后一组是偶数组才要反转，一开始还理解错误题目来着。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var reverseEvenLengthGroups = function(head) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(!head||!head.next||!head.next.next) return head&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    let cur = head,outside = head,inside = head,index = 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    const dfs =(list,num,k)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    /*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	判断条件相比之前的题有亿点多，一共有四种情况。分为两大类一类是没走完，另一类是走到末尾了。反转链表的代码还是一样。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	没走完的情况：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	1.这时list不为空，num为0。如果当前所在组是奇数，k%2为1 这时不该反转链表，也是不执行回溯部分代码，需return一个值，这里我return-1，下面接收值，如果是-1就立即return-1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	2.如果当前所在组是偶数，k%2为0 这时该反转链表，这里return不return值都行。反正要执行下面回溯部分的反转链表的代码。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	走完的情况：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	3.如果剩余链表数为偶数的话，k-num%2为0，这时要执行回溯部分的代码反转链表，记得这时需到最后一个链表后再return，因为最后一个要反转，所以反转时需到倒数第二个链表的位置。所以这里的判断条件是!list.next而且这个条件需在!list之下不然会出现list为空所以没有list.next的错误。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	4. 如果剩余链表数为奇数的话，这时list为空，同样return一个值，下面用一个变量接住后，加个判断条件return出去，防止执行回溯部分的代码。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(!list) return false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(!list.next&amp;amp;&amp;amp;(k-num)%2==0) return&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(num==0&amp;amp;&amp;amp;k%2==0) return&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(num==0) return -1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let res = dfs(list.next,num-1,k)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(res==true)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;else if(res ==false)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;else if(res==-1)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return -1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(outside.next==list)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            let temp = list&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            outside.next = outside.next.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            temp.next = outside.next.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            outside.next.next = temp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let temp2 = list.next,temp1 = outside.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        list.next = list.next.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        outside.next = outside.next.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        temp2.next = outside.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        outside.next = temp2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        temp1.next = list.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        list.next = temp1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        outside = temp2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(outside.next == list) return true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while(cur)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(dfs(inside,index,index)===false) return cur &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        //注意递归运行完后这里的outside会发生变化，需将inside赋值给outside&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        outside = inside  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let k = index&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while(k&amp;gt;0)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if(!inside||!outside) return cur&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            inside = inside.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            outside = outside.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            k--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(!inside||!outside) return cur&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        index++&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return cur&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;a-href25-k-个一组翻转链表-力扣leetcodehttpsleetcodecnproblemsreverse-nodes-in-k-group-25-k-个一组翻转链表a&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#a-href25-k-个一组翻转链表-力扣leetcodehttpsleetcodecnproblemsreverse-nodes-in-k-group-25-k-个一组翻转链表a&#34;&gt;#&lt;/a&gt; &lt;a href=&#34;[25. K 个一组翻转链表 - 力扣（LeetCode）](https://leetcode.cn/problems/reverse-nodes-in-k-group/)&#34;&gt; 25. K 个一组翻转链表&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;​		这题和上面一样也需要多次反转，我看评论区发现，字节似乎很喜欢考这题，不过老实说这题感觉难度和上面差不多甚至比上题可以还略微简单结果这题是困难上题是一般。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var reverseKGroup = function(head, k) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(k==1) return head&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    let node = new ListNode(0,head),l=node,r=node&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    const dfs=(r,num)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //判断条件有两个一个是剩余链表不足k个这时num大于1，r为空，无需反转。另一个是num为0需反转。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(!r) return false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(num==0) return&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let res = dfs(r.next,num-1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(res==false)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;else if(res==true)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(l.next==r)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            l.next = l.next.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            r.next = r.next.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            l.next.next = r&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            r = l&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let temp1 = l.next,temp2=r.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        l.next=l.next.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        r.next=r.next.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        temp2.next = l.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        l.next = temp2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        temp1.next = r.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        r.next = temp1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        l = temp2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(l==r||l.next==r) return true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while(r)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dfs(r,k)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        //和上面一样递归反转后l的链表会改变，这时需将r赋给l。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        l = r&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let number = k&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while(number&amp;gt;0)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if(!l) break&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            l = l.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            r = r.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            number--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return node.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;二-回文链表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-回文链表&#34;&gt;#&lt;/a&gt; 二、回文链表&lt;/h2&gt;
&lt;h3 id=&#34;a-hreflcr-027-回文链表-力扣leetcodehttpsleetcodecnproblemsamhzsalcr-027-回文链表a&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#a-hreflcr-027-回文链表-力扣leetcodehttpsleetcodecnproblemsamhzsalcr-027-回文链表a&#34;&gt;#&lt;/a&gt; &lt;a href=&#34;[LCR 027. 回文链表 - 力扣（LeetCode）](https://leetcode.cn/problems/aMhZSa/)&#34;&gt;LCR 027. 回文链表&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这个没什么好说的，记得外面的链表也要移动。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var isPalindrome = function(head) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    let cur = head&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(!head||!head.next) return true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    const dfs=(list)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(!list) return&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let res = dfs(list.next)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(res)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;else if(res==false)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(list.val!=cur.val) return false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(cur.next==list||cur.next.next==list) return true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        //记得外面的链表也要往前移动。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cur=cur.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return dfs(cur)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;三-删除链表中满足某个条件的值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-删除链表中满足某个条件的值&#34;&gt;#&lt;/a&gt; 三、删除链表中满足某个条件的值&lt;/h2&gt;
&lt;h3 id=&#34;a-href83-删除排序链表中的重复元素-力扣leetcodehttpsleetcodecnproblemsremove-duplicates-from-sorted-list83-删除排序链表中的重复元素a&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#a-href83-删除排序链表中的重复元素-力扣leetcodehttpsleetcodecnproblemsremove-duplicates-from-sorted-list83-删除排序链表中的重复元素a&#34;&gt;#&lt;/a&gt; &lt;a href=&#34;[83. 删除排序链表中的重复元素 - 力扣（LeetCode）](https://leetcode.cn/problems/remove-duplicates-from-sorted-list/)&#34;&gt;83. 删除排序链表中的重复元素&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;递推部分用哈希表获取链表各个值极其个数，回溯部分再根据哈希表删除重复的元素即可。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let map = new Map(),cur = head&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const dfs =(list)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 当链表为空时再return而不是到链表倒数第一位再return，不然的话递推部分会记录倒数第一个值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(!list) return&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(map.has(list.val))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        map.set(list.val,map.get(list.val)+1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        map.set(list.val,1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dfs(list.next)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(!list.next) return // 如果是倒数第一个就直接return到上一层也就是倒数第二个，倒数第一个位置删除不了节点。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    let num = map.get(list.next.val)-1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    map.set(list.next.val,num)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(num&amp;gt;=1)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        list.next = list.next.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dfs(cur)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return cur&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;a-href82-删除排序链表中的重复元素-ii-力扣leetcodehttpsleetcodecnproblemsremove-duplicates-from-sorted-list-ii82-删除排序链表中的重复元素-iia&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#a-href82-删除排序链表中的重复元素-ii-力扣leetcodehttpsleetcodecnproblemsremove-duplicates-from-sorted-list-ii82-删除排序链表中的重复元素-iia&#34;&gt;#&lt;/a&gt; &lt;a href=&#34;[82. 删除排序链表中的重复元素 II - 力扣（LeetCode）](https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii/)&#34;&gt;82. 删除排序链表中的重复元素 II&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;和上题差不多不过这里头节点可能会删除所以可以整一个虚拟头节点。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var deleteDuplicates = function(head) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    let map = new Map(),cur = new ListNode(false,head)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    const dfs=(list)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(!list)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            let key = map.keys()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for(let i of key)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if(map.get(i)==1) map.delete(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          return  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(map.has(list.val))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            map.set(list.val,map.get(list.val)+1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            map.set(list.val,1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dfs(list.next)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(!list.next) return&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(map.has(list.next.val)) list.next =list.next.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dfs(cur)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return cur.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;二-回文链表-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-回文链表-2&#34;&gt;#&lt;/a&gt; 二、回文链表&lt;/h2&gt;
&lt;h3 id=&#34;a-hreflcr-027-回文链表-力扣leetcodehttpsleetcodecnproblemsamhzsalcr-027-回文链表a-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#a-hreflcr-027-回文链表-力扣leetcodehttpsleetcodecnproblemsamhzsalcr-027-回文链表a-2&#34;&gt;#&lt;/a&gt; &lt;a href=&#34;[LCR 027. 回文链表 - 力扣（LeetCode）](https://leetcode.cn/problems/aMhZSa/)&#34;&gt;LCR 027. 回文链表&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这个没什么好说的，记得外面的链表也要移动。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var isPalindrome = function(head) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    let cur = head&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(!head||!head.next) return true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    const dfs=(list)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(!list) return&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let res = dfs(list.next)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(res)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;else if(res==false)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(list.val!=cur.val) return false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(cur.next==list||cur.next.next==list) return true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        //记得外面的链表也要往前移动。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cur=cur.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return dfs(cur)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;三-删除链表中满足某个条件的值-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-删除链表中满足某个条件的值-2&#34;&gt;#&lt;/a&gt; 三、删除链表中满足某个条件的值&lt;/h2&gt;
&lt;h3 id=&#34;a-href83-删除排序链表中的重复元素-力扣leetcodehttpsleetcodecnproblemsremove-duplicates-from-sorted-list83-删除排序链表中的重复元素a-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#a-href83-删除排序链表中的重复元素-力扣leetcodehttpsleetcodecnproblemsremove-duplicates-from-sorted-list83-删除排序链表中的重复元素a-2&#34;&gt;#&lt;/a&gt; &lt;a href=&#34;[83. 删除排序链表中的重复元素 - 力扣（LeetCode）](https://leetcode.cn/problems/remove-duplicates-from-sorted-list/)&#34;&gt;83. 删除排序链表中的重复元素&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;递推部分用哈希表获取链表各个值极其个数，回溯部分再根据哈希表删除重复的元素即可。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let map = new Map(),cur = head&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const dfs =(list)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 当链表为空时再return而不是到链表倒数第一位再return，不然的话递推部分会记录倒数第一个值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(!list) return&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(map.has(list.val))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        map.set(list.val,map.get(list.val)+1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        map.set(list.val,1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dfs(list.next)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(!list.next) return // 如果是倒数第一个就直接return到上一层也就是倒数第二个，倒数第一个位置删除不了节点。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    let num = map.get(list.next.val)-1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    map.set(list.next.val,num)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(num&amp;gt;=1)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        list.next = list.next.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dfs(cur)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return cur&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;a-href82-删除排序链表中的重复元素-ii-力扣leetcodehttpsleetcodecnproblemsremove-duplicates-from-sorted-list-ii82-删除排序链表中的重复元素-iia-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#a-href82-删除排序链表中的重复元素-ii-力扣leetcodehttpsleetcodecnproblemsremove-duplicates-from-sorted-list-ii82-删除排序链表中的重复元素-iia-2&#34;&gt;#&lt;/a&gt; &lt;a href=&#34;[82. 删除排序链表中的重复元素 II - 力扣（LeetCode）](https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii/)&#34;&gt;82. 删除排序链表中的重复元素 II&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;和上题差不多不过这里头节点可能会删除所以可以整一个虚拟头节点。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var deleteDuplicates = function(head) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    let map = new Map(),cur = new ListNode(false,head)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    const dfs=(list)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(!list)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            let key = map.keys()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for(let i of key)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if(map.get(i)==1) map.delete(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          return  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(map.has(list.val))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            map.set(list.val,map.get(list.val)+1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            map.set(list.val,1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dfs(list.next)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(!list.next) return&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(map.has(list.next.val)) list.next =list.next.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dfs(cur)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return cur.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;a-href1171-从链表中删去总和值为零的连续节点-力扣leetcodehttpsleetcodecnproblemsremove-zero-sum-consecutive-nodes-from-linked-list1171-从链表中删去总和值为零的连续节点a&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#a-href1171-从链表中删去总和值为零的连续节点-力扣leetcodehttpsleetcodecnproblemsremove-zero-sum-consecutive-nodes-from-linked-list1171-从链表中删去总和值为零的连续节点a&#34;&gt;#&lt;/a&gt; &lt;a href=&#34;[1171. 从链表中删去总和值为零的连续节点 - 力扣（LeetCode）](https://leetcode.cn/problems/remove-zero-sum-consecutive-nodes-from-linked-list/)&#34;&gt;1171. 从链表中删去总和值为零的连续节点&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;前缀和 + 链表。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var removeZeroSumSublists = function(head) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    let arr = [],cur = new ListNode(0,head),index = -1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    const dfs =(list,num)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(!list) return  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(arr.length!=0)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            arr.push(arr[num-1]+list.val)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            arr.push(list.val)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dfs(list.next,num+1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let k = arr.indexOf(arr[num+1])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(k!=num+1&amp;amp;&amp;amp;index==-1) index = k&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(index!=-1) list.next = list.next.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(index==num) index = -1     &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dfs(cur,0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return cur.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://seele-exzzz.github.io/2023/07/27/Learning-record/JavaScript%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</guid>
            <title>JavaScript常用方法</title>
            <link>https://seele-exzzz.github.io/2023/07/27/Learning-record/JavaScript%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</link>
            <category term="学习记录" scheme="https://seele-exzzz.github.io/categories/Learning-record/" />
            <category term="JavaScript" scheme="https://seele-exzzz.github.io/tags/JavaScript/" />
            <pubDate>Thu, 27 Jul 2023 16:18:19 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&#34;javascript中常用方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#javascript中常用方法&#34;&gt;#&lt;/a&gt; JavaScript 中常用方法&lt;/h1&gt;
&lt;h2 id=&#34;一-数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-数组&#34;&gt;#&lt;/a&gt; 一、数组&lt;/h2&gt;
&lt;h3 id=&#34;1截取数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1截取数组&#34;&gt;#&lt;/a&gt; 1. 截取数组&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;slice：获取数组某一区间的元素并形成新的数组将其返回，不改变原数组.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;splice：删除数组元素同时可以插入元素，会改变原数组.&lt;/p&gt;
&lt;p&gt;slice 方法接收两个参数都为下标，区间为左闭右开。如果省略第一个参数则从第一个元素开始获取如果省略第二个参数则会一直获取到最后一个值。这两个参数都可以是负数。当参数为负数时，最后一个值的下标为 - 1 并以此往前依次减 1. 如果未获取到元素则返回空数组&lt;/p&gt;
&lt;p&gt;splice 方法接收三个参数，第一个参数是要删除值的下标不可省略另外这个参数同样也可以是负数，第二个参数的删除值的个数如果为 0 则不会删除元素，如果省略则一直删到结尾，第三个参数为插入的元素，元素不只是数字或者字符串，数组，函数或者对象都可以传入。&lt;/p&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let a = [1,2,3,4,5,6,7,8,9]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let b = [&amp;#x27;a&amp;#x27;,&amp;#x27;b&amp;#x27;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//获取下标0到2不包括2的元素并返回形成新的数组&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(a.slice(0,2))//[ 1, 2 ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//如果第一个参数没有的话，则从头开始，第二个参数没有的话则获取到结尾//[1, 2, 3, 4, 5,6, 7, 8, 9]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(a.slice())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//获取倒数第三个到倒数第一个不包括倒数第一个元素//[ 7, 8 ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(a.slice(-3,-1))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let fun= ()=&amp;gt;&amp;#123;return 1&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let obj =&amp;#123;a,b&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a.splice(2,4,obj,fun,...b)//从删除下标2以及之后的3的元素并在2后插入对象函数等元素&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2查找数组中某一元素的位置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2查找数组中某一元素的位置&#34;&gt;#&lt;/a&gt; 2. 查找数组中某一元素的位置&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;indexOf： 获取某一元素在数组首次出现的下标。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lastIndexOf： 获取某一元素在数组中最后一次出现的下标。&lt;/p&gt;
&lt;p&gt;这两个方法都接收两个参数，第一个参数是要找的值，第二个参数是从那一个下标开始包括此下标（indexOf 向后，lastIndexOf 向前）找，如果没有第二个参数就默认 indexO 从头开始找，lastIndexOf 从最后向前开始找。如果没有找到该元素则返回 - 1&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let a =1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const b = [1,2,3,1,2,3,2,1,2,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(b.indexOf(a)) //0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(b.lastIndexOf(a)) //9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(b.indexOf(a,1)) //3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(b.lastIndexOf(a,8)) //7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(b.indexOf(a,b.indexOf(a)+1)) 获取第二个出现此元素下标&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(b.lastIndexOf(a,b.lastIndexOf(a)-1)) 获取倒数第二个出现此元素下标&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(b.indexOf(4) //-1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(b.lastIndexOf(4) //-1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;3查找数组中满足条件的元素或者下标&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3查找数组中满足条件的元素或者下标&#34;&gt;#&lt;/a&gt; 3. 查找数组中满足条件的元素或者下标&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;find：获取数组中满足条件的元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;findIndex：获取数组中满足条件的元素的下标&lt;/p&gt;
&lt;p&gt;这两个方法都接收一个函数做参数，函数有三个参数，第一个为数组的值，第二个为该值在数组中所在的下标，第三个为该数组。其中 find 返回元素，如果没有发现满足条件的元素则返回 undefined，如果有多个元素满足也只会返回第一个满足条件的元素。findIn 返回下标，如果没有发现满足条件的元素则返回 - 1，如果有多个元素满足也只会返回第一个满足条件的下标。&lt;/p&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let a = [1,2,3,4]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(a.find((val)=&amp;gt;val&amp;gt;1)) //2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(a.findIndex((val)=&amp;gt;val&amp;gt;1)) //1 &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;4检查数组中的元素是否存在或者都满足某一条件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4检查数组中的元素是否存在或者都满足某一条件&#34;&gt;#&lt;/a&gt; 4. 检查数组中的元素是否存在或者都满足某一条件&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;every：检查数组中的元素是否都满足某一条件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;some：检查数组中的元素是否存在满足某一条件&lt;/p&gt;
&lt;p&gt;这两个方法都接收一个函数做参数，函数有三个参数，第一个为数组的值，第二个为该值在数组中所在的下标，第三个为该数组。返回值均为布尔值。&lt;/p&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let a = [1,2,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(a.every((val)=&amp;gt;val&amp;gt;0)) //true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(a.every((val)=&amp;gt;val&amp;gt;1)) //false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(a.some((val)=&amp;gt;val&amp;gt;3)) //false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(a.some((val)=&amp;gt;val&amp;gt;1)) //true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;5将数组转化为字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5将数组转化为字符串&#34;&gt;#&lt;/a&gt; 5. 将数组转化为字符串&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;join：获取参数作为分割符，如果没有则默认用‘,’(逗号) 并返回字符串。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;toString： 将数组转化为字符串并用‘,’(逗号) 分割并返回字符串。&lt;/p&gt;
&lt;p&gt;这两个方法都不会改变原数组&lt;/p&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let a = [1,2,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(a.toString())//1,2,3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(a.join())//1,2,3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(a.join(&amp;#x27;&amp;#x27;))//123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(a.join(&amp;#x27;-&amp;#x27;))//1-2-3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;6在数组开头或者结尾删除或者添加元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6在数组开头或者结尾删除或者添加元素&#34;&gt;#&lt;/a&gt; 6. 在数组开头或者结尾删除或者添加元素&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;push：向数组末尾添加一个或多个元素，并返回新的长度。&lt;/li&gt;
&lt;li&gt;pop：从数组末尾删除一个元素，并返回被删除的元素。&lt;/li&gt;
&lt;li&gt;shift：从数组开头删除一个元素，并返回被删除的元素。&lt;/li&gt;
&lt;li&gt;unshift：向数组开头添加一个或多个元素，并返回新的长度。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;二-字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-字符串&#34;&gt;#&lt;/a&gt; 二、字符串&lt;/h2&gt;
&lt;h3 id=&#34;1字符串转化为数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1字符串转化为数组&#34;&gt;#&lt;/a&gt; 1. 字符串转化为数组&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;split：将字符串以某种方式分割成数组。&lt;/p&gt;
&lt;p&gt;split 传入一个参数可以是正则表达式并匹配数组中的元素将其分割为数组，返回一个数组不改变字符串。&lt;/p&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let str = &amp;#x27;1,3 4&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(str.split()) // 如果不传参数则会将返回一个数组第一个元素为整个字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[ &amp;#x27;1,3 4&amp;#x27; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(str.split(&amp;#x27;&amp;#x27;)) // 如果参数为空字符串的话，则会将字符串每一个元素传入数组中并返回这个数组&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[ &amp;#x27;1&amp;#x27;, &amp;#x27;,&amp;#x27;, &amp;#x27;3&amp;#x27;, &amp;#x27; &amp;#x27;, &amp;#x27;4&amp;#x27; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(str.split(&amp;#x27; &amp;#x27;))// 参数可以是空格，将空格作为分割符并传入数组并返回这个数组&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[ &amp;#x27;1,3&amp;#x27;, &amp;#x27;4&amp;#x27; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(str.split(&amp;#x27;,&amp;#x27;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[ &amp;#x27;1&amp;#x27;, &amp;#x27;3 4&amp;#x27; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(str.split(/[0-9]/))// 参数可以是正则表达式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[ &amp;#x27;&amp;#x27;, &amp;#x27;,&amp;#x27;, &amp;#x27; &amp;#x27;, &amp;#x27;&amp;#x27; ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2-查找字符串中某个值的位置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-查找字符串中某个值的位置&#34;&gt;#&lt;/a&gt; 2. 查找字符串中某个值的位置&lt;/h3&gt;
&lt;p&gt;1.indexOf：查找某个值在字符串的位置，这个值可以是字符串。&lt;/p&gt;
&lt;p&gt;2.lastIndexOf：查找某个值在字符串的位置，同样这个值可以是字符串。&lt;/p&gt;
&lt;p&gt;用法与数组的方法一致，不过这个方法可以很方便的求两个字符串的子串。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let str1 = &amp;#x27;abc&amp;#x27;,str2=&amp;#x27;abccbabc&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(str2.indexOf(str1))//0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(str2.lastIndexOf(str1))//5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;只要返回值不是-1就说明str是str2的子串。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;三-哈希表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-哈希表&#34;&gt;#&lt;/a&gt; 三、哈希表&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;set (key,value): 设置键值对，如果某一键已经存在则会覆盖。第一个参数可以是数字，字符串，布尔值，数组，对象，函数等等值。&lt;/p&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let arr1 =[1,2],obj1=&amp;#123;a:1&amp;#125;,arr2 =[1,2],obj2=&amp;#123;a:1&amp;#125;,map = new Map(),fun1 =()=&amp;gt;&amp;#123;&amp;#125;,fun2=()=&amp;gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;map.set(arr1,1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;map.set(obj1,1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;map.set(arr2,1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;map.set(obj2,1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;map.set(fun1,1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;map.set(fun2,1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(map.size)//6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let arr1 =[1,2],arr2 =arr1,map = new Map()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;map.set(arr1,1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;map.set(arr2,1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(map.size)//1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;可以发现像数组，对象，函数尽管一模一样，但是其变量储存的地址不同所以看做是不同的键，但是如果是浅拷贝储存变量的地址一致就视作是同一个键&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;get (key): 获取某一键值在哈希表中的值。&lt;/p&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let map = new Map()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;map.set(1,2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;map.get(1)//2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;map.get(2)//undefined 如果找不到就会返回undefined&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;has (key): 判断某个键是否存在，并返回布尔值。&lt;/p&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let map = new Map()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;map.set(1,2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(map.has(1))//true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(map.has(2))//false&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;clear (): 清除哈希表所有键值对。&lt;/p&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let map = new Map()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;map.set(1,2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(map.has(1))//true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;map.clear()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(map.has(1))//false&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;delete (key): 删除某键。&lt;/p&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let map = new Map()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;map.set(1,2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(map.has(1))//true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;map.delete()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(map.has(1))//false&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;keys (): 返回一个包含哈希表所有键的迭代器。&lt;/p&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let arr1 =[1,2],obj1=&amp;#123;a:1&amp;#125;,arr2 =[1,2],obj2=&amp;#123;a:1&amp;#125;,map = new Map(),fun1 =()=&amp;gt;&amp;#123;&amp;#125;,fun2=()=&amp;gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;map.set(arr1,1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;map.set(obj1,1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;map.set(arr2,1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;map.set(obj2,1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;map.set(fun1,1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;map.set(fun2,1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let key = map.keys()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for(let i of key)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    console.log(i) //[ 1, 2 ] &amp;#123; a: 1 &amp;#125; [ 1, 2 ] &amp;#123; a: 1 &amp;#125; [Function: fun1] [Function: fun2]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;values (): 返回一个包含哈希表所有值的迭代器。&lt;/p&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let arr1 =[1,2],obj1=&amp;#123;a:1&amp;#125;,arr2 =[1,2],obj2=&amp;#123;a:1&amp;#125;,map = new Map(),fun1 =()=&amp;gt;&amp;#123;&amp;#125;,fun2=()=&amp;gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;map.set(arr1,1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;map.set(obj1,1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;map.set(arr2,1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;map.set(obj2,1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;map.set(fun1,1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;map.set(fun2,1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let val = map.values()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for(let i of val)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    console.log(i) // 1 1 1 1 1 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://seele-exzzz.github.io/2023/07/17/algorithm/%E9%93%BE%E8%A1%A8%E5%9F%BA%E7%A1%80/</guid>
            <title>链表基础</title>
            <link>https://seele-exzzz.github.io/2023/07/17/algorithm/%E9%93%BE%E8%A1%A8%E5%9F%BA%E7%A1%80/</link>
            <category term="算法" scheme="https://seele-exzzz.github.io/categories/algorithm/" />
            <category term="算法" scheme="https://seele-exzzz.github.io/tags/%E7%AE%97%E6%B3%95/" />
            <category term="链表" scheme="https://seele-exzzz.github.io/tags/%E9%93%BE%E8%A1%A8/" />
            <pubDate>Mon, 17 Jul 2023 15:45:02 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&#34;链表基础&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#链表基础&#34;&gt;#&lt;/a&gt; 链表基础&lt;/h1&gt;
&lt;h2 id=&#34;一-链表操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-链表操作&#34;&gt;#&lt;/a&gt; 一、链表操作&lt;/h2&gt;
&lt;h3 id=&#34;1力扣上的链表构造函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1力扣上的链表构造函数&#34;&gt;#&lt;/a&gt; 1. 力扣上的链表构造函数&lt;/h3&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;//注意这是力扣上的构造函数不是JavaScript内置函数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function ListNode(val, next) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    this.val = (val===undefined ? 0 : val)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    this.next = (next===undefined ? null : next)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let node = new ListNode(0,head)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//通常用来给链表加上虚拟头结点方便对链表进行操作，第一个形参传值，第二形参传链表&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//另外如果用const定义变量再赋予链表，这个变量就无法操作了，原因应该是在操作链表时，链表所储存的变量的地址发生变化。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;2链表移动和删除&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2链表移动和删除&#34;&gt;#&lt;/a&gt; 2. 链表移动和删除&lt;/h3&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let cur = head &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;将head赋给变量cur，如果直接操作head然后再return的话会是null，由于这是浅拷贝，在操作cur时head也会发生改变，所以操作完cur再return head就行。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cur = cur.next //让将cur下一位赋给cur就完成了一次移动。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;while(cur)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	...	//对cur操作&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cur = cur.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; //这就完成了一次遍历，这时cur是null，head已操作&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cur.netx = cur.next.next //想删除那个节点需找到那个节点的前面一个节点，将前面那个节点的指针指向删除节点后面那个节点。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//力扣上203. 移除链表元素&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//方法一，增加虚拟节点&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var removeElements = function(head, val) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    const cur = new ListNode(0,head)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    let a = cur&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while(a.next)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(a.next.val==val)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            a.next = a.next.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            a = a.next &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return cur.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;//增加虚拟头节点的好处在于，处理原链表的头节点与其他节点的方式一致，无需在额外考虑头节点如何处理，最后只要return cur.next就行。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//方法二，在不增加虚拟头节点的情况下删除指定节点&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var removeElements = function(head, val) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    let cur = head&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    /*先用while将头节点中值等于val删除，之后就和方法一差不多，需要注意的是，删除后有可能是null或者传来的链表就是null，这是需要if条件判断一下，方法一无需判断是因为加了头节点所以不可能是null*/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while(cur&amp;amp;&amp;amp;cur.val==val)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cur = cur.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(!cur) return cur&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    head = cur //将处理好的cur赋值给head，如果不赋值，前面的操作就没有用了。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while(cur.next)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(cur.next.val==val)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cur.next = cur.next.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cur = cur.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return head&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;3链表的插入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3链表的插入&#34;&gt;#&lt;/a&gt; 3. 链表的插入&lt;/h3&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;//假设需要往链表head中的第n个节点插入val值，注意链表与数组一样下标从0开始&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//首先声明一个变量并将head赋值给这个变量&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let cur = head&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;方法一：不使用虚拟节点&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//如果不使用虚拟节点的话，得分两种情况，第一种删除头节点，第二种删除后面的节点&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//插入头节点&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;if(n==0)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	head = new ListNode(val,head)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	//移动到第n-1个节点前&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while(n&amp;gt;1)&amp;#123; //从n减到1，这时cur到n-1节点前，如果加了虚拟头节点，这时的判断条件为0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	  cur = cur.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	  n --&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   let node = new ListNode(val) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   /*注意这里先把cur.next先赋给node.next，如果反过来先让cur.next变成node.next，再让cur.next赋给node.next，这时cur.next已经是node，相当于自己指向自己。这里有点像两个变量交换。假设有a,b两个变量，交换a,b两个变量的值，不用解构赋值的话&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   	 let c = a&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   	 a = b&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   	 b = c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   node.next = cur.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   cur.next = node&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;方法二：使用虚拟头节点&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let cur = new ListNode(0,head)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let head = cur&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;while(n)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cur = cur.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	n--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let node = new ListNode(val)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;node.next = cur.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cur.next = node&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;head = head.next //最后注意去除虚拟头节点&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://seele-exzzz.github.io/2023/07/14/algorithm/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80/</guid>
            <title>二叉树基础</title>
            <link>https://seele-exzzz.github.io/2023/07/14/algorithm/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80/</link>
            <category term="算法" scheme="https://seele-exzzz.github.io/categories/algorithm/" />
            <category term="二叉树" scheme="https://seele-exzzz.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/" />
            <category term="算法" scheme="https://seele-exzzz.github.io/tags/%E7%AE%97%E6%B3%95/" />
            <pubDate>Fri, 14 Jul 2023 22:04:41 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&#34;二叉树基础&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二叉树基础&#34;&gt;#&lt;/a&gt; 二叉树基础&lt;/h1&gt;
&lt;h2 id=&#34;一-二叉树种类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-二叉树种类&#34;&gt;#&lt;/a&gt; 一、二叉树种类&lt;/h2&gt;
&lt;h3 id=&#34;1满二叉树&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1满二叉树&#34;&gt;#&lt;/a&gt; 1. 满二叉树&lt;/h3&gt;
&lt;p&gt;除最后一层有两个子节点外，最后一层没有子节点，如果某个满二叉树有 k 层则该满二叉树有 2 的 k 次方 - 1 个节点。&lt;/p&gt;
&lt;h3 id=&#34;2-完全二叉树&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-完全二叉树&#34;&gt;#&lt;/a&gt; 2. 完全二叉树&lt;/h3&gt;
&lt;p&gt;最后一层如果有缺的子节点则该子节点为右侧的子节点。如果某个完全二叉树有 k 层，则该完全二叉树则有 2 的 k-1 次方到 2 的 k 次方 - 1 个节点。满二叉树是特殊的完全二叉树&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://typora-seele-exzzz.oss-cn-guangzhou.aliyuncs.com/img/algorithm/binary_tree/%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%92%8C%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-二叉搜索树&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-二叉搜索树&#34;&gt;#&lt;/a&gt; 3. 二叉搜索树&lt;/h3&gt;
&lt;p&gt;二叉搜索树中某个节点的左节点值小于该节点，右节点值大于该节点&lt;/p&gt;
&lt;h3 id=&#34;4-二叉平衡树&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-二叉平衡树&#34;&gt;#&lt;/a&gt; 4. 二叉平衡树&lt;/h3&gt;
&lt;p&gt;在二叉搜索树的条件下，每一个节点的左子树与右子树的高度差不大于一，二叉平衡树是特殊的二叉搜索树。另外二叉树的高度从下往上数，深度从上往下数。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://typora-seele-exzzz.oss-cn-guangzhou.aliyuncs.com/img/algorithm/binary_tree/%E4%BA%8C%E5%8F%89%E5%B9%B3%E8%A1%A1%E6%A0%91.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;二-二叉树的构建&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-二叉树的构建&#34;&gt;#&lt;/a&gt; 二、 二叉树的构建&lt;/h2&gt;
&lt;h3 id=&#34;1-构建力扣上的二叉树&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-构建力扣上的二叉树&#34;&gt;#&lt;/a&gt; 1. 构建力扣上的二叉树&lt;/h3&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;在做力扣上102. 二叉树的层序遍历的时候，好奇试了一下console.dir(root)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;TreeNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  val: 3,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  left: TreeNode &amp;#123; val: 9, left: null, right: null &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  right: TreeNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    val: 20,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    left: TreeNode &amp;#123; val: 15, left: null, right: null &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    right: TreeNode &amp;#123; val: 7, left: null, right: null &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;// 结果是这个，根据这个我试着构建了一下二叉树，当然后面看别人的文章发现二叉树远不止这些属性和方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class TreeNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    constructor(val) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      this.val = val;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      this.left = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      this.right = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    addleft(left)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this.left = left&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    addright(right)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this.right = right&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const root = new TreeNode(3)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;root.addleft(new TreeNode(9))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;root.addright(new TreeNode(20))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;root.right.addleft(new TreeNode(15))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;root.right.addright(new TreeNode(7))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;三-二叉树的遍历&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-二叉树的遍历&#34;&gt;#&lt;/a&gt; 三、二叉树的遍历&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://typora-seele-exzzz.oss-cn-guangzhou.aliyuncs.com/img/cover/algorithm/binary_tree/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%8D%E4%B8%AD%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-深度优先算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-深度优先算法&#34;&gt;#&lt;/a&gt; 1. 深度优先算法&lt;/h3&gt;
&lt;h4 id=&#34;1-递归法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-递归法&#34;&gt;#&lt;/a&gt; 1. 递归法&lt;/h4&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;//root为二叉树&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const result =[]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const dfs = (root)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(root==null) return&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //前序遍历&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result.push(root.val)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dfs(root.left)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dfs(root.right)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //中序遍历&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dfs(root.left)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result.push(root.val)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dfs(root.right)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //后序遍历&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dfs(root.left)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dfs(root.right)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result.push(root.val)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dfs(root)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return result&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;2-迭代法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-迭代法&#34;&gt;#&lt;/a&gt; 2. 迭代法&lt;/h4&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;//前序遍历&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const result =[],arr=[root]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;while(arr.length&amp;gt;0)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    let tree = arr.pop()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(tree==null) continue&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result.push(tree.val)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	arr.push(tree.right)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    arr.push(tree.left)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return result&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//后序遍历 在前序遍历的情况下调换调换传入arr的两个子节点，同时将最后的数组反转。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const result =[],arr=[root]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;while(arr.length&amp;gt;0)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    let tree = arr.pop()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(tree==null) continue&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result.push(tree.val)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    arr.push(tree.left)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    arr.push(tree.right)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return result.reverse()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//中序遍历&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const result =[],stack=[]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let tree = root&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;while(stack.length&amp;gt;0||tree)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	if(tree)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		stack.push(tree)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		tree = tree.left&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		let rootTree = stack.pop()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		result.push(rootTree.val)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		tree = rootTree.right&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return result&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;2-广度优先搜索span-stylefont-size16px层序遍历span&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-广度优先搜索span-stylefont-size16px层序遍历span&#34;&gt;#&lt;/a&gt; 2. 广度优先搜索&lt;span style=&#34;font-size:16px&#34;&gt;(层序遍历)&lt;/span&gt;&lt;/h3&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;//力扣上的层序遍历最后的输出结果似乎都是二维数组，需要将每一层的值用数组储存然后将其储存进一个数组输出出去。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const result = [],arr=[root]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let res=[]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;while(arr.length&amp;gt;0)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    let len = arr.length //相当于快照用于储存当前层数的长度。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while(len&amp;gt;0)&amp;#123; //当len为零时，说明当前层的值已全部弹出，这时应该用result储存当前层所有数组&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let tree = arr.shift() &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        len -- &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(tree!=null)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            res.push(tree.val)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            arr.push(tree.left)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            arr.push(tree.right)  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;     &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(res.length==0) break &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result.push(res) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    res = [] //清空当前层用于记录下一层的值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return result&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://seele-exzzz.github.io/2023/07/12/Learning-record/%E6%AD%A3%E5%88%99%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</guid>
            <title>正则学习记录</title>
            <link>https://seele-exzzz.github.io/2023/07/12/Learning-record/%E6%AD%A3%E5%88%99%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</link>
            <category term="学习记录" scheme="https://seele-exzzz.github.io/categories/Learning-record/" />
            <category term="正则" scheme="https://seele-exzzz.github.io/tags/%E6%AD%A3%E5%88%99/" />
            <pubDate>Wed, 12 Jul 2023 13:31:15 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;正则学习记录&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#正则学习记录&#34;&gt;#&lt;/a&gt; 正则学习记录&lt;/h1&gt;
&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&#34;一-正则表达式的创建&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-正则表达式的创建&#34;&gt;#&lt;/a&gt; 一、正则表达式的创建&lt;/h2&gt;
&lt;h3 id=&#34;1-字面量创建&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-字面量创建&#34;&gt;#&lt;/a&gt; 1. 字面量创建&lt;/h3&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const a = /a/igm //i表示忽略大小写，g表示全局匹配，m表示多行匹配&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;2-构造函数创建&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-构造函数创建&#34;&gt;#&lt;/a&gt; 2. 构造函数创建&lt;/h3&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cosnt a = &amp;#x27;a&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const b = new RegExp(&amp;#x27;a&amp;#x27;) 或者 b = new RegExp(a)//这里的b打印结果与上面字面量创建的a一致&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// RegExp有两个参数，第一个参数传入一个字符串表示正则表达式，第二个参数有g全局匹配，i忽略大小写，m多行匹配&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;二-javascript中正则方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-javascript中正则方法&#34;&gt;#&lt;/a&gt; 二、JavaScript 中正则方法&lt;/h2&gt;
&lt;h3 id=&#34;1-test方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-test方法&#34;&gt;#&lt;/a&gt; 1. test 方法&lt;/h3&gt;
&lt;p&gt;用于测试某一字符串是否满足某一正则表达式，返回一个布尔值。正则表达式的方法&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const reg = /a/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const str = &amp;#x27;abc&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;reg.test(str)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;2-exec方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-exec方法&#34;&gt;#&lt;/a&gt; 2. exec 方法&lt;/h3&gt;
&lt;p&gt;用于匹配某一字符串中满足正则表达式的内容，返回一个数组，第一项为匹配到的内容，第二项 index 为匹配到内容第一个字符所在的索引，input 为匹配的字符串，groups 为命名的捕获组。正则表达式的方法&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const reg = /a/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const str = &amp;#x27;abcabcaa&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const result = reg.exec(str)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(result) //[ &amp;#x27;a&amp;#x27;, index: 0, input: &amp;#x27;abcabcaa&amp;#x27;, groups: undefined ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	如果正则表达式是全局匹配的话，exec会改变的lastindex，如果exec没匹配上，这时lastindexhi变为0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const reg = /a/g&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const str = &amp;#x27;abac&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for(let i=0;i&amp;lt;3;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	console.log(reg.lastIndex)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    reg.exec(str)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    console.log(reg.lastIndex)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;// 0,1,1,3,3,0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//可以用?&amp;lt;name&amp;gt;给捕获组命名。这时如果成功匹配返回的对象中groups不再是undefined而是一个属性为捕获组名字，值为匹配到的内容的对象。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const reg = /(?&amp;lt;year&amp;gt;[0-9]+)-(?&amp;lt;month&amp;gt;[0-9]+)-(?&amp;lt;day&amp;gt;[0-9]&amp;#123;2&amp;#125;)/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const str = &amp;#x27;2023-07-13&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const result = reg.exec(str)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(result)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#x27;2023-07-13&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#x27;2023&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#x27;07&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#x27;13&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  index: 0,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  input: &amp;#x27;2023-07-13&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  groups: [Object: null prototype] &amp;#123; year: 	 &amp;#x27;2023&amp;#x27;, month: &amp;#x27;07&amp;#x27;, day: &amp;#x27;13&amp;#x27; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const reg = /(?&amp;lt;year&amp;gt;[0-9]+)-(?&amp;lt;month&amp;gt;[0-9]+)-(?&amp;lt;day&amp;gt;[0-9]&amp;#123;2&amp;#125;)/g&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const str = &amp;#x27;2023-07-13 1145-14-15&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;reg.exec(str).groups&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const &amp;#123;year,month,day&amp;#125; = reg.exec(str).groups&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(year,month,day) // 1145 14 15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;3-match方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-match方法&#34;&gt;#&lt;/a&gt; 3. match 方法&lt;/h3&gt;
&lt;p&gt;匹配字符串中满足正则表达式的内容并返回一个数组，注意 match 是字符串的方法不是正则表达式的方法。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const reg = /a/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const regG = /a/g&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const str = &amp;#x27;abcabcaa&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const result = str.match(reg) // 如果正则表达式不是全局匹配这时match返回值与exec一致&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(result)//[ &amp;#x27;a&amp;#x27;, index: 0, input: &amp;#x27;abcabcaa&amp;#x27;, groups: undefined ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const resultG = str.match(regG)// 这时会返回一个数组，数组中每一项为满足字符串中满足正则表达式中匹配规则的部分。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(resultG)//[ &amp;#x27;a&amp;#x27;, &amp;#x27;a&amp;#x27;, &amp;#x27;a&amp;#x27;, &amp;#x27;a&amp;#x27; ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;4-search方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-search方法&#34;&gt;#&lt;/a&gt; 4. search 方法&lt;/h3&gt;
&lt;p&gt;匹配字符串中满足正则表达式的内容并返回第一个匹配到字符的索引。同样这也是字符串方法&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const reg = /a/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const regG = /a/g&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const str = &amp;#x27;babcabcaa&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const result = str.search(reg) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const resultG = str.search(regG)// 全局匹配一样只返回匹配到第一个满足条件的字符的索引&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(result)//1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(resultG)//1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;5-replace方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-replace方法&#34;&gt;#&lt;/a&gt; 5. replace () 方法&lt;/h3&gt;
&lt;p&gt;匹配字符串中满足某字符串或者正则表达式的内容并进行替换，同样也是字符串方法&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const reg = /a/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const regG = /a/g&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const str = &amp;#x27;babcabcaa&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const result = str.replace(reg,&amp;#x27;*&amp;#x27;) //没有全局匹配只匹配第一个满足条件的&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const resultG = str.replace(regG,&amp;#x27;*&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(result) //b*bcabcaa&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(resultG) //b*bc*bc**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	replace的第二个参数可以传递一个函数，函数的参数为匹配到的内容，如果正则表达式是全局匹配的话且能匹配到多个字符，则每匹配到一个就会调用一次函数，形参为匹配到的内容&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const result = str.replace(reg,(data)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    console.log(data) // a &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const resultG = str.replace(regG,(data)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    console.log(data) // a&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;) //回调函数调用了3次&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;6-split方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-split方法&#34;&gt;#&lt;/a&gt; 6. split 方法&lt;/h3&gt;
&lt;p&gt;用字符串分割数组，分割方式可以为一个正则表达式并返回一个数组，数组每一项为分割后的字符串。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const str = &amp;#x27;abc&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const newstr = str.split(&amp;#x27;&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(newstr) //[ &amp;#x27;a&amp;#x27;, &amp;#x27;b&amp;#x27;, &amp;#x27;c&amp;#x27; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	JavaScript中字符串的方法有限，如果想要反转字符串，简单的办法是用split(&amp;#x27;&amp;#x27;)转化为数	组然后调用reverse方法反转数组并调用join(&amp;#x27;&amp;#x27;)转回字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const reStr = str.split(&amp;#x27;&amp;#x27;).reverse().join(&amp;#x27;&amp;#x27;) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(reStr) // cba&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const str = &amp;#x27;2023-7-12&amp;#x27; //如果想要这个字符串中的数字&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const newstr = str.split(/-/)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(newstr) [ &amp;#x27;2023&amp;#x27;, &amp;#x27;7&amp;#x27;, &amp;#x27;12&amp;#x27; ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://seele-exzzz.github.io/2023/07/08/Learning-record/Typescript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</guid>
            <title>Typescript学习记录</title>
            <link>https://seele-exzzz.github.io/2023/07/08/Learning-record/Typescript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</link>
            <category term="学习记录" scheme="https://seele-exzzz.github.io/categories/Learning-record/" />
            <category term="typescript" scheme="https://seele-exzzz.github.io/tags/typescript/" />
            <pubDate>Sat, 08 Jul 2023 18:22:13 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;typescript学习记录&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#typescript学习记录&#34;&gt;#&lt;/a&gt; Typescript 学习记录&lt;/h1&gt;
&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&#34;一-基本类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-基本类型&#34;&gt;#&lt;/a&gt; 一、基本类型&lt;/h2&gt;
&lt;h3 id=&#34;1-基本数据类型span-stylefont-size14px-type代表类型span&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-基本数据类型span-stylefont-size14px-type代表类型span&#34;&gt;#&lt;/a&gt; 1. 基本数据类型&lt;span style=&#39;font-size:14px&#39; &gt;(type 代表类型)&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;any: 任意类型&lt;/li&gt;
&lt;li&gt;string: 字符串类型&lt;/li&gt;
&lt;li&gt;boolean: 布尔类型&lt;/li&gt;
&lt;li&gt;type[]，Array&lt;type&gt;: 数组类型两种表示方法&lt;/li&gt;
&lt;li&gt;[type] : 元组，如果要储存类似经纬度这类需要两个数字的数据则可以用 [number,number]&lt;/li&gt;
&lt;li&gt;void : 表示函数无返回值&lt;/li&gt;
&lt;li&gt;null : null 类型&lt;/li&gt;
&lt;li&gt;undefined : undefined 类型&lt;/li&gt;
&lt;li&gt;never : 表示从来不会出现的值&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-函数形参和返回值的类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-函数形参和返回值的类型&#34;&gt;#&lt;/a&gt; 2. 函数形参和返回值的类型&lt;/h3&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; f = (&lt;span class=&#34;attr&#34;&gt;a&lt;/span&gt;:&lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;,&lt;span class=&#34;attr&#34;&gt;b&lt;/span&gt;:&lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;):&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;string&lt;/span&gt;=&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; a+b&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; f = (&lt;span class=&#34;attr&#34;&gt;a&lt;/span&gt;:&lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;,&lt;span class=&#34;attr&#34;&gt;b&lt;/span&gt;:&lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;):&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;void&lt;/span&gt;=&amp;gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;span class=&#34;comment&#34;&gt;//void 表示无返回值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;3-类型推断&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-类型推断&#34;&gt;#&lt;/a&gt; 3. 类型推断&lt;/h3&gt;
&lt;p&gt;ide 在编译文件时会对变量的类型进行判断，所以在声明一个变量后立马赋值，声明一个对象并对其中的属性赋值又或者函数的返回值与形参有关可以推断出来等等，这些可以推断出来的就无需加上类型。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; a = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;//ide会推断这个变量a的类型为number类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a : &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;//同样ide会推断这个a属性为number类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; fun = (&lt;span class=&#34;attr&#34;&gt;a&lt;/span&gt;:&lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;,&lt;span class=&#34;attr&#34;&gt;b&lt;/span&gt;:&lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; a+b &lt;span class=&#34;comment&#34;&gt;//ide会推断这里的返回值为string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;4-关键字type和联合类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-关键字type和联合类型&#34;&gt;#&lt;/a&gt; 4. 关键字 type 和联合类型&lt;/h3&gt;
&lt;p&gt;利用 type 给类型取一个别名，type 可以与联合类型一起使用&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; str1 = &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;a&lt;/span&gt;:str1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; t = &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt; | str1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;b&lt;/span&gt;:t&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; funType = &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt; | &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;fun&lt;/span&gt; = (&lt;span class=&#34;params&#34;&gt;a:funType&lt;/span&gt;)=&amp;gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;二-接口&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-接口&#34;&gt;#&lt;/a&gt; 二、接口&lt;/h2&gt;
&lt;p&gt;如果一个对象会重复使用，则可以使用将其抽出写成接口。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Iobj&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;a&lt;/span&gt;:&lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;b&lt;/span&gt;:&lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;comment&#34;&gt;//接口与对象不同，属性之间可不加逗号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; fun=(&lt;span class=&#34;attr&#34;&gt;b&lt;/span&gt;:&lt;span class=&#34;title class_&#34;&gt;Iobj&lt;/span&gt;):&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;void&lt;/span&gt;=&amp;gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;1-接口属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-接口属性&#34;&gt;#&lt;/a&gt; 1. 接口属性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可选属性：如果函数的形参对象中的某些属性是可选的。比如在使用 axios 时，传入的配置对象中 method 属性是可选属性如果不传默认是 get。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Iobj&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a?:&lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;b&lt;/span&gt;:&lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;comment&#34;&gt;//a是可选属性，可不传。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; fun=(&lt;span class=&#34;attr&#34;&gt;b&lt;/span&gt;:&lt;span class=&#34;title class_&#34;&gt;Iobj&lt;/span&gt;):&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;void&lt;/span&gt;=&amp;gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; fun=(&amp;#123;a=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,b&amp;#125;:&lt;span class=&#34;title class_&#34;&gt;Iobj&lt;/span&gt;):&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;void&lt;/span&gt;=&amp;gt;&lt;/span&gt;&amp;#123;&amp;#125; &lt;span class=&#34;comment&#34;&gt;//如果想给a一个默认值，如果没传就使用默认值的话&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;只读属性：如果接口中的某些属性不可修改，只读的话则可以使用只读属性&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Iobj&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;a&lt;/span&gt;:&lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;b&lt;/span&gt;:&lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; fun=(&amp;#123;a,b&amp;#125;:&lt;span class=&#34;title class_&#34;&gt;Iobj&lt;/span&gt;):&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;void&lt;/span&gt;=&amp;gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;索引类型：索引签名允许我们定义一个可以包含不同属性名称的动态对象并且固定属性的类型必须与索引类型相同或是其子级。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Iobj&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;a&lt;/span&gt;:&lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;b&lt;/span&gt;:&lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;attr&#34;&gt;propName&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;]: &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; fun=(&lt;span class=&#34;attr&#34;&gt;abc&lt;/span&gt;:&lt;span class=&#34;title class_&#34;&gt;Iobj&lt;/span&gt;):&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;void&lt;/span&gt;=&amp;gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
    </channel>
</rss>
