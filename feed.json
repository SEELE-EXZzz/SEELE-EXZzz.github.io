{
    "version": "https://jsonfeed.org/version/1",
    "title": "个人博客",
    "subtitle": "",
    "icon": "https://seele-exzzz.github.io/assets/favicon.ico",
    "description": "",
    "home_page_url": "https://seele-exzzz.github.io",
    "items": [
        {
            "id": "https://seele-exzzz.github.io/2023/11/14/Video-Audio/websocket%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/",
            "url": "https://seele-exzzz.github.io/2023/11/14/Video-Audio/websocket%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/",
            "title": "websocket的基本使用",
            "date_published": "2023-11-14T07:48:00.229Z",
            "content_html": "<h3 id=\"websocket的基本使用\"><a class=\"markdownIt-Anchor\" href=\"#websocket的基本使用\">#</a> websocket 的基本使用</h3>\n<p>websocket 是全双工，可以做到客户端与服务端的实时连接，在直播，即时通讯，等要求实时传输的场景下有广泛的运用。</p>\n<h3 id=\"一-基本使用\"><a class=\"markdownIt-Anchor\" href=\"#一-基本使用\">#</a> 一、基本使用</h3>\n<h4 id=\"1-引用\"><a class=\"markdownIt-Anchor\" href=\"#1-引用\">#</a> 1. 引用</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.前端</span><br><span class=\"line\">let socket = new WebSocket(url) //注意url以ws或者wss开头，而不是http或者https,当调用这个构造函数的时候会连接一下。</span><br><span class=\"line\">socket实例对象上的方法与事件:</span><br><span class=\"line\">onclose:连接关闭事件</span><br><span class=\"line\">onerror:连接失败事件</span><br><span class=\"line\">onopen:连接成功事件</span><br><span class=\"line\">onmessage:从服务器上获取数据时的事件</span><br><span class=\"line\">close:断开连接</span><br><span class=\"line\">send:发送数据</span><br><span class=\"line\">2.后端</span><br><span class=\"line\">npm install ws // 下载websocket</span><br><span class=\"line\">const WebSocket = require(&#x27;ws&#x27;) //引入构造函数websocket</span><br><span class=\"line\">const ws = new WebSocket.Server(&#123;port:3000&#125;) //调用websocket的server方法并传入port参数确定监听的端口号</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-连接断连发送接收\"><a class=\"markdownIt-Anchor\" href=\"#2-连接断连发送接收\">#</a> 2. 连接，断连，发送，接收</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.前端</span><br><span class=\"line\">socket.onopen=()=&gt;&#123;</span><br><span class=\"line\">\tsocket.send(&#x27;hello，world&#x27;) //向服务器发送消息</span><br><span class=\"line\">\tsocket.close() //断开连接</span><br><span class=\"line\">&#125; //连接成功后的事件。</span><br><span class=\"line\">socket.onmessage=(data)=&gt;&#123;</span><br><span class=\"line\">\tconsole.log(data)</span><br><span class=\"line\">&#125;//当服务器向客户端发送消息后的事件。</span><br><span class=\"line\">2.后端</span><br><span class=\"line\">ws.on(&#x27;connection&#x27;,(server)=&gt;&#123;</span><br><span class=\"line\">\t//后端两种方法接收数据</span><br><span class=\"line\">\tserver.on(&#x27;message&#x27;,(data)=&gt;&#123;</span><br><span class=\"line\">\t\tconsole.log(data)</span><br><span class=\"line\">\t\tconsole.log(data.toString(&#x27;utf8&#x27;)) //可以使用toString将buffer转化为字符串</span><br><span class=\"line\">\t&#125;) //这时传来的数据是buffer二进制格式</span><br><span class=\"line\">\tserver.onmessage=(data)=&gt;&#123;</span><br><span class=\"line\">\t\tconsole.log(data)</span><br><span class=\"line\">\t&#125; //这时传来的数据是json格式</span><br><span class=\"line\">\tserver.on(&#x27;close&#x27;,()=&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;)连接断开后的事件。</span><br><span class=\"line\">&#125;)// ws为实例对象，其中有connection的事件，每有一次连接就会调用一次，客户端可以有多次连接。同时，回调函数上有一个参数，之后的连接关闭，以及发送，接受事件都在这个参数上而不在实例对象上</span><br></pre></td></tr></table></figure>\n<h3 id=\"二-socketio的基本使用\"><a class=\"markdownIt-Anchor\" href=\"#二-socketio的基本使用\">#</a> 二、socket.io 的基本使用</h3>\n<p>socket.io 是一个第三方库，集成了 websocket，支持在客户端以及服务端使用。其中还有 room 的概念，在制作直播间以及即时通讯软件的群聊的时候会很方便。注意，websocket 支持跨域，所以 websocket 并不是一个安全的连接方式，但是 socket.io 不支持跨域，所以在后端使用 websocket 的时候要使用 cors 解决跨域问题。</p>\n",
            "tags": [
                "音视频开发",
                "webrtc"
            ]
        },
        {
            "id": "https://seele-exzzz.github.io/2023/11/13/Video-Audio/canvas%E5%AF%B9%E8%A7%86%E9%A2%91%E5%A4%84%E7%90%86/",
            "url": "https://seele-exzzz.github.io/2023/11/13/Video-Audio/canvas%E5%AF%B9%E8%A7%86%E9%A2%91%E5%A4%84%E7%90%86/",
            "title": "canvas对视频处理",
            "date_published": "2023-11-13T10:08:48.565Z",
            "content_html": "<h2 id=\"canvas对视频处理\"><a class=\"markdownIt-Anchor\" href=\"#canvas对视频处理\">#</a> canvas 对视频处理</h2>\n<h3 id=\"1使用canvas动态截取视频\"><a class=\"markdownIt-Anchor\" href=\"#1使用canvas动态截取视频\">#</a> 1. 使用 canvas 动态截取视频</h3>\n<h4 id=\"1-截取画面\"><a class=\"markdownIt-Anchor\" href=\"#1-截取画面\">#</a> 1. 截取画面</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//可以使用drawImage截取视频当前播放的这一帧画面。</span><br><span class=\"line\">this.ctx.drawImage(video,0,0,width,height)</span><br><span class=\"line\">//与处理图片一样可以使用getImageData获取某一帧的画面的rgba数据</span><br><span class=\"line\">let data = this.ctx.getImageData(0,0,width,height)</span><br><span class=\"line\">//处理后使用putImageData将某画面绘制到canvas上。</span><br><span class=\"line\">this.ctx.putImageData(data,0,0)</span><br><span class=\"line\">最后绘制时注意，视频的大小以及画布的大小，如果视频大于画布的大小可以考虑使用scale缩小坐标系，不过这样会导致画面变糊，不建议这样解决。众所周知，canvas有两个宽高，一个是画布的宽高，这个获取dom后设置即可，另一个是展示的宽高，这个用style设置即可。先获取视频的大小，将画布的大小设置成视频的大小，由于展示的画布大小小于视频这时会自动对画布的内容缩小。</span><br><span class=\"line\">video.onloadeddata=()=&gt;&#123;</span><br><span class=\"line\">\t\tcanvas.width = video.videoWidth</span><br><span class=\"line\">\t\tcanvas.height = video.videoHeight</span><br><span class=\"line\">&#125;//视频加载完成后触发的一个事件</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-canvas处理视频\"><a class=\"markdownIt-Anchor\" href=\"#2-canvas处理视频\">#</a> 2. canvas 处理视频</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//绘制视频</span><br><span class=\"line\">function record()&#123;</span><br><span class=\"line\">\tctx.drawImage(video,0,0) //绘制视频</span><br><span class=\"line\">\tsetTimeout(()=&gt;&#123;</span><br><span class=\"line\">\t\trecord()</span><br><span class=\"line\">\t&#125;,16) //每隔16ms调用自己</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">既然都拿到视频画面了，可以对视频每一帧处理，比如将图片变为灰度图片。</span><br><span class=\"line\">function record()&#123;</span><br><span class=\"line\">\tctx.drawImage(video,0,0) //绘制视频</span><br><span class=\"line\">\tlet imageData = ctx.getImageData(0,0,canvas.width,canvas.height)</span><br><span class=\"line\">            for(let i=0;i&lt;imageData.data.length;i+=4)&#123;</span><br><span class=\"line\">                let r = imageData.data[i]</span><br><span class=\"line\">                let g = imageData.data[i+1]</span><br><span class=\"line\">                let b = imageData.data[i+2]</span><br><span class=\"line\">                let avg = .299 * r + .587 * g + .114 * b</span><br><span class=\"line\">                imageData.data[i] = avg</span><br><span class=\"line\">                imageData.data[i+1] = avg</span><br><span class=\"line\">                imageData.data[i+2] = avg</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    ctx.putImageData(imageData,0,0)</span><br><span class=\"line\">\tsetTimeout(()=&gt;&#123;</span><br><span class=\"line\">\t\trecord()</span><br><span class=\"line\">\t&#125;,16) //每隔16ms调用自己</span><br><span class=\"line\">&#125;//不过这样处理之后，绘制的视频掉帧严重。</span><br></pre></td></tr></table></figure>\n<h3 id=\"3合成视频\"><a class=\"markdownIt-Anchor\" href=\"#3合成视频\">#</a> 3. 合成视频</h3>\n<p>如果有一段绿幕视频，只要将这个画面用 drawImage 绘制，然后用 getImageData 获取画面的 rgba 数据，将所有纯绿色的像素点即 rb 为 0，g 为 255 的像素点的透明度改为 0 即完全透明，再将这个画面绘制到另一个视频即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;video src=&quot;./video/1.mp4&quot; id=&quot;video&quot; style=&quot;width: 600px; height: 400px;&quot; controls&gt;&lt;/video&gt;</span><br><span class=\"line\">&lt;video src=&quot;./video/蓝幕.mp4&quot; id=&quot;blue&quot; style=&quot;width: 600px; height: 400px;&quot; controls&gt;&lt;/video&gt;</span><br><span class=\"line\">&lt;button id=&quot;play&quot;&gt;播放&lt;/button&gt;</span><br><span class=\"line\">&lt;canvas id=&quot;canvas&quot; style=&quot;width: 600px; height: 400px;&quot;&gt;&lt;/canvas&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">let video = document.querySelector(&#x27;#video&#x27;)</span><br><span class=\"line\">let blue = document.querySelector(&#x27;#blue&#x27;)</span><br><span class=\"line\">let play = document.querySelector(&#x27;#play&#x27;)</span><br><span class=\"line\">let canvasblue = document.createElement(&#x27;canvas&#x27;)</span><br><span class=\"line\">let canvas = document.querySelector(&#x27;#canvas&#x27;)</span><br><span class=\"line\">let ctx = canvas.getContext(&#x27;2d&#x27;)</span><br><span class=\"line\">let ctxblue = canvasblue.getContext(&#x27;2d&#x27;)      </span><br><span class=\"line\">//视频加载完成后，将画布的宽高设置成视频的宽高</span><br><span class=\"line\">blue.onloadeddata = ()=&gt;&#123;</span><br><span class=\"line\">  canvasblue.width = blue.videoWidth</span><br><span class=\"line\">  canvasblue.height = blue.videoHeight</span><br><span class=\"line\">&#125;      </span><br><span class=\"line\">video.onloadeddata = ()=&gt;&#123;</span><br><span class=\"line\">  canvas.width = video.videoWidth</span><br><span class=\"line\">  canvas.height = video.videoHeight</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">play.addEventListener(&#x27;click&#x27;,()=&gt;&#123;</span><br><span class=\"line\">    blue.play()</span><br><span class=\"line\">    video.play()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">video.addEventListener(&#x27;play&#x27;,()=&gt;&#123;</span><br><span class=\"line\">    setInterval(()=&gt;&#123;</span><br><span class=\"line\">        ctxblue.drawImage(blue,0,0) //用画布绘制蓝幕视频</span><br><span class=\"line\">        let data = ctxblue.getImageData(0,0,blue.videoWidth,blue.videoHeight)</span><br><span class=\"line\">        for(let i=0;i&lt;data.data.length;i+=4)&#123;</span><br><span class=\"line\">            if(data.data[i+2]==255) data.data[i+3] = 0</span><br><span class=\"line\">            //如果像素点蓝色为255则将其变为完全透明</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ctxblue.putImageData(data,0,0) //将更改的数据绘制会原画布</span><br><span class=\"line\">        ctx.drawImage(video,0,0) //绘制原视频</span><br><span class=\"line\">        ctx.drawImage(canvasblue,0,0) //将绘制蓝幕的画布绘制到原视频。最后发现原视频掉帧严重。</span><br><span class=\"line\">    &#125;,16) 每隔16ms绘制一次。</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><a href=\"[使用 canvas 处理视频 - Web API 接口参考 | MDN (mozilla.org)](https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Manipulating_video_using_canvas)\">使用 canvas 处理视频</a></p>\n",
            "tags": [
                "音视频开发",
                "webrtc"
            ]
        },
        {
            "id": "https://seele-exzzz.github.io/2023/11/11/Video-Audio/canvas%E5%AF%B9%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86/",
            "url": "https://seele-exzzz.github.io/2023/11/11/Video-Audio/canvas%E5%AF%B9%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86/",
            "title": "canvas对图片处理",
            "date_published": "2023-11-11T01:41:27.957Z",
            "content_html": "<h2 id=\"canvas对图片处理\"><a class=\"markdownIt-Anchor\" href=\"#canvas对图片处理\">#</a> canvas 对图片处理</h2>\n<h3 id=\"1绘制裁剪\"><a class=\"markdownIt-Anchor\" href=\"#1绘制裁剪\">#</a> 1. 绘制，裁剪</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let img = document.querySelector(&#x27;#img&#x27;)</span><br><span class=\"line\">let canvas = document.querySelector(&#x27;#canvas&#x27;)</span><br><span class=\"line\">let ctx = canvas.getContext(&#x27;2d&#x27;)</span><br><span class=\"line\">img.onload=()=&gt;&#123;</span><br><span class=\"line\">    canvas.width = img.width</span><br><span class=\"line\">    canvas.height = img.height</span><br><span class=\"line\">    //第一种绘制方法，第一个为图像的Dom，第二个参数为，图像绘制到画布的水平位置，第三个参数为，图像绘制到画布的竖直方向</span><br><span class=\"line\">    ctx.drawImage(img,0,0) </span><br><span class=\"line\">    //第二种绘制方法，前三个参数一样，width为图像在画布的宽度，如果这个值比canvas本身的宽度要大便是放大，要小就是缩小。height也一样。</span><br><span class=\"line\">    ctx.drawImage(img,0,0,width,height)</span><br><span class=\"line\">    //第三种绘制方法为裁剪。</span><br><span class=\"line\">    sx: 裁剪点位于最左边的位置的差值</span><br><span class=\"line\">    sy: 裁剪点位于最上边的位置的差值</span><br><span class=\"line\">    swidth: 裁剪宽度</span><br><span class=\"line\">    sheight 裁剪高度</span><br><span class=\"line\">    这四个与裁剪相关用于确定裁剪位置以及裁剪宽高。</span><br><span class=\"line\">    后面四个参数与第二种绘制方法的后面四个参数一致，前两个用来确定绘制点的位置，后面两个用来确定绘制的宽高。</span><br><span class=\"line\">    ctx.drawImage(img,sx,sy,swidth,sheight,dx,dy,dwidth,dheight)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2变换\"><a class=\"markdownIt-Anchor\" href=\"#2变换\">#</a> 2. 变换</h3>\n<p>变换为坐标系的改变，如果想让 canvas 的图片发生改变需先改变坐标系，在绘制图片。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.scale(x,y) //x为水平伸缩倍数，y为竖直伸缩倍数。</span><br><span class=\"line\">ctx.translate(x,y) //x为水平移动的距离，y为竖直移动的距离。</span><br><span class=\"line\">ctx.rotate(r) //r为旋转的角度，旋转的点为坐标系原点，默认在左上角，可以通过translate更改原点位置。</span><br><span class=\"line\">ctx.transform(a,b,c,d,e,f) //a:水平缩放,b:垂直倾斜,c:水平倾斜,d:垂直缩放,e:水平移动,f:垂直移动。其实这是一个三阶矩阵。二维图形要选择，缩放需要二阶矩阵，而平移是仿射变化所以需要增加一个维度记录方向。所以图形的缩放，选择，平移需要一个三阶矩阵实现，</span><br></pre></td></tr></table></figure>\n<h3 id=\"3像素控制\"><a class=\"markdownIt-Anchor\" href=\"#3像素控制\">#</a> 3. 像素控制</h3>\n<p>如果直接在本地文件打开并使用 getImageData () 这个函数获取图片的数据的话，会出现跨域问题，可以使用 live serve 这个 vscode 插件，运行文件。关于跨域问题可以参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSFRNTC9DT1JTX2VuYWJsZWRfaW1hZ2U=\">这个</span>。</p>\n<h4 id=\"1-灰度图片\"><a class=\"markdownIt-Anchor\" href=\"#1-灰度图片\">#</a> 1. 灰度图片</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.drawImage(img,0,0,img.width,img,height) //先绘制图片，img为dom</span><br><span class=\"line\">let imageData = ctx.getImageData(0,0,img.width,img.height) //获取图片数据</span><br><span class=\"line\">//获取灰度图片，运用0.299*r+0.587*g+0.114*b这个公式获取某一个rgb下的灰度值，当rgb相同时就会呈现灰色。</span><br><span class=\"line\">for(let i=0;i&lt;imageData.data.length;i+=4)&#123; //每一个像素点有四个值分别是rgba，其中a是透明度。</span><br><span class=\"line\">\tlet r = imageData.data[i]</span><br><span class=\"line\">\tlet g = imageData.data[i+1]</span><br><span class=\"line\">\tlet b = imageData.data[i+2]</span><br><span class=\"line\">\tlet avg = .299 * r + .587 * g + .114 * b</span><br><span class=\"line\">    imageData.data[i] = avg</span><br><span class=\"line\">    imageData.data[i+1] = avg</span><br><span class=\"line\">    imageData.data[i+2] = avg</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//这个函数有两种写法，第一种</span><br><span class=\"line\">ctx.putImageData(imageData,x,y) //x为离坐标原点的水平距离，y为离坐标原点的垂直距离，坐标原点默认是左上角。可以使用translate更改。这个可以改变绘制后图像的改变的位置</span><br><span class=\"line\">第二种写法</span><br><span class=\"line\">ctx.putImageData(imageData,x,y,dx,dy,width,height)</span><br><span class=\"line\">前三个参数与第一种写法一致。后面的参数主要是选择要覆盖原图像的位置。</span><br><span class=\"line\">dx:新图像绘制在原图像的水平位置</span><br><span class=\"line\">dy:新图像绘制在原图像的竖直位置</span><br><span class=\"line\">width:新图像的宽度</span><br><span class=\"line\">height:新图像的高度</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-各种滤镜的实现\"><a class=\"markdownIt-Anchor\" href=\"#2-各种滤镜的实现\">#</a> 2. 各种滤镜的实现</h4>\n<ol>\n<li>\n<p>反色：新 rgb 为（255-r,255-g,255-b）</p>\n</li>\n<li>\n<p>灰色调：新 rgb 为</p>\n<p>r:(r * 0.272) + (g * 0.534) + (b * 0.131)</p>\n<p>g:(r * 0.349) + (g * 0.686) + (b * 0.168)</p>\n<p>b:(r * 0.393) + (g * 0.769) + (b * 0.189)</p>\n</li>\n<li>\n<p>模糊：做卷积，具体原理可以看这个<a href=\"[【官方双语】那么……什么是卷积？_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1Vd4y1e7pj/?spm_id_from=333.999.0.0&vd_source=f327cfd668e6eff40b7b8fec27ccf6df)\">【官方双语】那么…… 什么是卷积？</a></p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let img = document.querySelector(&#x27;#img&#x27;)</span><br><span class=\"line\">let canvas = document.querySelector(&#x27;#canvas&#x27;)</span><br><span class=\"line\">let invertColor = document.querySelector(&#x27;#invertColor&#x27;)</span><br><span class=\"line\">let adjustColor = document.querySelector(&#x27;#adjustColor&#x27;)</span><br><span class=\"line\">let blurImage = document.querySelector(&#x27;#blurImage&#x27;)</span><br><span class=\"line\">let fudiaoImage = document.querySelector(&#x27;#fudiaoImage&#x27;)</span><br><span class=\"line\">let kediaoImage = document.querySelector(&#x27;#kediaoImage&#x27;)</span><br><span class=\"line\">let mirrorImage = document.querySelector(&#x27;#mirrorImage&#x27;)</span><br><span class=\"line\">let ctx = canvas.getContext(&#x27;2d&#x27;)</span><br><span class=\"line\">let invertColorctx = invertColor.getContext(&#x27;2d&#x27;)</span><br><span class=\"line\">let adjustColorctx = adjustColor.getContext(&#x27;2d&#x27;)</span><br><span class=\"line\">let blurImagectx = blurImage.getContext(&#x27;2d&#x27;)</span><br><span class=\"line\">let fudiaoImagectx = fudiaoImage.getContext(&#x27;2d&#x27;)</span><br><span class=\"line\">let kediaoImagectx = kediaoImage.getContext(&#x27;2d&#x27;)</span><br><span class=\"line\">let mirrorImagectx = mirrorImage.getContext(&#x27;2d&#x27;)</span><br><span class=\"line\">img.src=&quot;./img/cover.jpg&quot;</span><br><span class=\"line\">img.onload=()=&gt;&#123;</span><br><span class=\"line\">    //图片灰度</span><br><span class=\"line\">    canvas.width = img.width</span><br><span class=\"line\">    canvas.height = img.height</span><br><span class=\"line\">    ctx.drawImage(img,0,0,img.width,img.height) </span><br><span class=\"line\">    let imageData = ctx.getImageData(0,0,img.width,img.height)</span><br><span class=\"line\">    for(let i=0;i&lt;imageData.data.length;i+=4)&#123;</span><br><span class=\"line\">        let r = imageData.data[i]</span><br><span class=\"line\">        let g = imageData.data[i+1]</span><br><span class=\"line\">        let b = imageData.data[i+2]</span><br><span class=\"line\">        let avg = .299 * r + .587 * g + .114 * b</span><br><span class=\"line\">        imageData.data[i] = avg</span><br><span class=\"line\">        imageData.data[i+1] = avg</span><br><span class=\"line\">        imageData.data[i+2] = avg</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ctx.putImageData(imageData,0,0,0,0,img.width,img.height)</span><br><span class=\"line\">    //图片反色调</span><br><span class=\"line\">    invertColor.width = img.width</span><br><span class=\"line\">    invertColor.height = img.height</span><br><span class=\"line\">    invertColorctx.drawImage(img,0,0,img.width,img.height)</span><br><span class=\"line\">    let invertColorData = invertColorctx.getImageData(0,0,img.width,img.height)</span><br><span class=\"line\">    for(let i=0;i&lt;invertColorData.data.length;i+=4)&#123;</span><br><span class=\"line\">        invertColorData.data[i] = 255-invertColorData.data[i]</span><br><span class=\"line\">        invertColorData.data[i+1] = 255-invertColorData.data[i+1]</span><br><span class=\"line\">        invertColorData.data[i+2] = 255-invertColorData.data[i+2]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    invertColorctx.putImageData(invertColorData,0,0)</span><br><span class=\"line\">    //图片灰色调</span><br><span class=\"line\">    adjustColor.width = img.width</span><br><span class=\"line\">    adjustColor.height = img.height</span><br><span class=\"line\">    adjustColorctx.drawImage(img,0,0,img.width,img.height)</span><br><span class=\"line\">    let adjustColorData = adjustColorctx.getImageData(0,0,img.width,img.height)</span><br><span class=\"line\">    for(let i=0;i&lt;adjustColorData.data.length;i+=4)&#123;</span><br><span class=\"line\">        let r = adjustColorData.data[i]</span><br><span class=\"line\">        let g = adjustColorData.data[i+1]</span><br><span class=\"line\">        let b = adjustColorData.data[i+2]</span><br><span class=\"line\">        adjustColorData.data[i] = (r * 0.272) + (g * 0.534) + (b * 0.131)</span><br><span class=\"line\">        adjustColorData.data[i+1] = (r * 0.349) + (g * 0.686) + (b * 0.168)</span><br><span class=\"line\">        adjustColorData.data[i+2] = (r * 0.393) + (g * 0.769) + (b * 0.189)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    adjustColorctx.putImageData(adjustColorData,0,0)</span><br><span class=\"line\">    //图片模糊,这里是用3X3的卷积核</span><br><span class=\"line\">    blurImage.width = img.width</span><br><span class=\"line\">    blurImage.height = img.height</span><br><span class=\"line\">    blurImagectx.drawImage(img,0,0,img.width,img.height)</span><br><span class=\"line\">    let blurImageData = blurImagectx.getImageData(0,0,img.width,img.height)</span><br><span class=\"line\">    for(let i=0;i&lt;blurImageData.height-2;i++)&#123;</span><br><span class=\"line\">        for(let j=0;j&lt;blurImageData.width*4-8;j+=4)&#123;</span><br><span class=\"line\">            let list1 = [0,1,2],list2 = [0,4,8]</span><br><span class=\"line\">            let tr=0,tg=0,tb=0</span><br><span class=\"line\">            list1.forEach((a)=&gt;&#123;</span><br><span class=\"line\">                list2.forEach((b)=&gt;&#123;</span><br><span class=\"line\">                    let num = j+b+(i+a)*blurImageData.width*4</span><br><span class=\"line\">                    tr += blurImageData.data[num]</span><br><span class=\"line\">                    tg += blurImageData.data[num+1]</span><br><span class=\"line\">                    tb += blurImageData.data[num+2]</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            tr = tr/9</span><br><span class=\"line\">            tg = tg/9</span><br><span class=\"line\">            tb = tb/9</span><br><span class=\"line\">            list1.forEach((a)=&gt;&#123;</span><br><span class=\"line\">                list2.forEach((b)=&gt;&#123;</span><br><span class=\"line\">                    let num = j+b+(i+a)*blurImageData.width*4</span><br><span class=\"line\">                    blurImageData.data[num] = tr</span><br><span class=\"line\">                    blurImageData.data[num+1] = tg</span><br><span class=\"line\">                    blurImageData.data[num+2] = tb</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    blurImagectx.putImageData(blurImageData,0,0)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最终效果，如下</p>\n<img data-src=\"https://typora-seele-exzzz.oss-cn-guangzhou.aliyuncs.com/img/video%26audio/canvasimage-20231113175220294.png\">\n<p>相关资料</p>\n<p><a href=\"[25-像素操作_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1kv4y1D7uS/?p=25&vd_source=f327cfd668e6eff40b7b8fec27ccf6df)\">全新 Canvas 全网最详细课程（2023 年 2 月新更）</a></p>\n<p><a href=\"[纯JavaScript实现HTML5 Canvas六种特效滤镜 · HTML5 Canvas编程 · 看云 (kancloud.cn)](https://www.kancloud.cn/digest/canvas-programming/154008)\"><strong>纯 JavaScript 实现 HTML5 Canvas 六种特效滤镜</strong></a></p>\n",
            "tags": [
                "音视频开发",
                "webrtc"
            ]
        },
        {
            "id": "https://seele-exzzz.github.io/2023/11/09/Video-Audio/webrtc%E5%9F%BA%E7%A1%80/",
            "url": "https://seele-exzzz.github.io/2023/11/09/Video-Audio/webrtc%E5%9F%BA%E7%A1%80/",
            "title": "webrtc基础",
            "date_published": "2023-11-09T15:30:33.623Z",
            "content_html": "<h2 id=\"webrtc基础\"><a class=\"markdownIt-Anchor\" href=\"#webrtc基础\">#</a> webrtc 基础</h2>\n<h3 id=\"一-获取媒体流\"><a class=\"markdownIt-Anchor\" href=\"#一-获取媒体流\">#</a> 一、获取媒体流</h3>\n<p>navigator.mediaDevices 上有四个方法</p>\n<ol>\n<li>getUserMedia: 获取用户摄像头的媒体流，媒体流包括视频流和音频流。</li>\n<li>getDiaplayMedia: 获取用户的屏幕。</li>\n<li>enumerateDevices: 返回用户设备。</li>\n<li>getSupportedConstraints: 返回一个对象，表示可以约束的属性</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async function()&#123;</span><br><span class=\"line\">\t//是一个promise，返回一个媒体流对象。</span><br><span class=\"line\">\tlet stream = await navigator.mediaDevices.getUserMedia(&#123;video:true,audio:true&#125;) //获取用户摄像头以及麦克风的流，另外画面是镜像</span><br><span class=\"line\">    let stream = await navigator.mediaDevices.getDisplayMedia(&#123;video:true,audio:false&#125;) //获取用户桌面的流</span><br><span class=\"line\">    video.srcObject = stream //将获取到了媒体流放在video的SrcObject上。不过如果是获取用户桌面的媒体流放在video上播放会出现画面重叠，目前还不知道如何解决，我看别人做的也是这样。</span><br><span class=\"line\">    let list = await navigator.mediaDevices.enumerateDevices() //返回一个数组储存着用户输入输出设备</span><br><span class=\"line\">    list.forEach((arr)=&gt;&#123;</span><br><span class=\"line\">    \tlet &#123;deviceId,label,kind,groupId&#125; = arr</span><br><span class=\"line\">    \tdeviceId : 设备的id</span><br><span class=\"line\">    \tlabel : 设备的名称</span><br><span class=\"line\">    \tkind : 设备种类 audioinput audiooutput videoinput</span><br><span class=\"line\">    \tgroupId : 如果设备是同一个，他们的groupId就是同一个</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    //另外，如果网页不在本地运行且不是https，deviceId，label和groupId则为空。</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h3 id=\"二-媒体流和轨道\"><a class=\"markdownIt-Anchor\" href=\"#二-媒体流和轨道\">#</a> 二、媒体流和轨道</h3>\n<h4 id=\"一-媒体流\"><a class=\"markdownIt-Anchor\" href=\"#一-媒体流\">#</a> 一、媒体流</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stream&#123;</span><br><span class=\"line\">    属性：</span><br><span class=\"line\">    active //如果获取到用户的媒体流是活跃的则为true，否则为false</span><br><span class=\"line\">    id //每条媒体流有一个专属的id值，用于区别不同的媒体流</span><br><span class=\"line\">    方法：</span><br><span class=\"line\">    addTrack(track) //给这个媒体流增加一个轨</span><br><span class=\"line\">    removeTrack(track) //移除该媒体流下的某一条轨道</span><br><span class=\"line\">    clone(id) //克隆某一个id值下的轨道并返回这个轨道同时新的轨道有新的id值</span><br><span class=\"line\">    getTrackById(id) //返回指定id的轨道</span><br><span class=\"line\">    getTracks() //返回这个视频流中的所有轨道，用数组储存。</span><br><span class=\"line\">    getVideoTracks() //返回所有视频轨，返回顺序不固定，每次调用的时候顺序有变。</span><br><span class=\"line\">    getAudioTracks() //返回所有音频轨，返回顺序不固定，每次调用的时候顺序有变。</span><br><span class=\"line\">    事件处理：</span><br><span class=\"line\">    onaddtrack() //当添加完轨道后触发此事件</span><br><span class=\"line\">    onremovetrack() //当删除某一条轨道后触发此事件</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"二-轨\"><a class=\"markdownIt-Anchor\" href=\"#二-轨\">#</a> 二、轨</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">track&#123;</span><br><span class=\"line\">\t属性：</span><br><span class=\"line\">\tid //每一个轨都有一个专属的id</span><br><span class=\"line\">\tkind //轨的种类，分为audio和video</span><br><span class=\"line\">\tenabled //表示该轨是否可用，可以手动设置。值为布尔值</span><br><span class=\"line\">\tlabel //设备名称</span><br><span class=\"line\">\tmuted //是否静音，值为布尔值</span><br><span class=\"line\">\treadyState //live设备正常连接，ended没有更多数据，而且不会提供更多的数据</span><br><span class=\"line\">\t方法：</span><br><span class=\"line\">\tgetConstraints() //返回该轨道的约束，这个与获取媒体流时传的参数有关</span><br><span class=\"line\">\tapplyConstraints() //给该轨道新的约束</span><br><span class=\"line\">\tgetSettings() //返回该轨道所有约束包括自己添加的和浏览器默认的</span><br><span class=\"line\">\tgetCapabilities() //返回一个对象，表示该轨道可调节的属性值以及范围，可以通过这个获取到约束的范围从而给该轨道设置范围。</span><br><span class=\"line\">\tclone() //返回一个track的克隆，同时产生一个新的id</span><br><span class=\"line\">\tstop() //stop后，readyState的状态变为ended</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"三-约束属性\"><a class=\"markdownIt-Anchor\" href=\"#三-约束属性\">#</a> 三、约束属性</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">约束属性是指音频与视频的属性，一共有以下这些，太长了之后有时间再一个一个写吧</span><br><span class=\"line\">aspectRatio</span><br><span class=\"line\">autoGainControl</span><br><span class=\"line\">brightness</span><br><span class=\"line\">channelCount</span><br><span class=\"line\">colorTemperature</span><br><span class=\"line\">contrast</span><br><span class=\"line\">deviceId</span><br><span class=\"line\">displaySurface</span><br><span class=\"line\">echoCancellation</span><br><span class=\"line\">exposureCompensation</span><br><span class=\"line\">exposureMode</span><br><span class=\"line\">exposureTime</span><br><span class=\"line\">facingMode</span><br><span class=\"line\">focusDistance</span><br><span class=\"line\">focusMode</span><br><span class=\"line\">frameRate</span><br><span class=\"line\">groupId</span><br><span class=\"line\">height</span><br><span class=\"line\">iso</span><br><span class=\"line\">latency</span><br><span class=\"line\">noiseSuppression</span><br><span class=\"line\">pan</span><br><span class=\"line\">pointsOfInterest</span><br><span class=\"line\">resizeMode</span><br><span class=\"line\">sampleRate</span><br><span class=\"line\">sampleSize</span><br><span class=\"line\">saturation</span><br><span class=\"line\">sharpness</span><br><span class=\"line\">suppressLocalAudioPlayback</span><br><span class=\"line\">tilt</span><br><span class=\"line\">torch</span><br><span class=\"line\">whiteBalanceMode</span><br><span class=\"line\">width</span><br><span class=\"line\">zoom</span><br></pre></td></tr></table></figure>\n<p>相关资料</p>\n<p><a href=\"[mediaDevices开启你本地视频之旅行 - 掘金 (juejin.cn)](https://juejin.cn/post/6924563220657586184#heading-3)\">mediaDevices 开启你本地视频之旅行</a></p>\n<p><a href=\"[MediaDevices - Web API 接口参考 | MDN (mozilla.org)](https://developer.mozilla.org/zh-CN/docs/Web/API/MediaDevices)\">MediaDevices MDN</a></p>\n<p><a href=\"[功能、约束和设置 - Web API 接口 |MDN网络 (mozilla.org)](https://developer.mozilla.org/en-US/docs/Web/API/Media_Capture_and_Streams_API/Constraints)\">功能、约束和设置 MDN</a></p>\n<h3 id=\"三-video标签相关属性\"><a class=\"markdownIt-Anchor\" href=\"#三-video标签相关属性\">#</a> 三、video 标签相关属性</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">属性：</span><br><span class=\"line\">autoplay : 在声明该属性后，视频会尽快播放。另外给该值设置false没有用，如果不想自动播放要移除该属性</span><br><span class=\"line\">controls : 给视频增加一个控制面板</span><br><span class=\"line\">controlslist : 当有controls才生效，可以选择将控件移除，可选值nodownload，nofullscreen，noremoteplayback</span><br><span class=\"line\">crossorigin : 是否使用cors来获取视频</span><br><span class=\"line\">loop : 重复播放</span><br><span class=\"line\">poster : 下载时展示的封面，，如果没指定默认按第一帧显示</span><br></pre></td></tr></table></figure>\n<p>相关资料</p>\n<p><a href=\"<video>: 视频嵌入元素 - HTML（超文本标记语言） | MDN (mozilla.org)\">video: 视频嵌入元素 MDN</a></p>\n<h3 id=\"四-视频的录制以及下载\"><a class=\"markdownIt-Anchor\" href=\"#四-视频的录制以及下载\">#</a> 四、视频的录制以及下载</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let recoder = new MediaRecorder(options) //options是一个配置对象</span><br><span class=\"line\">options&#123;</span><br><span class=\"line\">\tmimeType : 选择录制时的mime格式,分为视频格式和编码格式</span><br><span class=\"line\">\tstate : inactive(闲置中),recording(录制中),paused(暂停)</span><br><span class=\"line\">\tstream : 需要录制的媒体流</span><br><span class=\"line\">\tvideoBitsPerSecond : 视频的编码比率</span><br><span class=\"line\">\taudioBitsPerSecond : 音频的编码比率</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">方法:</span><br><span class=\"line\">isTypeSupported() : 用来判断用户的浏览器是否支持某个视频格式</span><br><span class=\"line\">pause() : 录制暂停</span><br><span class=\"line\">requestData() : 从最开始或者上一个requestData开始到当前接受到的，储存为blob。</span><br><span class=\"line\">resume() : 继续录制之前被暂停的录制</span><br><span class=\"line\">start(timeslice) : 开始录制,timeslice每隔timeslice毫秒记录视频，储存格式为blob</span><br><span class=\"line\">stop() : 录制停止，无法继续录制，同时触发dataavailable事件，返回一个blob</span><br><span class=\"line\">事件:</span><br><span class=\"line\">ondataavailable : 当调用stop或者requestData或者设置了start的参数，时间到了后触发，该事件的data属性会有录制视频的blob数据。</span><br><span class=\"line\">onpause : pause后触发</span><br><span class=\"line\">onresume : resume后触发</span><br><span class=\"line\">onstart : start后触发</span><br><span class=\"line\">onstop : stop后触发</span><br></pre></td></tr></table></figure>\n<h3 id=\"五-实战\"><a class=\"markdownIt-Anchor\" href=\"#五-实战\">#</a> 五、实战</h3>\n<p>完成获取用户摄像头，麦克风或者桌面的媒体流并展示，同时录制，支持暂停，继续，停止录制。同时将录制的视频展示并下载。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTML部分</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;video autoplay controls playsinline id=&quot;video&quot; style=&quot;width: 800px;height: 600px;&quot;&gt;&lt;/video&gt; </span><br><span class=\"line\">    &lt;video autoplay controls playsinline id=&quot;recordVideo&quot; style=&quot;width: 600px;height: 400px;&quot;&gt;&lt;/video&gt; </span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;button id=&quot;user&quot;&gt;摄像头录制&lt;/button&gt;</span><br><span class=\"line\">    摄像头选择:</span><br><span class=\"line\">    &lt;select id=&quot;selectVideo&quot; style=&quot;width: 100px;&quot;&gt;&lt;/select&gt;</span><br><span class=\"line\">    麦克风选择:</span><br><span class=\"line\">    &lt;select id=&quot;selectAudio&quot; style=&quot;width: 100px;&quot;&gt;&lt;/select&gt;</span><br><span class=\"line\">    &lt;button id=&quot;desktop&quot;&gt;桌面共享&lt;/button&gt;</span><br><span class=\"line\">    &lt;button id=&quot;start&quot;&gt;视频录制&lt;/button&gt;</span><br><span class=\"line\">    &lt;button id=&quot;pause&quot;&gt;视频录制暂停&lt;/button&gt;</span><br><span class=\"line\">    &lt;button id=&quot;stop&quot;&gt;视频录制停止&lt;/button&gt;</span><br><span class=\"line\">    &lt;button id=&quot;resume&quot;&gt;继续录制&lt;/button&gt;</span><br><span class=\"line\">    &lt;button id=&quot;show&quot;&gt;展示录制视频&lt;/button&gt;</span><br><span class=\"line\">    &lt;button id=&quot;download&quot;&gt;下载录制的视频&lt;/button&gt;</span><br><span class=\"line\">    选择录制视频的格式:</span><br><span class=\"line\">    &lt;select id=&quot;select&quot; style=&quot;width: 120px;&quot;&gt; &lt;/select&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">JS部分</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    let video = document.querySelector(&#x27;#video&#x27;)</span><br><span class=\"line\">    let recordVideo = document.querySelector(&#x27;#recordVideo&#x27;)</span><br><span class=\"line\">    let user = document.querySelector(&#x27;#user&#x27;)</span><br><span class=\"line\">    let desktop = document.querySelector(&#x27;#desktop&#x27;)</span><br><span class=\"line\">    let select = document.querySelector(&#x27;#select&#x27;)</span><br><span class=\"line\">    let selectVideo = document.querySelector(&#x27;#selectVideo&#x27;)</span><br><span class=\"line\">    let selectAudio = document.querySelector(&#x27;#selectAudio&#x27;)</span><br><span class=\"line\">    let start = document.querySelector(&#x27;#start&#x27;)</span><br><span class=\"line\">    let pause = document.querySelector(&#x27;#pause&#x27;)</span><br><span class=\"line\">    let stop = document.querySelector(&#x27;#stop&#x27;)</span><br><span class=\"line\">    let show = document.querySelector(&#x27;#show&#x27;)</span><br><span class=\"line\">    let resume = document.querySelector(&#x27;#resume&#x27;)</span><br><span class=\"line\">    let download = document.querySelector(&#x27;#download&#x27;)</span><br><span class=\"line\">    let types = [&#x27;webm&#x27;,&#x27;mp4&#x27;,&#x27;ogg&#x27;,&#x27;mov&#x27;,&#x27;avi&#x27;,&#x27;wmv&#x27;,&#x27;flv&#x27;,&#x27;mkv&#x27;,&#x27;ts&#x27;,&#x27;x=matroska&#x27;]</span><br><span class=\"line\">    let codecs = [&#x27;vp9&#x27;,&#x27;vp9.0&#x27;,&#x27;vp8&#x27;,&#x27;vp8.0&#x27;,&#x27;avc1&#x27;,&#x27;av1&#x27;,&#x27;h265&#x27;,&#x27;h264&#x27;]</span><br><span class=\"line\">    let mimeType = &#x27;video/webm;codecs=vp8&#x27;</span><br><span class=\"line\">    let stream,blobList=[],recordStream</span><br><span class=\"line\">    //获取用户摄像头权限</span><br><span class=\"line\">    user.addEventListener(&#x27;click&#x27;,async()=&gt;&#123;</span><br><span class=\"line\">        stream = await navigator.mediaDevices.getUserMedia(&#123;</span><br><span class=\"line\">            video :&#123;</span><br><span class=\"line\">                width:800,</span><br><span class=\"line\">                height:600</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            audio:true</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        video.srcObject = stream</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    //获取用户桌面共享权限</span><br><span class=\"line\">    desktop.addEventListener(&#x27;click&#x27;,async()=&gt;&#123;</span><br><span class=\"line\">        stream = await navigator.mediaDevices.getDisplayMedia(&#123;</span><br><span class=\"line\">            video:&#123;</span><br><span class=\"line\">                width:800,</span><br><span class=\"line\">                height:600</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            audio:false</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        video.srcObject = stream</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    //开始录制</span><br><span class=\"line\">    start.addEventListener(&#x27;click&#x27;,()=&gt;&#123;</span><br><span class=\"line\">        if(recordStream) return //如果已经在开始录制就返回，防止重复录制</span><br><span class=\"line\">        recordStream = new MediaRecorder(stream,&#123;mimeType&#125;)</span><br><span class=\"line\">        recordStream.start(1000) </span><br><span class=\"line\">        recordStream.ondataavailable = (e)=&gt;&#123;</span><br><span class=\"line\">            blobList.push(e.data) //e.data为blob,将blob用数组储存方便后面展示以及下载</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    select.addEventListener(&#x27;click&#x27;,support())</span><br><span class=\"line\">    selectVideo.addEventListener(&#x27;click&#x27;,selectDevice(&#x27;video&#x27;))</span><br><span class=\"line\">    selectAudio.addEventListener(&#x27;click&#x27;,selectDevice(&#x27;audio&#x27;))</span><br><span class=\"line\">    pause.addEventListener(&#x27;click&#x27;,()=&gt;&#123;if(recordStream) recordStream.pause()&#125;)</span><br><span class=\"line\">    stop.addEventListener(&#x27;click&#x27;,()=&gt;&#123;if(recordStream) recordStream.stop()&#125;)</span><br><span class=\"line\">    show.addEventListener(&#x27;click&#x27;,()=&gt;&#123;</span><br><span class=\"line\">        if(blobList.length&gt;0)&#123;</span><br><span class=\"line\">            let blob = new Blob(blobList)</span><br><span class=\"line\">            let url = URL.createObjectURL(blob)</span><br><span class=\"line\">            recordVideo.src = url</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    resume.addEventListener(&#x27;click&#x27;,()=&gt;&#123;if(recordStream) recordStream.resume()&#125;)</span><br><span class=\"line\">    download.addEventListener(&#x27;click&#x27;,downloadVideo)</span><br><span class=\"line\">    function support()&#123;</span><br><span class=\"line\">        let click //闭包，事件委托。第一次点击时获取用户浏览器支持的录制格式，之后获取用户选择的录制格式。</span><br><span class=\"line\">        return async function(e)&#123;</span><br><span class=\"line\">            if(click)&#123;</span><br><span class=\"line\">                mimeType = e.target.value</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                click = true</span><br><span class=\"line\">                let list = await getSupportList()</span><br><span class=\"line\">                list.forEach((type)=&gt;&#123;</span><br><span class=\"line\">                    let option = document.createElement(&#x27;option&#x27;)</span><br><span class=\"line\">                    option.text = type</span><br><span class=\"line\">                    option.value = type</span><br><span class=\"line\">                    select.add(option)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    function getSupportList()&#123;</span><br><span class=\"line\">        let list = []</span><br><span class=\"line\">        types.forEach((type)=&gt;&#123;</span><br><span class=\"line\">            codecs.forEach(async(code)=&gt;&#123;</span><br><span class=\"line\">                let videoType = `video/$&#123;type&#125;;codecs=$&#123;code&#125;`</span><br><span class=\"line\">                let res = await MediaRecorder.isTypeSupported(videoType)</span><br><span class=\"line\">                if(res) list.push(videoType)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        return list</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    function selectDevice(type)&#123;</span><br><span class=\"line\">        let video,audio </span><br><span class=\"line\">        return async function(e)&#123;</span><br><span class=\"line\">            if(type==&#x27;video&#x27;&amp;&amp;!video||type==&#x27;audio&#x27;&amp;&amp;!audio)&#123;</span><br><span class=\"line\">                if(type==&#x27;video&#x27;) video = true</span><br><span class=\"line\">                if(type==&#x27;audio&#x27;) audio = true</span><br><span class=\"line\">                let deviceList = await navigator.mediaDevices.enumerateDevices()</span><br><span class=\"line\">                deviceList.forEach((device)=&gt;&#123;</span><br><span class=\"line\">                    let &#123;deviceId,label,kind,groupId&#125; = device</span><br><span class=\"line\">                    if(type==&#x27;video&#x27;&amp;&amp;kind==&#x27;videoinput&#x27;)&#123;</span><br><span class=\"line\">                        let option = document.createElement(&#x27;option&#x27;)</span><br><span class=\"line\">                        option.text = label</span><br><span class=\"line\">                        option.value = deviceId</span><br><span class=\"line\">                        selectVideo.add(option)</span><br><span class=\"line\">                    &#125;else if(type==&#x27;audio&#x27;&amp;&amp;kind==&#x27;audioinput&#x27;)&#123;</span><br><span class=\"line\">                        let option = document.createElement(&#x27;option&#x27;)</span><br><span class=\"line\">                        option.text = label</span><br><span class=\"line\">                        option.value = deviceId</span><br><span class=\"line\">                        selectAudio.add(option)                        </span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                if(e.target.value)&#123;</span><br><span class=\"line\">                    switchCamera(e.target.value)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //切换摄像头前先停止录制，将录制的媒体流的所有轨暂停同时将媒体流设置为空</span><br><span class=\"line\">    function stopCamera()&#123;</span><br><span class=\"line\">        if(stream)&#123;</span><br><span class=\"line\">            let trackList = stream.getTracks()</span><br><span class=\"line\">            trackList.forEach((track)=&gt;&#123;</span><br><span class=\"line\">                track.stop()</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            video.srcObject = null</span><br><span class=\"line\">            stream = null</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    async function switchCamera(deviceId)&#123;</span><br><span class=\"line\">        stopCamera()</span><br><span class=\"line\">        stream = navigator.mediaDevices.getUserMedia(&#123;</span><br><span class=\"line\">            video:&#123;</span><br><span class=\"line\">                width:800,</span><br><span class=\"line\">                height:600</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            audio:false,</span><br><span class=\"line\">            deviceId</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        video.srcObject = stream</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    function downloadVideo()&#123;</span><br><span class=\"line\">        let blob = new Blob(blobList,&#123; type: &#x27;video/mp4&#x27; &#125;)</span><br><span class=\"line\">        let url = URL.createObjectURL(blob)</span><br><span class=\"line\">        let a = document.createElement(&#x27;a&#x27;)</span><br><span class=\"line\">        a.href = url</span><br><span class=\"line\">        a.download = &#x27;1&#x27; //给a链接一个download即可下载</span><br><span class=\"line\">        a.click() //点击a下载</span><br><span class=\"line\">        URL.revokeObjectURL(url) //URL.createObjectURL生成的url是储存在内存中，即时清空防止内存泄露</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>相关资料</p>\n<p><a href=\"[WebRTC 从实战到未来！迎接风口，前端必学的技术🔥 - 掘金 (juejin.cn)](https://juejin.cn/post/7151932832041058340?searchId=202311092329013EC7636625689FB1BF03)\">WebRTC 从实战到未来！迎接风口，前端必学的技术🔥</a></p>\n",
            "tags": [
                "音视频开发",
                "webrtc"
            ]
        },
        {
            "id": "https://seele-exzzz.github.io/2023/11/07/Video-Audio/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%9F%BA%E7%A1%80/",
            "url": "https://seele-exzzz.github.io/2023/11/07/Video-Audio/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%9F%BA%E7%A1%80/",
            "title": "二进制基础",
            "date_published": "2023-11-07T12:07:51.100Z",
            "content_html": "<h2 id=\"二进制基础\"><a class=\"markdownIt-Anchor\" href=\"#二进制基础\">#</a> 二进制基础</h2>\n<h3 id=\"一-原码-反码-补码\"><a class=\"markdownIt-Anchor\" href=\"#一-原码-反码-补码\">#</a> 一 、 原码 反码 补码</h3>\n<p>对于有符号的变量而言，首位代表符号，0 为正数，1 为负数。</p>\n<p>原码：十进制转化为二进制</p>\n<p>反码：负数的符号不变，其他位取反。</p>\n<p>补码：负数的反码加一。</p>\n<p>另外对于 8 位二进制而言，储存范围为 [-127,127],-128 无原码以及反码，但是有补码为 10000000。而 10000000 在反码以及原码中表示 0.</p>\n<p>计算机内存储存的数据为补码，在进行减法运算的时候则是转化为加法计算，比如 1-1 转化为 1+（-1），将 1 与 - 1 的补码相加然后转为原码就是最终结果。如果加出了九位则将第一位舍弃。</p>\n<p>相关资料：</p>\n<p><a href=\"[【计算机基础】轻松学会原码、反码、补码的转换规则以及计算机内有符号数的计算方式！_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1aB4y177Ef/?spm_id_from=333.337.search-card.all.click&vd_source=f327cfd668e6eff40b7b8fec27ccf6df)\">原码，反码，补码，b 站视频</a></p>\n<p><a href=\"[深入理解计算机中的原码、补码、反码 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/371184302)\">原码，反码，补码，知乎文章</a></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xMTg0MzI1NTQ=\">原码，反码，补码，知乎文章</span></p>\n<h3 id=\"二-二进制逻辑运算\"><a class=\"markdownIt-Anchor\" href=\"#二-二进制逻辑运算\">#</a> 二、二进制逻辑运算</h3>\n<h4 id=\"1-或与非异或\"><a class=\"markdownIt-Anchor\" href=\"#1-或与非异或\">#</a> 1. 或与非，异或</h4>\n<ol>\n<li>或（&amp;）：两个都为 1 时才为 1</li>\n<li>与（|）： 有一个为 1 就为 1</li>\n<li>非（!）：取反</li>\n<li>异或（^）： 不同为 1，相同为 0，自己与自己取异或为 0</li>\n</ol>\n<h4 id=\"2二进制移位\"><a class=\"markdownIt-Anchor\" href=\"#2二进制移位\">#</a> 2. 二进制移位</h4>\n<ol>\n<li>左移运算：二进制向左移动，最后一位补零。相当于乘 2 的 n 次方，n 为移动的位数 a&lt;&lt;n (a 为数，n 为移动位数)</li>\n<li>有符号右移运算：对于正数，右移第一位补零，对于负数，右移第一位补一，相当于除于 2 的 n 次方，n 为移动的位数并向下取整。a&gt;&gt;n</li>\n<li>无符号右移运算：右移第一位补零  a&gt;&gt;&gt;n</li>\n</ol>\n<p>相关资料：</p>\n<p><a href=\"[【计算机基础】二进制的逻辑运算 - 与、或、非、异或、同或！_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1hY4y1T7au/?spm_id_from=333.999.0.0)\">二进制逻辑运算，b 站视频</a></p>\n<p><a href=\"[【计算机知识】移位运算——左移运算、右移运算、无符号右移！_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1i14y1W7aF/?spm_id_from=333.999.0.0&vd_source=f327cfd668e6eff40b7b8fec27ccf6df)\">二进制移位，b 站视频</a></p>\n<h3 id=\"三-小数的储存以及储存及读取模式\"><a class=\"markdownIt-Anchor\" href=\"#三-小数的储存以及储存及读取模式\">#</a> 三。小数的储存以及储存及读取模式</h3>\n<p>小数的储存分为定点数以及浮点数储存。</p>\n<ol>\n<li>定点数，小数点固定，一般不采用这种方法储存因为储存数据的范围小。将整数部分转为二进制，将小数部分转为二进制，然后组合。小数点在整数后面，小数前面。小数转为二进制的方法为乘 2 然后取整，第一位为 2 的 - 1 次方，第二位为 2 的 - 2 次方，依次类推。有些小数比如 0.2 无法完全转为二进制，会出现精度损失。这也是为什么 JavaScript 中 0.1+0.2!=0.3。如果用 8 位储存一个数据，第一位储存数据的正负，后四位储存整数，最后三位储存小数。那么整数部分就只能储存 1111 即负 - 16 到 15，小数部分只能储存 111，即 2 的 - 3 次方加 2 的 - 2 次方加 2 的 - 1 次方为 0.875 也即 0 到 0.875。使用定点数储存数据储存的范围不大，故一般不采用此方法储存小数。</li>\n<li>浮点数，采用科学计数法储存小数，小数点不固定，一般使用 ieee754 标准。浮点数分为 float（单精度），double（双精度）。将小数转化为二进制然后用科学计数法表示，只不过与十进制的科学计数法不同，二进制下为基数为 2 而不是 10。对于 float，用四字节，32 位储存，第一位为储存数字的正负，后面 8 位储存阶码也即指数部分，指数加上偏移量 127 再转二进制即为阶码。剩下 23 位储存小数部分，因为整数一定为 1 故不额外花一位储存整数部分。double 用八字节，64 位储存。第一位储存数字正负，后面 11 位储存阶码，double 的偏移量为 1023. 剩下的储存小数部分。</li>\n</ol>\n<p>储存模式分为大端法以及小端法。</p>\n<ol>\n<li>小端法：数据低位储存低位地址</li>\n<li>大端法：与小端法反过来</li>\n</ol>\n<p>一般使用小端法储存</p>\n<p>相关资料：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUxlNHkxMzdnVQ==\">定点数，浮点数。b 站视频</span></p>\n<p><a href=\"[什么是定点数？ - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/338588296)\">定点数，知乎文章</a></p>\n<p><a href=\"[什么是定点数？ - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/338588296)\">浮点数，知乎文章，阶码部分有点问题</a></p>\n<h3 id=\"四-fileblobarraybufferbuffer\"><a class=\"markdownIt-Anchor\" href=\"#四-fileblobarraybufferbuffer\">#</a> 四、File，Blob，ArrayBuffer，Buffer</h3>\n<p>Blob: 全称 binary large object。首先 blob 是一个对象，其次 blob 储存了不可以更改的二进制数据。</p>\n<p>File: file 对象是一个特殊的 blob，或者说 blob 是 file 原型链上的原型对象。file 相对于 blob 多了两个属性一个是文件名字，一个是文件最近一次被修改的时间戳。另外 file 对象只在浏览器中有，在 nodejs 中是没有的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File.prototype.__proto__==Blob.prototype //true</span><br></pre></td></tr></table></figure>\n<p>ArrayBuffer：是原始的二进制数据缓冲区，与 blob 一样储存了二进制数据，与 blob 不同的是 ArrayBuffer 不能设置 MIME 类型。虽然 ArrayBuffer 与 blob 都无法更改数据，但是 ArrayB 可以使用 TypedArray 对象和 DataView 对象对二进制数据进行更改。</p>\n<p>Buffer：nodejs 中处理二进制数据的对象，与 ArrayBuffer 可以互相转化。</p>\n<h4 id=\"1数据的获取\"><a class=\"markdownIt-Anchor\" href=\"#1数据的获取\">#</a> 1. 数据的获取</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\">\tfile对象的获取</span><br><span class=\"line\">*/</span><br><span class=\"line\">let file = new File([&#x27;123&#x27;],&#x27;123.txt&#x27;) //第一个参数可以是blob，第二个参数为文件名。</span><br><span class=\"line\"></span><br><span class=\"line\">//使用input标签获取file</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;input type=&quot;file&quot; id=&quot;input&quot;&gt; //将type设置成file即可</span><br><span class=\"line\">let input = document.querySelector(&#x27;#input&#x27;)</span><br><span class=\"line\">input.onchange=(e)=&gt;&#123; //input上onchange方法，当用户上传了文件就会调用这个事件</span><br><span class=\"line\">    console.log(e.target.files) //这是一个数组储存用户上传的所有文件。</span><br><span class=\"line\">    console.log(e.target.files[0].__proto__==File.prototype) //true，数据类型为file</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//拖拽获取file</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div id=&quot;drag&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">let drag = document.querySelector(&#x27;#drag&#x27;)</span><br><span class=\"line\">drag.ondragover=(e)=&gt;&#123;</span><br><span class=\"line\">    e.preventDefault() //阻止事件默认行为</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">drag.ondrop=(e)=&gt;&#123;</span><br><span class=\"line\">    e.preventDefault() </span><br><span class=\"line\">    console.log(e.dataTransfer.files)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//使用File System Access获取file</span><br><span class=\"line\"></span><br><span class=\"line\">drag.addEventListener(&#x27;click&#x27;,async()=&gt;&#123;</span><br><span class=\"line\">\tlet filelist = await showOpenFilePicker() //会返回一个数组，储存着用户上传的文件</span><br><span class=\"line\">\tlet file = await filelist[0].getFile() //会返回一个file对象。</span><br><span class=\"line\">\tfile.__proto__ == File.prototype // true,说明这个是file对象。</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\">\tBlob对象的获取</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">let blob = new Blob(array,options) </span><br><span class=\"line\">array:由ArrayBuffer，ArrayBufferView，Blob，Dom等对象构成</span><br><span class=\"line\">options：type：MIME类型</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\">\tBuffer的获取</span><br><span class=\"line\">*/</span><br><span class=\"line\">在nodejs中使用fs模块读取文件。</span><br><span class=\"line\">fs.readFile(filename,(err,data)=&gt;&#123;</span><br><span class=\"line\">\tconsole.log(data) //此时的data是一个Buffer对象</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">buffer.tostring(&#x27;utf-8&#x27;) //buffer转成字符串</span><br><span class=\"line\"></span><br><span class=\"line\">由ArrayBuffer转化而来。</span><br><span class=\"line\">let buffer = Buffer.from(ArrayBuffer)</span><br><span class=\"line\">/*</span><br><span class=\"line\">\tArrayBuffer的获取</span><br><span class=\"line\">*/</span><br><span class=\"line\">ArrayBuffer一般是由file，blob或者Buffer转化的。</span><br><span class=\"line\"></span><br><span class=\"line\">let read = new FileReader()</span><br><span class=\"line\">read.readAsArrayBuffer(blob) //这里的参数可以传blob以及file，同时这是异步，可以调用read的onload事件，读取完成后就可以获取。</span><br><span class=\"line\">read.onload = ((res)=&gt;&#123;</span><br><span class=\"line\">\tconsole.log(res) //res为ArrayBuffer</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">由Buffer转化</span><br><span class=\"line\">let ArrayBuffer = Buffer.from(Buffer).buffer</span><br></pre></td></tr></table></figure>\n<h4 id=\"2转化为url或者base64\"><a class=\"markdownIt-Anchor\" href=\"#2转化为url或者base64\">#</a> 2. 转化为 url 或者 base64</h4>\n<p>对于图片或者视频如果要展示出来需要在 img 标签或者 video 标签上的 src 放上 url 链接或者 base64. 如果想要下载可以在 a 链接上添加 download 属性即可下载。</p>\n<p>FileReader.readAsDataURL: 异步方法，通过 FileReader.onload 的事件获取值，值为一段 data:base64 字符串</p>\n<p>URL.createObjectURL: 同步方法，获取到的是储存在内存中的 url。不用的话需手动释放防止内存泄露，获取速度要比 FileReader.readAsDataURL 要快.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let read = new FileReader() </span><br><span class=\"line\">read.readAsDataURL(blob) //可以传入blob或者file对象</span><br><span class=\"line\">read.onload=((e)=&gt;&#123;</span><br><span class=\"line\">\tconsole.log(e.target.result) // 一段data:64字符串,可以在img以及video的src上挂载。</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">let url = URL.createObjectURL(blob) </span><br></pre></td></tr></table></figure>\n<h4 id=\"3-blob和arraybuffer的切片处理\"><a class=\"markdownIt-Anchor\" href=\"#3-blob和arraybuffer的切片处理\">#</a> 3. Blob 和 ArrayBuffer 的切片处理</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用法与字符串和数组的slice一致，第三个参数为MIME类型设置，如果没有则使用原blob的MIME类型</span><br><span class=\"line\">let newblob = oldblob.slice(start,end,type) </span><br><span class=\"line\">let newArrayBuffer = oldArrayBuffer，slice(start,end) </span><br></pre></td></tr></table></figure>\n<p>相关资料</p>\n<p><a href=\"[谈谈JS二进制：File、Blob、FileReader、ArrayBuffer、Base64 - 掘金 (juejin.cn)](https://juejin.cn/post/7148254347401363463?searchId=20231109095758F3BF67CFE83D9F338CBE#heading-28)\">谈谈 JS 二进制：File、Blob、FileReader、ArrayBuffer、Base64 (稀土掘金)</a></p>\n<p><a href=\"[JS 的二进制家族：base64、File、Blob、ArrayBuffer 的关系 - 掘金 (juejin.cn)](https://juejin.cn/post/6844904069165744135?from=search-suggest#heading-6)\">JS 的二进制家族：base64、File、Blob、ArrayBuffer 的关系 (稀土掘金)</a></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MjAzNzAxODc1NTMwMDM5MzU3\">File System Access API 让浏览器拥有操作本地文件的能力 (稀土掘金)</span></p>\n<p><a href=\"[【Web基础】Blob Url & Data Url_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1Kv4y1471j/?spm_id_from=333.788&vd_source=f327cfd668e6eff40b7b8fec27ccf6df)\">【Web 基础】Blob Url &amp; Data Url</a></p>\n",
            "tags": [
                "音视频开发",
                "二进制"
            ]
        },
        {
            "id": "https://seele-exzzz.github.io/2023/10/04/algorithm/%E5%A0%86%20%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/",
            "url": "https://seele-exzzz.github.io/2023/10/04/algorithm/%E5%A0%86%20%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/",
            "title": "堆 优先队列",
            "date_published": "2023-10-04T13:14:39.498Z",
            "content_html": "<h3 id=\"堆\"><a class=\"markdownIt-Anchor\" href=\"#堆\">#</a> 堆</h3>\n<p>堆分为大顶堆（大根堆）和小顶堆（小根堆）两种。对于一个堆首先是一颗完全二叉树即只有最后一层不为空且最后一层从左往右是连续的不为空。其次如果是大顶堆，根元素是最大值，子节点比父节点都要小，小顶堆则相反</p>\n<h4 id=\"1-上浮\"><a class=\"markdownIt-Anchor\" href=\"#1-上浮\">#</a> 1. 上浮</h4>\n<p>​\t每次插入元素时，都往堆最后一个的地方插入元素，为了维护堆的性质则需对插入的元素进行上浮操作。如果是大顶堆的话，插入的元素如果比父节点大就要与父节点交换值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//大顶堆</span><br><span class=\"line\">function up (index)&#123;</span><br><span class=\"line\">    let father = Math.floor((index-1)/2) //获取父节点的下标</span><br><span class=\"line\">    // 如果是大顶堆的话，当父节点的值小于当前节点的值时就要交换节点。二叉树用数组arr储存。</span><br><span class=\"line\">    while(father&gt;=0&amp;&amp;arr[father]&lt;arr[index])&#123;</span><br><span class=\"line\">    \t[arr[index],arr[father]] = [arr[father],arr[index]] //交换子节点的值和父节点的值。</span><br><span class=\"line\">        index = father </span><br><span class=\"line\">        father = Math.floor((index-1)/2)</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2下沉\"><a class=\"markdownIt-Anchor\" href=\"#2下沉\">#</a> 2. 下沉</h4>\n<p>​\t当根节点弹出的时候，则需要将最后一个元素放在根节点中，为了维护堆的性质则需要对根节点进行下沉操作。如果是大顶堆的话，插入的元素如果比父节点大就要与父节点交换值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//大顶堆</span><br><span class=\"line\">function down(index)&#123; </span><br><span class=\"line\">\tif(!arr[index*2+1]) return //如果不存在左子树的话就不下沉了</span><br><span class=\"line\">\t//如果右子树不存在的话就选左子树否则比较左子树以及右子树的大小谁大选谁</span><br><span class=\"line\">\tlet son = arr[index*2+2]?arr[index*2+1]&gt;arr[index*2+2]?index*2+1:index*2+1:index*2+1 </span><br><span class=\"line\">\twhile(son&lt;arr.length&amp;&amp;arr[index]&lt;arr[son])&#123;</span><br><span class=\"line\">\t\t[arr[index],arr[son]] = [arr[son],arr[index]]</span><br><span class=\"line\">\t\tindex = son</span><br><span class=\"line\">\t\tson = arr[index*2+2]?arr[index*2+1]&gt;arr[index*2+2]?index*2+1:index*2+1:index*2+1 </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-插入元素\"><a class=\"markdownIt-Anchor\" href=\"#3-插入元素\">#</a> 3. 插入元素</h4>\n<p>每次往堆插入元素时在最后的地方插入并进行上浮的操作。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function push (val)&#123;</span><br><span class=\"line\">\tarr.push(val)</span><br><span class=\"line\">\tup(arr.length-1)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-弹出元素\"><a class=\"markdownIt-Anchor\" href=\"#4-弹出元素\">#</a> 4. 弹出元素</h4>\n<p>每次从堆中弹出根元素然后将最后一个元素放在根元素上进行下浮操作。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function pop ()&#123;</span><br><span class=\"line\">\tlet val = arr[0]</span><br><span class=\"line\">\tarr[0] = arr.pop()</span><br><span class=\"line\">\tdown(0)</span><br><span class=\"line\">\treturn val</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-创建一个堆类\"><a class=\"markdownIt-Anchor\" href=\"#5-创建一个堆类\">#</a> 5. 创建一个堆类</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Quque&#123;</span><br><span class=\"line\">    constructor(quque=[],compare=(a,b)=&gt;a-b)&#123;</span><br><span class=\"line\">        this.compare = (a,b)=&gt;compare(this.arr[a],this.arr[b]) //比较函数如果没传的话默认构建大顶堆</span><br><span class=\"line\">        this.quque = quque //用于一开始接受一个数组然后用build将这个数组构建成堆</span><br><span class=\"line\">        this.arr = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 如果一开始传入了一个数组就将其构建成一个堆</span><br><span class=\"line\">    build()&#123; </span><br><span class=\"line\">        this.quque.forEach((a)=&gt;this.push(a))</span><br><span class=\"line\">        this.quque = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    up(index)&#123;</span><br><span class=\"line\">        let father = Math.floor((index-1)/2)</span><br><span class=\"line\">        while(father&gt;=0&amp;&amp;this.compare(index,father)&gt;0)&#123;</span><br><span class=\"line\">            [this.arr[father],this.arr[index]] = [this.arr[index],this.arr[father]]</span><br><span class=\"line\">            index = father</span><br><span class=\"line\">            father = Math.floor((index-1)/2)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    down(index)&#123;</span><br><span class=\"line\">        let son = this.arr[index*2+2]?this.arr[index*2+1]&lt;this.arr[index*2+2]?index*2+2:index*2+1:index*2+1</span><br><span class=\"line\">        while(this.compare(index,son)&lt;0)&#123;</span><br><span class=\"line\">            [this.arr[index],this.arr[son]] = [this.arr[son],this.arr[index]]</span><br><span class=\"line\">            index = son</span><br><span class=\"line\">            son = this.arr[index*2+2]?this.arr[index*2+1]&lt;this.arr[index*2+2]?index*2+2:index*2+1:index*2+1</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    push(val)&#123;</span><br><span class=\"line\">        this.arr.push(val)</span><br><span class=\"line\">        this.up(this.arr.length-1) </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pop()&#123;</span><br><span class=\"line\">        let val = this.arr[0]</span><br><span class=\"line\">        this.arr[0] = this.arr.pop()</span><br><span class=\"line\">        this.down(0)</span><br><span class=\"line\">        return val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"优先队列\"><a class=\"markdownIt-Anchor\" href=\"#优先队列\">#</a> 优先队列</h3>\n<p>​\t优先队列顾名思义就是一个队列，队列里面的元素有优先级比如每次弹出的都是最大值或者最小值。优先队列可以用堆进行实现。</p>\n<h4 id=\"1a-href347-前-k-个高频元素-力扣leetcodehttpsleetcodecnproblemstop-k-frequent-elements前k个高频元素a\"><a class=\"markdownIt-Anchor\" href=\"#1a-href347-前-k-个高频元素-力扣leetcodehttpsleetcodecnproblemstop-k-frequent-elements前k个高频元素a\">#</a> 1.<a href=\"[347. 前 K 个高频元素 - 力扣（LeetCode）](https://leetcode.cn/problems/top-k-frequent-elements/)\">前 k 个高频元素</a></h4>\n<p>​\t因为要获取前 k 个高频元素，所以这里使用小顶堆。当堆的元素的个数超过了 k 就将最小元素即根元素弹出，因此当遍历一遍后就留下了最大的 k 个元素。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class root &#123;</span><br><span class=\"line\">    constructor()&#123;</span><br><span class=\"line\">        this.arr = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    up(index)&#123;</span><br><span class=\"line\">        let fatherIndex = Math.floor((index-1)/2)</span><br><span class=\"line\">        while(fatherIndex&gt;=0&amp;&amp;this.arr[index][1]&lt;this.arr[fatherIndex][1])&#123;</span><br><span class=\"line\">            [this.arr[index],this.arr[fatherIndex]] = [this.arr[fatherIndex],this.arr[index]]</span><br><span class=\"line\">            index = fatherIndex</span><br><span class=\"line\">            fatherIndex = Math.floor((index-1)/2)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    down(index)&#123;</span><br><span class=\"line\">        if(!this.arr[index*2+1]) return</span><br><span class=\"line\">        let sonindex = this.arr[index*2+2]?this.arr[index*2+1][1]&gt;this.arr[index*2+2][1]?index*2+2:index*2+1:this.arr[index*2+1][1] </span><br><span class=\"line\">        while(sonindex&lt;this.arr.length&amp;&amp;this.arr[index][1]&gt;this.arr[sonindex][1])&#123;</span><br><span class=\"line\">            [this.arr[index],this.arr[sonindex]] = [this.arr[sonindex],this.arr[index]]</span><br><span class=\"line\">            index = sonindex</span><br><span class=\"line\">            if(!this.arr[index*2+1]) return</span><br><span class=\"line\">            sonindex = this.arr[index*2+2]?this.arr[index*2+1][1]&gt;this.arr[index*2+2][1]?\t\tindex*2+2:index*2+1:this.arr[index*2+1][1]         </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    push(list)&#123;</span><br><span class=\"line\">        this.arr.push(list)</span><br><span class=\"line\">        this.up(this.arr.length-1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pop()&#123;</span><br><span class=\"line\">        this.arr[0] = this.arr.pop()</span><br><span class=\"line\">        this.down(0)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    size()&#123;</span><br><span class=\"line\">        return this.arr.length</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var topKFrequent = function(nums, k) &#123;</span><br><span class=\"line\">    let map = new Map()</span><br><span class=\"line\">    let quque = new root()</span><br><span class=\"line\">    for(let num of nums)&#123;</span><br><span class=\"line\">        map.set(num,(map.get(num)||0)+1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for(let array of map.entries())&#123;</span><br><span class=\"line\">        quque.push(array)</span><br><span class=\"line\">        if(quque.size()&gt;k)&#123;</span><br><span class=\"line\">            quque.pop()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return quque.arr.map((a)=&gt;a[0])</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-a-href2208-将数组和减半的最少操作次数-力扣leetcodehttpsleetcodecnproblemsminimum-operations-to-halve-array-sum将数组和减半的最少操作次数a\"><a class=\"markdownIt-Anchor\" href=\"#2-a-href2208-将数组和减半的最少操作次数-力扣leetcodehttpsleetcodecnproblemsminimum-operations-to-halve-array-sum将数组和减半的最少操作次数a\">#</a> 2. <a href=\"[2208. 将数组和减半的最少操作次数 - 力扣（LeetCode）](https://leetcode.cn/problems/minimum-operations-to-halve-array-sum/)\">将数组和减半的最少操作次数</a></h4>\n<p>​\t将数组放进大顶堆中，每次将根元素减半，减半后看看根元素是否比子元素小，如果小的话就下沉直到数组和小于数组的一半。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Quque&#123;</span><br><span class=\"line\">    constructor(quque=[],compare=(a,b)=&gt;a-b)&#123;</span><br><span class=\"line\">        this.compare = (a,b)=&gt;compare(this.arr[a],this.arr[b])</span><br><span class=\"line\">        this.quque = quque</span><br><span class=\"line\">        this.arr = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    build()&#123;</span><br><span class=\"line\">        this.quque.forEach((a)=&gt;this.push(a))</span><br><span class=\"line\">        this.quque = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    up(index)&#123;</span><br><span class=\"line\">        let father = Math.floor((index-1)/2)</span><br><span class=\"line\">        while(father&gt;=0&amp;&amp;this.compare(index,father)&gt;0)&#123;</span><br><span class=\"line\">            [this.arr[father],this.arr[index]] = [this.arr[index],this.arr[father]]</span><br><span class=\"line\">            index = father</span><br><span class=\"line\">            father = Math.floor((index-1)/2)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    down(index)&#123;</span><br><span class=\"line\">        let sonindex = this.arr[index*2+2]?this.arr[index*2+1]&lt;this.arr[index*2+2]?index*2+2:index*2+1:index*2+1</span><br><span class=\"line\">        while(this.compare(index,sonindex)&lt;0)&#123;</span><br><span class=\"line\">            [this.arr[index],this.arr[sonindex]] = [this.arr[sonindex],this.arr[index]]</span><br><span class=\"line\">            index = sonindex</span><br><span class=\"line\">            sonindex = this.arr[index*2+2]?this.arr[index*2+1]&lt;this.arr[index*2+2]?index*2+2:index*2+1:index*2+1</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    push(val)&#123;</span><br><span class=\"line\">        this.arr.push(val)</span><br><span class=\"line\">        this.up(this.arr.length-1) </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pop()&#123;</span><br><span class=\"line\">        let val = this.arr[0]/2</span><br><span class=\"line\">        this.arr[0] = val</span><br><span class=\"line\">        this.down(0)</span><br><span class=\"line\">        return val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var halveArray = function(nums) &#123;</span><br><span class=\"line\">    let sum = 0,quque = new Quque(nums),res =0</span><br><span class=\"line\">    quque.build()</span><br><span class=\"line\">    nums.forEach((a)=&gt;&#123;</span><br><span class=\"line\">        sum+=a   </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    let target = sum/2</span><br><span class=\"line\">    while(sum&gt;target)&#123;</span><br><span class=\"line\">        let value = quque.pop()</span><br><span class=\"line\">        sum -= value</span><br><span class=\"line\">        res++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return res</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "算法",
                "算法",
                "堆",
                "优先队列"
            ]
        },
        {
            "id": "https://seele-exzzz.github.io/2023/09/11/project/ProjectFunction/",
            "url": "https://seele-exzzz.github.io/2023/09/11/project/ProjectFunction/",
            "title": "项目功能介绍",
            "date_published": "2023-09-11T07:06:23.365Z",
            "content_html": "<h2 id=\"截图\"><a class=\"markdownIt-Anchor\" href=\"#截图\">#</a> 截图</h2>\n<h3 id=\"1-画笔橡皮擦文字复制到剪切板的功能展示\"><a class=\"markdownIt-Anchor\" href=\"#1-画笔橡皮擦文字复制到剪切板的功能展示\">#</a> 1. 画笔，橡皮擦，文字，复制到剪切板的功能展示。</h3>\n<p>​\t画笔：可以使用下面的按钮以及输入框改变画笔的大小并在截图区域绘制。</p>\n<p>​    橡皮擦：清除用画笔绘制的内容同时可以使用下面的按钮以及输入框改变橡皮擦的大小</p>\n<p>​\t文字：在截图框输入文字。</p>\n<p>​\t复制：点击√即可复制到剪切板。</p>\n<p><img data-src=\"https://typora-seele-exzzz.oss-cn-guangzhou.aliyuncs.com/img/qiuzhao/projectezgif.com-video-to-gif.gif\" alt=\"\"></p>\n<h3 id=\"2-退出撤回保存的功能展示\"><a class=\"markdownIt-Anchor\" href=\"#2-退出撤回保存的功能展示\">#</a> 2. 退出，撤回，保存的功能展示。</h3>\n<p>​\t\t退出：右键可以退出截图同时截图框可以拖动，截图内容以拖动后的截图框为主。</p>\n<p>​\t\t撤回：当进入编辑截图时，点击撤回即可清除绘制以及文本等等内容。</p>\n<p>​\t\t保存：保存按钮将图片保存。</p>\n<p><img data-src=\"https://typora-seele-exzzz.oss-cn-guangzhou.aliyuncs.com/img/qiuzhao/projectezgif.com-video-to-gif%20(1).gif\" alt=\"\"></p>\n<h2 id=\"便利贴\"><a class=\"markdownIt-Anchor\" href=\"#便利贴\">#</a> 便利贴</h2>\n<h3 id=\"1创建清除便利贴的功能展示\"><a class=\"markdownIt-Anchor\" href=\"#1创建清除便利贴的功能展示\">#</a> 1. 创建，清除便利贴的功能展示。</h3>\n<p>​\t 可以创建便利贴并在便利贴记录事情。便利贴可以创建多个，且可以移动。当事情完成后就可以清除。当软件启动时，未清除的便利贴还会显示。</p>\n<p><img data-src=\"https://typora-seele-exzzz.oss-cn-guangzhou.aliyuncs.com/img/qiuzhao/projectezgif.com-video-to-gif%20(2).gif\" alt=\"\"></p>\n<h3 id=\"软件地址\"><a class=\"markdownIt-Anchor\" href=\"#软件地址\">#</a> 软件地址：</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMU1va1oxc1c4LXJENlRrdHhyancwQkE/cHdkPTEyMzQ=\">百度网盘</span></p>\n<p><a href=\"[Release 修复了图标,便利贴清除等相关bug · SEELE-EXZzz/desktool (github.com)](https://github.com/SEELE-EXZzz/desktool/releases/tag/1.1.0)\">GitHub</a></p>\n",
            "tags": []
        },
        {
            "id": "https://seele-exzzz.github.io/2023/08/12/project/%E7%94%A8electron%E5%AE%9E%E7%8E%B0%E6%88%AA%E5%9B%BE%E5%8A%9F%E8%83%BD/",
            "url": "https://seele-exzzz.github.io/2023/08/12/project/%E7%94%A8electron%E5%AE%9E%E7%8E%B0%E6%88%AA%E5%9B%BE%E5%8A%9F%E8%83%BD/",
            "title": "electron截图功能",
            "date_published": "2023-08-12T10:29:32.591Z",
            "content_html": "<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>想要实现截图功能，需要设置一个全屏隐藏菜单栏且透明的窗口，在窗口上放上屏幕的截图，然后监听鼠标，获取两次鼠标点击的位置，根据这个位置将图片用 canvas.drawImage 方法将图片写入 canvas 标签。然后再做保存或者写入剪切板的操作。</p>\n<h2 id=\"一-基本功能\"><a class=\"markdownIt-Anchor\" href=\"#一-基本功能\">#</a> 一、基本功能</h2>\n<h3 id=\"一-进程间通信\"><a class=\"markdownIt-Anchor\" href=\"#一-进程间通信\">#</a> 一、进程间通信</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//渲染进程</span><br><span class=\"line\">&lt;el-button type=&quot;primary&quot; @click=&quot;screenHot&quot;&gt;截图&lt;/el-button&gt; //设置一个按钮。</span><br><span class=\"line\">screenHot()&#123;</span><br><span class=\"line\">    ipcRenderer.send(&#x27;screenHot&#x27;)</span><br><span class=\"line\">&#125;//向主进程发送消息。</span><br><span class=\"line\"></span><br><span class=\"line\">//主进程</span><br><span class=\"line\">let fullScreen</span><br><span class=\"line\">ipcMain.on(&#x27;screenHot&#x27;,async()=&gt;&#123;</span><br><span class=\"line\">\twin.hide()//主窗口隐藏</span><br><span class=\"line\">    //创建一个全屏且隐藏菜单栏的窗口。</span><br><span class=\"line\">    fullScreen= new BrowserWindow(&#123;</span><br><span class=\"line\">        autoHideMenuBar: true, // 自动隐藏菜单栏</span><br><span class=\"line\">        useContentSize: true, // width 和 height 将设置为 web 页面的尺寸</span><br><span class=\"line\">        movable: false, // 是否可移动</span><br><span class=\"line\">        frame: false, // 无边框窗口</span><br><span class=\"line\">        resizable: false, // 窗口大小是否可调整</span><br><span class=\"line\">        hasShadow: false, // 窗口是否有阴影</span><br><span class=\"line\">        transparent: true, // 使窗口透明</span><br><span class=\"line\">        fullscreenable: true, // 窗口是否可以进入全屏状态</span><br><span class=\"line\">        fullscreen: true, // 窗口是否全屏</span><br><span class=\"line\">        simpleFullscreen: true, // 在 macOS 上使用 pre-Lion 全屏</span><br><span class=\"line\">        alwaysOnTop: false, // 窗口是否永远在别的窗口的上面</span><br><span class=\"line\">      webPreferences: &#123;</span><br><span class=\"line\">        nodeIntegration: process.env.ELECTRON_NODE_INTEGRATION,</span><br><span class=\"line\">        contextIsolation: !process.env.ELECTRON_NODE_INTEGRATION</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    if (process.env.WEBPACK_DEV_SERVER_URL) &#123;</span><br><span class=\"line\">      await fullScreen.loadURL(process.env.WEBPACK_DEV_SERVER_URL+&#x27;screenHot.html&#x27;)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      createProtocol(&#x27;app&#x27;)</span><br><span class=\"line\">      fullScreen.loadURL(&#x27;app://./screenHot.html&#x27;)//加载页面</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">ipcMain.on(&#x27;getFullScreen&#x27;,async() =&gt; &#123;</span><br><span class=\"line\">  //获取屏幕大小,以及缩放因子scaleFactor。</span><br><span class=\"line\">  const &#123; size, scaleFactor &#125; = screen.getPrimaryDisplay()</span><br><span class=\"line\">  const sources = await desktopCapturer.getSources(&#123;</span><br><span class=\"line\">    types:[&#x27;screen&#x27;],</span><br><span class=\"line\">    thumbnailSize: &#123;</span><br><span class=\"line\">      width:size.width*scaleFactor,</span><br><span class=\"line\">      height:size.height*scaleFactor</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  // 向渲染进程发送屏幕截图</span><br><span class=\"line\">  fullScreen.webContents.send(&#x27;sendFullScreen&#x27;, sources[0],size)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"二-渲染进程获取桌面截图\"><a class=\"markdownIt-Anchor\" href=\"#二-渲染进程获取桌面截图\">#</a> 二、渲染进程获取桌面截图</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;img&gt;</span><br><span class=\"line\">  &lt;canvas&gt;&lt;/canvas&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">mounted()&#123;</span><br><span class=\"line\">        let img = document.querySelector(&#x27;img&#x27;) </span><br><span class=\"line\">        ipcRenderer.send(&#x27;getFullScreen&#x27;)</span><br><span class=\"line\">        ipcRenderer.on(&#x27;sendFullScreen&#x27;, (event, message) =&gt; &#123;</span><br><span class=\"line\">            img.src = message.thumbnail.toDataURL()   </span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"三-监听鼠标获取坐标\"><a class=\"markdownIt-Anchor\" href=\"#三-监听鼠标获取坐标\">#</a> 三、监听鼠标获取坐标</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods:&#123;</span><br><span class=\"line\">    //获取第一次鼠标按下时的坐标</span><br><span class=\"line\">    getStartPostion(e)&#123;</span><br><span class=\"line\">        this.startX = e.clientX</span><br><span class=\"line\">        this.startY = e.clientY</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    //获取移动时的坐标</span><br><span class=\"line\">    getlastPostion(e)&#123;</span><br><span class=\"line\">        this.endX = e.clientX</span><br><span class=\"line\">        this.endY = e.clientY</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    //删除mousemove的监听事件</span><br><span class=\"line\">    getfinallyPostion()&#123;</span><br><span class=\"line\">        document.removeEventListener(&#x27;mousemove&#x27;,this.getlastPostion)</span><br><span class=\"line\">    &#125;\t\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">mounted()&#123;</span><br><span class=\"line\">    document.addEventListener(&#x27;mousedown&#x27;,this.getStartPostion)</span><br><span class=\"line\">    document.addEventListener(&#x27;mousemove&#x27;,this.getlastPostion)</span><br><span class=\"line\">    document.addEventListener(&#x27;mouseup&#x27;,this.getfinallyPostion)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"四-根据坐标生成一个矩形的截图区域\"><a class=\"markdownIt-Anchor\" href=\"#四-根据坐标生成一个矩形的截图区域\">#</a> 四、根据坐标生成一个矩形的截图区域</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-show=&quot;isShowCutScreen&quot; :style=&quot;&#123;</span><br><span class=\"line\">    position: &#x27;absolute&#x27;,</span><br><span class=\"line\">    left: startX + &#x27;px&#x27;,</span><br><span class=\"line\">    top: startY + &#x27;px&#x27;,</span><br><span class=\"line\">    width: (endX - startX) + &#x27;px&#x27;,</span><br><span class=\"line\">    height: (endY - startY) + &#x27;px&#x27;,</span><br><span class=\"line\">    border: &#x27;2px solid black&#x27;,</span><br><span class=\"line\">  &#125;&quot;&gt; </span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">data()&#123;</span><br><span class=\"line\">\treturn&#123;</span><br><span class=\"line\">        isShowCutScreen:false,</span><br><span class=\"line\">        startX:0, </span><br><span class=\"line\">        startY:0,</span><br><span class=\"line\">        endX:0,</span><br><span class=\"line\">        endY:0,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//鼠标第一个点击时，截图区域展示出来</span><br><span class=\"line\">getStartPostion(e)&#123;</span><br><span class=\"line\">    if(!this.isShowCutScreen)&#123;</span><br><span class=\"line\">      this.isShowCutScreen = true  </span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">      return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.startX = e.clientX</span><br><span class=\"line\">    this.startY = e.clientY</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">//截图区域展示后再获取鼠标移动时的坐标</span><br><span class=\"line\">getlastPostion(e)&#123;</span><br><span class=\"line\">    if(!this.isShowCutScreen) return</span><br><span class=\"line\">    this.endX = e.clientX</span><br><span class=\"line\">    this.endY = e.clientY</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"五-将截图写入canvas同时复制至剪切板\"><a class=\"markdownIt-Anchor\" href=\"#五-将截图写入canvas同时复制至剪切板\">#</a> 五、将截图写入 canvas 同时复制至剪切板</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button v-show=&quot;isShowSetting&quot; @click=&quot;copyToclipboard&quot;&gt;复制并关闭&lt;/button&gt;</span><br><span class=\"line\">copyToclipboard()&#123;</span><br><span class=\"line\">\t/*获取物理像素与CSS像素之比，有些设备这个比值会大于一，如果不乘这个值就会出现，截图位置和大小有偏差。相当于将截图区域的图片放大这个系数放在没有放大的canvas中，截图范围变小。*/</span><br><span class=\"line\">    const devicePixelRatio = window.devicePixelRatio</span><br><span class=\"line\">    let canvas = document.querySelector(&#x27;canvas&#x27;)</span><br><span class=\"line\">    let ctx=canvas.getContext(&quot;2d&quot;)</span><br><span class=\"line\">    let img=document.querySelector(&#x27;img&#x27;)</span><br><span class=\"line\">    let startX = this.startX*devicePixelRatio</span><br><span class=\"line\">    let startY = this.startY*devicePixelRatio</span><br><span class=\"line\">    let endX = this.endX*devicePixelRatio</span><br><span class=\"line\">    let endY = this.endY*devicePixelRatio</span><br><span class=\"line\">    let width = endX-startX</span><br><span class=\"line\">    let height = endY-startY</span><br><span class=\"line\">    canvas.width = width</span><br><span class=\"line\">    canvas.height = height</span><br><span class=\"line\">    ctx.drawImage(img,startX,startY,width,height,0,0,width,height)</span><br><span class=\"line\">    //将canvas变成blob对象，然后使用clipboard复制到剪切板中</span><br><span class=\"line\">    canvas.toBlob((blob)=&gt;&#123;</span><br><span class=\"line\">        navigator.clipboard.write([new ClipboardItem(&#123; &#x27;image/png&#x27;: blob &#125;)]).then(()=&gt;&#123;</span><br><span class=\"line\">            ipcRenderer.send(&#x27;closeFullScreen&#x27;)</span><br><span class=\"line\">        &#125;).catch((err)=&gt;console.log(err))</span><br><span class=\"line\">    &#125;)          </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> </h2>\n<ol>\n<li><a href=\"[基于electron、vite 和 react，我做了一个截图桌面软件 - 掘金 (juejin.cn)](https://juejin.cn/post/7239514481755127845?searchId=202308102041027394C7E481B4D632E215)\">在 electron 中实现截图</a></li>\n<li><a href=\"[用Vite+Electron搞个微信截图工具（区域截屏工具） - 掘金 (juejin.cn)](https://juejin.cn/post/7111115472182968327?searchId=20230810204054CAEE239023ED2A291BEA)\">在 electron 中实现截图</a></li>\n<li><a href=\"[剪贴板操作 Clipboard API 教程 - 阮一峰的网络日志 (ruanyifeng.com)](https://www.ruanyifeng.com/blog/2021/01/clipboard-api.html)\">剪切板使用</a></li>\n<li></li>\n</ol>\n",
            "tags": [
                "项目",
                "vue",
                "electron",
                "element-ui",
                "项目"
            ]
        },
        {
            "id": "https://seele-exzzz.github.io/2023/08/09/algorithm/acm%E6%A8%A1%E5%BC%8F/",
            "url": "https://seele-exzzz.github.io/2023/08/09/algorithm/acm%E6%A8%A1%E5%BC%8F/",
            "title": "acm模式",
            "date_published": "2023-08-09T10:23:41.906Z",
            "content_html": "<h2 id=\"acm模式\"><a class=\"markdownIt-Anchor\" href=\"#acm模式\">#</a> acm 模式</h2>\n<p>众所周知，企业机试是要使用 acm 模式的即自行处理输入输出，而不是力扣上的那种核心代码模式。所以之后了解了一下 JavaScript 获取输入输出的方式。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\">\tjavaScript Node模式</span><br><span class=\"line\">*/</span><br><span class=\"line\">const readline = require(&#x27;readline&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">const rl = readline.createInterface(&#123;</span><br><span class=\"line\">\tinput:process.stdin,</span><br><span class=\"line\">\toutput:process.stdout</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">rl.on(&#x27;line&#x27;,(input)=&gt;&#123;</span><br><span class=\"line\">\t//处理输入的每行数据，这里就是之前力扣上要写的代码。</span><br><span class=\"line\">\t//input就是输入数据。另外有时input并不是处理的数据而是条件所以在处理数据的时候还需要判断一下。</span><br><span class=\"line\">\tconsole.log()//在力扣return是输出数据，而acm模式则是通过console.log打印输出数据</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// 与力扣相比就多了以上这些代码。</span><br></pre></td></tr></table></figure>\n<h2 id=\"处理输入\"><a class=\"markdownIt-Anchor\" href=\"#处理输入\">#</a> 处理输入</h2>\n<h3 id=\"1-输入的类型转化\"><a class=\"markdownIt-Anchor\" href=\"#1-输入的类型转化\">#</a> 1. 输入的类型转化</h3>\n<p>在获取到数据后，需要分辨那些是需要用的，那些是用不着的。同时还需对数据作类型转化。因为拿到的数据大概率是字符串，需要将字符串转化为需要的数据类型比如数组，数字。可以使用正则判断，到底是数组字符串还是数字字符串。</p>\n<h4 id=\"1-字符串转数字\"><a class=\"markdownIt-Anchor\" href=\"#1-字符串转数字\">#</a> 1. 字符串转数字</h4>\n<p>​\t首先如果一行只有数字的话，可以匹配非数字以及空格，如果匹配成功就说明这一行除数字，换行等其他数据类型。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let reg = /[^0-9\\s]/g</span><br><span class=\"line\">//input为输入数据，如果成功匹配则说明有除了数字空格等其他数据类型</span><br><span class=\"line\">if(!reg.test(input))&#123;</span><br><span class=\"line\">\ttodo //如果只想要某行数据是只有数字的话</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2字符串转数组\"><a class=\"markdownIt-Anchor\" href=\"#2字符串转数组\">#</a> 2. 字符串转数组</h4>\n<p>因为数组有 [] 可以匹配这个，另外也可以使用字符串的 indexOf 方法获取 [] 的下标，用 slice () 截取字符串数组中数组的部分，然后使用 split (‘’) 转成数组</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = input.slice(input.indexOf(&#x27;[&#x27;),input.indexOf(&#x27;]&#x27;)+1).spilt(&#x27;&#x27;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2输入的数据构造二叉树或者链表\"><a class=\"markdownIt-Anchor\" href=\"#2输入的数据构造二叉树或者链表\">#</a> 2. 输入的数据构造二叉树或者链表</h3>\n",
            "tags": [
                "算法",
                "算法"
            ]
        },
        {
            "id": "https://seele-exzzz.github.io/2023/08/03/project/electron-%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAelectron%E9%A1%B9%E7%9B%AE/",
            "url": "https://seele-exzzz.github.io/2023/08/03/project/electron-%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAelectron%E9%A1%B9%E7%9B%AE/",
            "title": "electron配置",
            "date_published": "2023-08-03T07:04:45.388Z",
            "content_html": "<h1 id=\"electron-从零搭建一个electron项目\"><a class=\"markdownIt-Anchor\" href=\"#electron-从零搭建一个electron项目\">#</a> electron - 从零搭建一个 electron 项目</h1>\n<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>要想将 vue 引入 electron 中有两种方式，分别为 electron-vue 和 Vue CLI Plugin Electron Builder. 前者虽然出的早，但很久不维护了。因此这边使用后者即 Vue CLI Plugin Electron Builder。首先需要用 vue 的脚手架生成 vue 项目，然后在引入 electron 插件。</p>\n<h2 id=\"创建electron项目\"><a class=\"markdownIt-Anchor\" href=\"#创建electron项目\">#</a> 创建 electron 项目</h2>\n<h3 id=\"1-创建vue项目\"><a class=\"markdownIt-Anchor\" href=\"#1-创建vue项目\">#</a> 1、创建 vue 项目</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i @vue/cli -g //全局安装vue cli脚手架</span><br><span class=\"line\">vue create &lt;name&gt; //脚手架创建vue项目，前面和创建vue项目一模一样</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-添加electron插件\"><a class=\"markdownIt-Anchor\" href=\"#2-添加electron插件\">#</a> 2、添加 electron 插件</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue add electron-builder </span><br><span class=\"line\">cnpm i electron --S //这里用npm的话大概率下载不了，因为electron有一部分代码在GitHub中，要么改镜像要么直接用cnpm</span><br></pre></td></tr></table></figure>\n<p>这时一个 electron 项目就出来了。</p>\n<h2 id=\"配置\"><a class=\"markdownIt-Anchor\" href=\"#配置\">#</a> 配置</h2>\n<p>如果用最新的 vue-cli 的话，这时 webpack 应该在 5 以上，5 以上的 webpack 不再自动引入 polyfill 了，原因是引入这个会让最后的打包体积变得很大，webpack 不建议开发者在浏览器端使用 polyfill。现在要么不用 node，要么手动引入 polyfill。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save path-browserify crypto-browserify//安装path-browserify和crypto-browserify</span><br><span class=\"line\"></span><br><span class=\"line\">//在vue.config.js中加入如下配置。</span><br><span class=\"line\">module.exports = defineConfig(&#123;</span><br><span class=\"line\">  transpileDependencies: true,</span><br><span class=\"line\">  configureWebpack: &#123;</span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">      fallback: &#123;</span><br><span class=\"line\">        &quot;fs&quot;: false,</span><br><span class=\"line\">        &quot;path&quot;: require.resolve(&quot;path-browserify&quot;),</span><br><span class=\"line\">        &quot;crypto&quot;: require.resolve(&quot;crypto-browserify&quot;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>之后会出现’__dirname is not defined’这个错误。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在上面的基础上加如下的配置即可。</span><br><span class=\"line\">pluginOptions:&#123;</span><br><span class=\"line\">   electronBuilder:&#123;</span><br><span class=\"line\">     nodeIntegration:true</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "项目",
                "vue",
                "electron",
                "element-ui",
                "项目"
            ]
        },
        {
            "id": "https://seele-exzzz.github.io/2023/08/02/algorithm/%E9%93%BE%E8%A1%A8%E8%BF%9B%E9%98%B6-%E8%AE%BA%E9%80%92%E5%BD%92%E5%9C%A8%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8/",
            "url": "https://seele-exzzz.github.io/2023/08/02/algorithm/%E9%93%BE%E8%A1%A8%E8%BF%9B%E9%98%B6-%E8%AE%BA%E9%80%92%E5%BD%92%E5%9C%A8%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8/",
            "title": "链表进阶",
            "date_published": "2023-08-02T13:31:36.133Z",
            "content_html": "<h1 id=\"链表进阶-论递归在链表中的作用\"><a class=\"markdownIt-Anchor\" href=\"#链表进阶-论递归在链表中的作用\">#</a> 链表进阶 - 论递归在链表中的作用</h1>\n<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>初次接触链表的时候，一方面在改变指针的时候容易出现问题导致链表出现环，当然之后只要涉及改变指针就靠画图理顺指针改变顺序解决了这个问题，另一方面链表与数组不一样的点在于链表无法回退，这时递归登场了，因为递归有回溯的过程，所以只要将链表的下一项当作参数，那么在回溯的时候自然就会进行回退。使用递归能很轻松地解决蛮多链表的问题。以下是一些用递归解决链表的类型题目。</p>\n<h2 id=\"一-反转链表\"><a class=\"markdownIt-Anchor\" href=\"#一-反转链表\">#</a> 一 、反转链表</h2>\n<p>这类型题目主要是需要在外面设置一个变量储存链表，然后将链表的下一项当作递归的参数，当到达要交换的最后一个节点时就要 return，然后在回溯的部分交换，外面的链表记得在交换后往前走，里面的链表在返回上一层函数的时候会自动回退，这就起到了前后两边交换节点。同时反转链表有两种情况，一种是反转相邻的节点，另一种是反转的节点隔一个节点。</p>\n<h3 id=\"a-href剑指-offer-ii-024-反转链表-力扣leetcodehttpsleetcodecnproblemsuhnkqh剑指-offer-ii-024-反转链表a\"><a class=\"markdownIt-Anchor\" href=\"#a-href剑指-offer-ii-024-反转链表-力扣leetcodehttpsleetcodecnproblemsuhnkqh剑指-offer-ii-024-反转链表a\">#</a> <a href=\"[剑指 Offer II 024. 反转链表 - 力扣（LeetCode）](https://leetcode.cn/problems/UHnkqh/)\">剑指 Offer II 024. 反转链表</a></h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var reverseList = function(head) &#123;</span><br><span class=\"line\">    if(!head||!head.next) return head //如果链表为空或者只有一项return原链表就行</span><br><span class=\"line\">    /*</span><br><span class=\"line\">    \t这里用到了虚拟头节点，因为第一个头节点也要交换如果设置虚拟头节点方便交换头节点，另外也需要在外面设置一个变量一个正向移动，另一个在回溯中逆向移动两个交换节点就能实现链表反转。</span><br><span class=\"line\">    */</span><br><span class=\"line\">    let cur = new ListNode(0,head),node = cur</span><br><span class=\"line\">    const dfs=(list)=&gt;&#123;</span><br><span class=\"line\">    \t//因为最后一个节点要交换，交换节点需要到前一个节点，所以这里到最后一个节点就return这样回溯部分就从倒二个节点开始回退</span><br><span class=\"line\">        if(!list.next) return</span><br><span class=\"line\">        //一旦交换成功就return true，一旦return的结果是true就立马return true防止继续进行回溯部分。导致已经交换过的节点继续交换。</span><br><span class=\"line\">        if(dfs(list.next)) return true </span><br><span class=\"line\">        //最后一次交换有两种情况，一种就是这个，交换节点挨着。</span><br><span class=\"line\">        if(cur.next==list)&#123;</span><br><span class=\"line\">            let temp = cur.next</span><br><span class=\"line\">            cur.next = cur.next.next</span><br><span class=\"line\">            temp.next = cur.next.next</span><br><span class=\"line\">            cur.next.next = temp</span><br><span class=\"line\">            return true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //大部分交换时，交换的节点都隔着节点</span><br><span class=\"line\">        let temp1 = cur.next,temp2=list.next</span><br><span class=\"line\">        cur.next = cur.next.next</span><br><span class=\"line\">        list.next = list.next.next</span><br><span class=\"line\">        temp2.next = cur.next</span><br><span class=\"line\">        cur.next = temp2</span><br><span class=\"line\">        temp1.next = list.next</span><br><span class=\"line\">        list.next = temp1</span><br><span class=\"line\">        cur = temp2</span><br><span class=\"line\">        //如果要交换的节点之间隔着一个节点，交换后cur的下个节点就是list这时该赶紧return。</span><br><span class=\"line\">        if(cur.next==list) return true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dfs(node)</span><br><span class=\"line\">    return node.next //最后return记得不要带上自己设置的虚拟头节点。</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"a-href92-反转链表-ii-力扣leetcodehttpsleetcodecnproblemsreverse-linked-list-ii-92-反转链表-iia\"><a class=\"markdownIt-Anchor\" href=\"#a-href92-反转链表-ii-力扣leetcodehttpsleetcodecnproblemsreverse-linked-list-ii-92-反转链表-iia\">#</a> <a href=\"[92. 反转链表 II - 力扣（LeetCode）](https://leetcode.cn/problems/reverse-linked-list-ii/)\"> 92. 反转链表 II</a></h3>\n<p>这题与上面一题差别在于，不是整个链表反转。因此在在用递归反转链表时，需用 while 循环到达需要反转的链表节点前面，同时递归函数增加一个参数用于判断是否到达了最后一个需要反转的节点。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var reverseBetween = function(head, left, right) &#123;</span><br><span class=\"line\">    if(!head.next||left==right) return head </span><br><span class=\"line\">    let node = new ListNode(0,head) //这里同样需要设置虚拟头节点，因为有可能left为1，头节点需要反转。</span><br><span class=\"line\">    let l=node,r=node</span><br><span class=\"line\">    //用while循环让l和r达到需要交换的第一个节点前。</span><br><span class=\"line\">    while(left&gt;1)&#123;</span><br><span class=\"line\">       l=l.next</span><br><span class=\"line\">       r=r.next</span><br><span class=\"line\">       left --</span><br><span class=\"line\">       right --</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //下面代码与上题一致，无非就是多了参数，判断条件有变，交换部分的代码一致。</span><br><span class=\"line\">    const dfs =(r,right)=&gt;&#123;</span><br><span class=\"line\">        if(right==0) return</span><br><span class=\"line\">        if(dfs(r.next,right-1)) return true</span><br><span class=\"line\">        if(l.next==r)&#123;</span><br><span class=\"line\">            l.next = l.next.next</span><br><span class=\"line\">            r.next = l.next.next</span><br><span class=\"line\">            l.next.next = r</span><br><span class=\"line\">            return true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        let temp1=l.next,temp2=r.next</span><br><span class=\"line\">        l.next = l.next.next</span><br><span class=\"line\">        r.next = r.next.next</span><br><span class=\"line\">        temp1.next = r.next</span><br><span class=\"line\">        r.next = temp1</span><br><span class=\"line\">        temp2.next = l.next</span><br><span class=\"line\">        l.next = temp2 </span><br><span class=\"line\">        l = temp2</span><br><span class=\"line\">        if(l==r||l.next==r) return true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dfs(r,right)</span><br><span class=\"line\">    return node.next</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"a-href2074-反转偶数长度组的节点-力扣leetcodehttpsleetcodecnproblemsreverse-nodes-in-even-length-groups2074-反转偶数长度组的节点a\"><a class=\"markdownIt-Anchor\" href=\"#a-href2074-反转偶数长度组的节点-力扣leetcodehttpsleetcodecnproblemsreverse-nodes-in-even-length-groups2074-反转偶数长度组的节点a\">#</a> <a href=\"[2074. 反转偶数长度组的节点 - 力扣（LeetCode）](https://leetcode.cn/problems/reverse-nodes-in-even-length-groups/)\">2074. 反转偶数长度组的节点</a></h3>\n<p>这题相比于上一题在于不只反转一次。反转的代码依旧可以用上面代码不过判断条件复杂一些。另外最后一组的链表长度如果小于倒数第二组的长度，这时如果长度为偶数则还要反转，而不是最后一组是偶数组才要反转，一开始还理解错误题目来着。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var reverseEvenLengthGroups = function(head) &#123;</span><br><span class=\"line\">    if(!head||!head.next||!head.next.next) return head</span><br><span class=\"line\">    let cur = head,outside = head,inside = head,index = 2</span><br><span class=\"line\">    const dfs =(list,num,k)=&gt;&#123;</span><br><span class=\"line\">    /*</span><br><span class=\"line\">    \t判断条件相比之前的题有亿点多，一共有四种情况。分为两大类一类是没走完，另一类是走到末尾了。反转链表的代码还是一样。</span><br><span class=\"line\">    \t没走完的情况：</span><br><span class=\"line\">    \t1.这时list不为空，num为0。如果当前所在组是奇数，k%2为1 这时不该反转链表，也是不执行回溯部分代码，需return一个值，这里我return-1，下面接收值，如果是-1就立即return-1</span><br><span class=\"line\">    \t2.如果当前所在组是偶数，k%2为0 这时该反转链表，这里return不return值都行。反正要执行下面回溯部分的反转链表的代码。</span><br><span class=\"line\">    \t走完的情况：</span><br><span class=\"line\">    \t3.如果剩余链表数为偶数的话，k-num%2为0，这时要执行回溯部分的代码反转链表，记得这时需到最后一个链表后再return，因为最后一个要反转，所以反转时需到倒数第二个链表的位置。所以这里的判断条件是!list.next而且这个条件需在!list之下不然会出现list为空所以没有list.next的错误。</span><br><span class=\"line\">    \t4. 如果剩余链表数为奇数的话，这时list为空，同样return一个值，下面用一个变量接住后，加个判断条件return出去，防止执行回溯部分的代码。</span><br><span class=\"line\">    */</span><br><span class=\"line\">        if(!list) return false</span><br><span class=\"line\">        if(!list.next&amp;&amp;(k-num)%2==0) return</span><br><span class=\"line\">        if(num==0&amp;&amp;k%2==0) return</span><br><span class=\"line\">        if(num==0) return -1</span><br><span class=\"line\">        let res = dfs(list.next,num-1,k)</span><br><span class=\"line\">        if(res==true)&#123;</span><br><span class=\"line\">            return true</span><br><span class=\"line\">        &#125;else if(res ==false)&#123;</span><br><span class=\"line\">            return false</span><br><span class=\"line\">        &#125;else if(res==-1)&#123;</span><br><span class=\"line\">            return -1</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(outside.next==list)&#123;</span><br><span class=\"line\">            let temp = list</span><br><span class=\"line\">            outside.next = outside.next.next</span><br><span class=\"line\">            temp.next = outside.next.next</span><br><span class=\"line\">            outside.next.next = temp</span><br><span class=\"line\">            return true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        let temp2 = list.next,temp1 = outside.next</span><br><span class=\"line\">        list.next = list.next.next</span><br><span class=\"line\">        outside.next = outside.next.next</span><br><span class=\"line\">        temp2.next = outside.next</span><br><span class=\"line\">        outside.next = temp2</span><br><span class=\"line\">        temp1.next = list.next</span><br><span class=\"line\">        list.next = temp1</span><br><span class=\"line\">        outside = temp2</span><br><span class=\"line\">        if(outside.next == list) return true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    while(cur)&#123;</span><br><span class=\"line\">        if(dfs(inside,index,index)===false) return cur </span><br><span class=\"line\">        //注意递归运行完后这里的outside会发生变化，需将inside赋值给outside</span><br><span class=\"line\">        outside = inside  </span><br><span class=\"line\">        let k = index</span><br><span class=\"line\">        while(k&gt;0)&#123;</span><br><span class=\"line\">            if(!inside||!outside) return cur</span><br><span class=\"line\">            inside = inside.next</span><br><span class=\"line\">            outside = outside.next</span><br><span class=\"line\">            k--</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(!inside||!outside) return cur</span><br><span class=\"line\">        index++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return cur</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"a-href25-k-个一组翻转链表-力扣leetcodehttpsleetcodecnproblemsreverse-nodes-in-k-group-25-k-个一组翻转链表a\"><a class=\"markdownIt-Anchor\" href=\"#a-href25-k-个一组翻转链表-力扣leetcodehttpsleetcodecnproblemsreverse-nodes-in-k-group-25-k-个一组翻转链表a\">#</a> <a href=\"[25. K 个一组翻转链表 - 力扣（LeetCode）](https://leetcode.cn/problems/reverse-nodes-in-k-group/)\"> 25. K 个一组翻转链表</a></h3>\n<p>​\t\t这题和上面一样也需要多次反转，我看评论区发现，字节似乎很喜欢考这题，不过老实说这题感觉难度和上面差不多甚至比上题可以还略微简单结果这题是困难上题是一般。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var reverseKGroup = function(head, k) &#123;</span><br><span class=\"line\">    if(k==1) return head</span><br><span class=\"line\">    let node = new ListNode(0,head),l=node,r=node</span><br><span class=\"line\">    const dfs=(r,num)=&gt;&#123;</span><br><span class=\"line\">    //判断条件有两个一个是剩余链表不足k个这时num大于1，r为空，无需反转。另一个是num为0需反转。</span><br><span class=\"line\">        if(!r) return false</span><br><span class=\"line\">        if(num==0) return</span><br><span class=\"line\">        let res = dfs(r.next,num-1)</span><br><span class=\"line\">        if(res==false)&#123;</span><br><span class=\"line\">            return false</span><br><span class=\"line\">        &#125;else if(res==true)&#123;</span><br><span class=\"line\">            return true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(l.next==r)&#123;</span><br><span class=\"line\">            l.next = l.next.next</span><br><span class=\"line\">            r.next = r.next.next</span><br><span class=\"line\">            l.next.next = r</span><br><span class=\"line\">            r = l</span><br><span class=\"line\">            return true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        let temp1 = l.next,temp2=r.next</span><br><span class=\"line\">        l.next=l.next.next</span><br><span class=\"line\">        r.next=r.next.next</span><br><span class=\"line\">        temp2.next = l.next</span><br><span class=\"line\">        l.next = temp2</span><br><span class=\"line\">        temp1.next = r.next</span><br><span class=\"line\">        r.next = temp1</span><br><span class=\"line\">        l = temp2</span><br><span class=\"line\">        if(l==r||l.next==r) return true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    while(r)&#123;</span><br><span class=\"line\">        dfs(r,k)</span><br><span class=\"line\">        //和上面一样递归反转后l的链表会改变，这时需将r赋给l。</span><br><span class=\"line\">        l = r</span><br><span class=\"line\">        let number = k</span><br><span class=\"line\">        while(number&gt;0)&#123;</span><br><span class=\"line\">            if(!l) break</span><br><span class=\"line\">            l = l.next</span><br><span class=\"line\">            r = r.next</span><br><span class=\"line\">            number--</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return node.next</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二-回文链表\"><a class=\"markdownIt-Anchor\" href=\"#二-回文链表\">#</a> 二、回文链表</h2>\n<h3 id=\"a-hreflcr-027-回文链表-力扣leetcodehttpsleetcodecnproblemsamhzsalcr-027-回文链表a\"><a class=\"markdownIt-Anchor\" href=\"#a-hreflcr-027-回文链表-力扣leetcodehttpsleetcodecnproblemsamhzsalcr-027-回文链表a\">#</a> <a href=\"[LCR 027. 回文链表 - 力扣（LeetCode）](https://leetcode.cn/problems/aMhZSa/)\">LCR 027. 回文链表</a></h3>\n<p>这个没什么好说的，记得外面的链表也要移动。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var isPalindrome = function(head) &#123;</span><br><span class=\"line\">    let cur = head</span><br><span class=\"line\">    if(!head||!head.next) return true</span><br><span class=\"line\">    const dfs=(list)=&gt;&#123;</span><br><span class=\"line\">        if(!list) return</span><br><span class=\"line\">        let res = dfs(list.next)</span><br><span class=\"line\">        if(res)&#123;</span><br><span class=\"line\">            return true</span><br><span class=\"line\">        &#125;else if(res==false)&#123;</span><br><span class=\"line\">            return false</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        if(list.val!=cur.val) return false</span><br><span class=\"line\">        if(cur.next==list||cur.next.next==list) return true</span><br><span class=\"line\">        //记得外面的链表也要往前移动。</span><br><span class=\"line\">        cur=cur.next</span><br><span class=\"line\">         </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    return dfs(cur)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"三-删除链表中满足某个条件的值\"><a class=\"markdownIt-Anchor\" href=\"#三-删除链表中满足某个条件的值\">#</a> 三、删除链表中满足某个条件的值</h2>\n<h3 id=\"a-href83-删除排序链表中的重复元素-力扣leetcodehttpsleetcodecnproblemsremove-duplicates-from-sorted-list83-删除排序链表中的重复元素a\"><a class=\"markdownIt-Anchor\" href=\"#a-href83-删除排序链表中的重复元素-力扣leetcodehttpsleetcodecnproblemsremove-duplicates-from-sorted-list83-删除排序链表中的重复元素a\">#</a> <a href=\"[83. 删除排序链表中的重复元素 - 力扣（LeetCode）](https://leetcode.cn/problems/remove-duplicates-from-sorted-list/)\">83. 删除排序链表中的重复元素</a></h3>\n<p>递推部分用哈希表获取链表各个值极其个数，回溯部分再根据哈希表删除重复的元素即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let map = new Map(),cur = head</span><br><span class=\"line\">const dfs =(list)=&gt;&#123;</span><br><span class=\"line\">    // 当链表为空时再return而不是到链表倒数第一位再return，不然的话递推部分会记录倒数第一个值</span><br><span class=\"line\">    if(!list) return</span><br><span class=\"line\">    if(map.has(list.val))&#123;</span><br><span class=\"line\">        map.set(list.val,map.get(list.val)+1)</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        map.set(list.val,1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dfs(list.next)</span><br><span class=\"line\">    if(!list.next) return // 如果是倒数第一个就直接return到上一层也就是倒数第二个，倒数第一个位置删除不了节点。</span><br><span class=\"line\">    let num = map.get(list.next.val)-1</span><br><span class=\"line\">    map.set(list.next.val,num)</span><br><span class=\"line\">    if(num&gt;=1)&#123;</span><br><span class=\"line\">        list.next = list.next.next</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dfs(cur)</span><br><span class=\"line\">return cur</span><br></pre></td></tr></table></figure>\n<h3 id=\"a-href82-删除排序链表中的重复元素-ii-力扣leetcodehttpsleetcodecnproblemsremove-duplicates-from-sorted-list-ii82-删除排序链表中的重复元素-iia\"><a class=\"markdownIt-Anchor\" href=\"#a-href82-删除排序链表中的重复元素-ii-力扣leetcodehttpsleetcodecnproblemsremove-duplicates-from-sorted-list-ii82-删除排序链表中的重复元素-iia\">#</a> <a href=\"[82. 删除排序链表中的重复元素 II - 力扣（LeetCode）](https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii/)\">82. 删除排序链表中的重复元素 II</a></h3>\n<p>和上题差不多不过这里头节点可能会删除所以可以整一个虚拟头节点。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var deleteDuplicates = function(head) &#123;</span><br><span class=\"line\">    let map = new Map(),cur = new ListNode(false,head)</span><br><span class=\"line\">    const dfs=(list)=&gt;&#123;</span><br><span class=\"line\">        if(!list)&#123;</span><br><span class=\"line\">            let key = map.keys()</span><br><span class=\"line\">            for(let i of key)&#123;</span><br><span class=\"line\">                if(map.get(i)==1) map.delete(i)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          return  </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        if(map.has(list.val))&#123;</span><br><span class=\"line\">            map.set(list.val,map.get(list.val)+1)</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            map.set(list.val,1)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dfs(list.next)</span><br><span class=\"line\">        if(!list.next) return</span><br><span class=\"line\">        if(map.has(list.next.val)) list.next =list.next.next</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dfs(cur)</span><br><span class=\"line\">    return cur.next</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二-回文链表-2\"><a class=\"markdownIt-Anchor\" href=\"#二-回文链表-2\">#</a> 二、回文链表</h2>\n<h3 id=\"a-hreflcr-027-回文链表-力扣leetcodehttpsleetcodecnproblemsamhzsalcr-027-回文链表a-2\"><a class=\"markdownIt-Anchor\" href=\"#a-hreflcr-027-回文链表-力扣leetcodehttpsleetcodecnproblemsamhzsalcr-027-回文链表a-2\">#</a> <a href=\"[LCR 027. 回文链表 - 力扣（LeetCode）](https://leetcode.cn/problems/aMhZSa/)\">LCR 027. 回文链表</a></h3>\n<p>这个没什么好说的，记得外面的链表也要移动。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var isPalindrome = function(head) &#123;</span><br><span class=\"line\">    let cur = head</span><br><span class=\"line\">    if(!head||!head.next) return true</span><br><span class=\"line\">    const dfs=(list)=&gt;&#123;</span><br><span class=\"line\">        if(!list) return</span><br><span class=\"line\">        let res = dfs(list.next)</span><br><span class=\"line\">        if(res)&#123;</span><br><span class=\"line\">            return true</span><br><span class=\"line\">        &#125;else if(res==false)&#123;</span><br><span class=\"line\">            return false</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        if(list.val!=cur.val) return false</span><br><span class=\"line\">        if(cur.next==list||cur.next.next==list) return true</span><br><span class=\"line\">        //记得外面的链表也要往前移动。</span><br><span class=\"line\">        cur=cur.next</span><br><span class=\"line\">         </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    return dfs(cur)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"三-删除链表中满足某个条件的值-2\"><a class=\"markdownIt-Anchor\" href=\"#三-删除链表中满足某个条件的值-2\">#</a> 三、删除链表中满足某个条件的值</h2>\n<h3 id=\"a-href83-删除排序链表中的重复元素-力扣leetcodehttpsleetcodecnproblemsremove-duplicates-from-sorted-list83-删除排序链表中的重复元素a-2\"><a class=\"markdownIt-Anchor\" href=\"#a-href83-删除排序链表中的重复元素-力扣leetcodehttpsleetcodecnproblemsremove-duplicates-from-sorted-list83-删除排序链表中的重复元素a-2\">#</a> <a href=\"[83. 删除排序链表中的重复元素 - 力扣（LeetCode）](https://leetcode.cn/problems/remove-duplicates-from-sorted-list/)\">83. 删除排序链表中的重复元素</a></h3>\n<p>递推部分用哈希表获取链表各个值极其个数，回溯部分再根据哈希表删除重复的元素即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let map = new Map(),cur = head</span><br><span class=\"line\">const dfs =(list)=&gt;&#123;</span><br><span class=\"line\">    // 当链表为空时再return而不是到链表倒数第一位再return，不然的话递推部分会记录倒数第一个值</span><br><span class=\"line\">    if(!list) return</span><br><span class=\"line\">    if(map.has(list.val))&#123;</span><br><span class=\"line\">        map.set(list.val,map.get(list.val)+1)</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        map.set(list.val,1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dfs(list.next)</span><br><span class=\"line\">    if(!list.next) return // 如果是倒数第一个就直接return到上一层也就是倒数第二个，倒数第一个位置删除不了节点。</span><br><span class=\"line\">    let num = map.get(list.next.val)-1</span><br><span class=\"line\">    map.set(list.next.val,num)</span><br><span class=\"line\">    if(num&gt;=1)&#123;</span><br><span class=\"line\">        list.next = list.next.next</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dfs(cur)</span><br><span class=\"line\">return cur</span><br></pre></td></tr></table></figure>\n<h3 id=\"a-href82-删除排序链表中的重复元素-ii-力扣leetcodehttpsleetcodecnproblemsremove-duplicates-from-sorted-list-ii82-删除排序链表中的重复元素-iia-2\"><a class=\"markdownIt-Anchor\" href=\"#a-href82-删除排序链表中的重复元素-ii-力扣leetcodehttpsleetcodecnproblemsremove-duplicates-from-sorted-list-ii82-删除排序链表中的重复元素-iia-2\">#</a> <a href=\"[82. 删除排序链表中的重复元素 II - 力扣（LeetCode）](https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii/)\">82. 删除排序链表中的重复元素 II</a></h3>\n<p>和上题差不多不过这里头节点可能会删除所以可以整一个虚拟头节点。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var deleteDuplicates = function(head) &#123;</span><br><span class=\"line\">    let map = new Map(),cur = new ListNode(false,head)</span><br><span class=\"line\">    const dfs=(list)=&gt;&#123;</span><br><span class=\"line\">        if(!list)&#123;</span><br><span class=\"line\">            let key = map.keys()</span><br><span class=\"line\">            for(let i of key)&#123;</span><br><span class=\"line\">                if(map.get(i)==1) map.delete(i)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          return  </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        if(map.has(list.val))&#123;</span><br><span class=\"line\">            map.set(list.val,map.get(list.val)+1)</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            map.set(list.val,1)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dfs(list.next)</span><br><span class=\"line\">        if(!list.next) return</span><br><span class=\"line\">        if(map.has(list.next.val)) list.next =list.next.next</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dfs(cur)</span><br><span class=\"line\">    return cur.next</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"a-href1171-从链表中删去总和值为零的连续节点-力扣leetcodehttpsleetcodecnproblemsremove-zero-sum-consecutive-nodes-from-linked-list1171-从链表中删去总和值为零的连续节点a\"><a class=\"markdownIt-Anchor\" href=\"#a-href1171-从链表中删去总和值为零的连续节点-力扣leetcodehttpsleetcodecnproblemsremove-zero-sum-consecutive-nodes-from-linked-list1171-从链表中删去总和值为零的连续节点a\">#</a> <a href=\"[1171. 从链表中删去总和值为零的连续节点 - 力扣（LeetCode）](https://leetcode.cn/problems/remove-zero-sum-consecutive-nodes-from-linked-list/)\">1171. 从链表中删去总和值为零的连续节点</a></h3>\n<p>前缀和 + 链表。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var removeZeroSumSublists = function(head) &#123;</span><br><span class=\"line\">    let arr = [],cur = new ListNode(0,head),index = -1</span><br><span class=\"line\">    const dfs =(list,num)=&gt;&#123;</span><br><span class=\"line\">        if(!list) return  </span><br><span class=\"line\">        if(arr.length!=0)&#123;</span><br><span class=\"line\">            arr.push(arr[num-1]+list.val)</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            arr.push(list.val)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dfs(list.next,num+1)</span><br><span class=\"line\">        let k = arr.indexOf(arr[num+1])</span><br><span class=\"line\">        if(k!=num+1&amp;&amp;index==-1) index = k</span><br><span class=\"line\">        if(index!=-1) list.next = list.next.next</span><br><span class=\"line\">        if(index==num) index = -1     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dfs(cur,0)</span><br><span class=\"line\">    return cur.next</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "算法",
                "算法",
                "链表",
                "递归"
            ]
        },
        {
            "id": "https://seele-exzzz.github.io/2023/07/27/Learning-record/JavaScript%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/",
            "url": "https://seele-exzzz.github.io/2023/07/27/Learning-record/JavaScript%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/",
            "title": "JavaScript常用方法",
            "date_published": "2023-07-27T08:18:19.808Z",
            "content_html": "<p>[toc]</p>\n<h1 id=\"javascript中常用方法\"><a class=\"markdownIt-Anchor\" href=\"#javascript中常用方法\">#</a> JavaScript 中常用方法</h1>\n<h2 id=\"一-数组\"><a class=\"markdownIt-Anchor\" href=\"#一-数组\">#</a> 一、数组</h2>\n<h3 id=\"1截取数组\"><a class=\"markdownIt-Anchor\" href=\"#1截取数组\">#</a> 1. 截取数组</h3>\n<ol>\n<li>\n<p>slice：获取数组某一区间的元素并形成新的数组将其返回，不改变原数组.</p>\n</li>\n<li>\n<p>splice：删除数组元素同时可以插入元素，会改变原数组.</p>\n<p>slice 方法接收两个参数都为下标，区间为左闭右开。如果省略第一个参数则从第一个元素开始获取如果省略第二个参数则会一直获取到最后一个值。这两个参数都可以是负数。当参数为负数时，最后一个值的下标为 - 1 并以此往前依次减 1. 如果未获取到元素则返回空数组</p>\n<p>splice 方法接收三个参数，第一个参数是要删除值的下标不可省略另外这个参数同样也可以是负数，第二个参数的删除值的个数如果为 0 则不会删除元素，如果省略则一直删到结尾，第三个参数为插入的元素，元素不只是数字或者字符串，数组，函数或者对象都可以传入。</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = [1,2,3,4,5,6,7,8,9]</span><br><span class=\"line\">let b = [&#x27;a&#x27;,&#x27;b&#x27;]</span><br><span class=\"line\"></span><br><span class=\"line\">//获取下标0到2不包括2的元素并返回形成新的数组</span><br><span class=\"line\">console.log(a.slice(0,2))//[ 1, 2 ]</span><br><span class=\"line\">//如果第一个参数没有的话，则从头开始，第二个参数没有的话则获取到结尾//[1, 2, 3, 4, 5,6, 7, 8, 9]</span><br><span class=\"line\">console.log(a.slice())</span><br><span class=\"line\">//获取倒数第三个到倒数第一个不包括倒数第一个元素//[ 7, 8 ]</span><br><span class=\"line\">console.log(a.slice(-3,-1))</span><br><span class=\"line\">let fun= ()=&gt;&#123;return 1&#125;</span><br><span class=\"line\">let obj =&#123;a,b&#125;</span><br><span class=\"line\">a.splice(2,4,obj,fun,...b)//从删除下标2以及之后的3的元素并在2后插入对象函数等元素</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"2查找数组中某一元素的位置\"><a class=\"markdownIt-Anchor\" href=\"#2查找数组中某一元素的位置\">#</a> 2. 查找数组中某一元素的位置</h3>\n<ol>\n<li>\n<p>indexOf： 获取某一元素在数组首次出现的下标。</p>\n</li>\n<li>\n<p>lastIndexOf： 获取某一元素在数组中最后一次出现的下标。</p>\n<p>这两个方法都接收两个参数，第一个参数是要找的值，第二个参数是从那一个下标开始包括此下标（indexOf 向后，lastIndexOf 向前）找，如果没有第二个参数就默认 indexO 从头开始找，lastIndexOf 从最后向前开始找。如果没有找到该元素则返回 - 1</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a =1</span><br><span class=\"line\">const b = [1,2,3,1,2,3,2,1,2,1]</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(b.indexOf(a)) //0</span><br><span class=\"line\">console.log(b.lastIndexOf(a)) //9</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(b.indexOf(a,1)) //3</span><br><span class=\"line\">console.log(b.lastIndexOf(a,8)) //7</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(b.indexOf(a,b.indexOf(a)+1)) 获取第二个出现此元素下标</span><br><span class=\"line\">console.log(b.lastIndexOf(a,b.lastIndexOf(a)-1)) 获取倒数第二个出现此元素下标</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(b.indexOf(4) //-1</span><br><span class=\"line\">console.log(b.lastIndexOf(4) //-1</span><br></pre></td></tr></table></figure>\n<h3 id=\"3查找数组中满足条件的元素或者下标\"><a class=\"markdownIt-Anchor\" href=\"#3查找数组中满足条件的元素或者下标\">#</a> 3. 查找数组中满足条件的元素或者下标</h3>\n<ol>\n<li>\n<p>find：获取数组中满足条件的元素</p>\n</li>\n<li>\n<p>findIndex：获取数组中满足条件的元素的下标</p>\n<p>这两个方法都接收一个函数做参数，函数有三个参数，第一个为数组的值，第二个为该值在数组中所在的下标，第三个为该数组。其中 find 返回元素，如果没有发现满足条件的元素则返回 undefined，如果有多个元素满足也只会返回第一个满足条件的元素。findIn 返回下标，如果没有发现满足条件的元素则返回 - 1，如果有多个元素满足也只会返回第一个满足条件的下标。</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = [1,2,3,4]</span><br><span class=\"line\">console.log(a.find((val)=&gt;val&gt;1)) //2</span><br><span class=\"line\">console.log(a.findIndex((val)=&gt;val&gt;1)) //1 </span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"4检查数组中的元素是否存在或者都满足某一条件\"><a class=\"markdownIt-Anchor\" href=\"#4检查数组中的元素是否存在或者都满足某一条件\">#</a> 4. 检查数组中的元素是否存在或者都满足某一条件</h3>\n<ol>\n<li>\n<p>every：检查数组中的元素是否都满足某一条件</p>\n</li>\n<li>\n<p>some：检查数组中的元素是否存在满足某一条件</p>\n<p>这两个方法都接收一个函数做参数，函数有三个参数，第一个为数组的值，第二个为该值在数组中所在的下标，第三个为该数组。返回值均为布尔值。</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = [1,2,3]</span><br><span class=\"line\">console.log(a.every((val)=&gt;val&gt;0)) //true</span><br><span class=\"line\">console.log(a.every((val)=&gt;val&gt;1)) //false</span><br><span class=\"line\">console.log(a.some((val)=&gt;val&gt;3)) //false</span><br><span class=\"line\">console.log(a.some((val)=&gt;val&gt;1)) //true</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"5将数组转化为字符串\"><a class=\"markdownIt-Anchor\" href=\"#5将数组转化为字符串\">#</a> 5. 将数组转化为字符串</h3>\n<ol>\n<li>\n<p>join：获取参数作为分割符，如果没有则默认用‘,’(逗号) 并返回字符串。</p>\n</li>\n<li>\n<p>toString： 将数组转化为字符串并用‘,’(逗号) 分割并返回字符串。</p>\n<p>这两个方法都不会改变原数组</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = [1,2,3]</span><br><span class=\"line\">console.log(a.toString())//1,2,3</span><br><span class=\"line\">console.log(a.join())//1,2,3</span><br><span class=\"line\">console.log(a.join(&#x27;&#x27;))//123</span><br><span class=\"line\">console.log(a.join(&#x27;-&#x27;))//1-2-3</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"6在数组开头或者结尾删除或者添加元素\"><a class=\"markdownIt-Anchor\" href=\"#6在数组开头或者结尾删除或者添加元素\">#</a> 6. 在数组开头或者结尾删除或者添加元素</h3>\n<ol>\n<li>push：向数组末尾添加一个或多个元素，并返回新的长度。</li>\n<li>pop：从数组末尾删除一个元素，并返回被删除的元素。</li>\n<li>shift：从数组开头删除一个元素，并返回被删除的元素。</li>\n<li>unshift：向数组开头添加一个或多个元素，并返回新的长度。</li>\n</ol>\n<h2 id=\"二-字符串\"><a class=\"markdownIt-Anchor\" href=\"#二-字符串\">#</a> 二、字符串</h2>\n<h3 id=\"1字符串转化为数组\"><a class=\"markdownIt-Anchor\" href=\"#1字符串转化为数组\">#</a> 1. 字符串转化为数组</h3>\n<ol>\n<li>\n<p>split：将字符串以某种方式分割成数组。</p>\n<p>split 传入一个参数可以是正则表达式并匹配数组中的元素将其分割为数组，返回一个数组不改变字符串。</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let str = &#x27;1,3 4&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(str.split()) // 如果不传参数则会将返回一个数组第一个元素为整个字符串</span><br><span class=\"line\">[ &#x27;1,3 4&#x27; ]</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(str.split(&#x27;&#x27;)) // 如果参数为空字符串的话，则会将字符串每一个元素传入数组中并返回这个数组</span><br><span class=\"line\">[ &#x27;1&#x27;, &#x27;,&#x27;, &#x27;3&#x27;, &#x27; &#x27;, &#x27;4&#x27; ]</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(str.split(&#x27; &#x27;))// 参数可以是空格，将空格作为分割符并传入数组并返回这个数组</span><br><span class=\"line\">[ &#x27;1,3&#x27;, &#x27;4&#x27; ]</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(str.split(&#x27;,&#x27;))</span><br><span class=\"line\">[ &#x27;1&#x27;, &#x27;3 4&#x27; ]</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(str.split(/[0-9]/))// 参数可以是正则表达式</span><br><span class=\"line\">[ &#x27;&#x27;, &#x27;,&#x27;, &#x27; &#x27;, &#x27;&#x27; ]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"2-查找字符串中某个值的位置\"><a class=\"markdownIt-Anchor\" href=\"#2-查找字符串中某个值的位置\">#</a> 2. 查找字符串中某个值的位置</h3>\n<p>1.indexOf：查找某个值在字符串的位置，这个值可以是字符串。</p>\n<p>2.lastIndexOf：查找某个值在字符串的位置，同样这个值可以是字符串。</p>\n<p>用法与数组的方法一致，不过这个方法可以很方便的求两个字符串的子串。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let str1 = &#x27;abc&#x27;,str2=&#x27;abccbabc&#x27;</span><br><span class=\"line\">console.log(str2.indexOf(str1))//0</span><br><span class=\"line\">console.log(str2.lastIndexOf(str1))//5</span><br><span class=\"line\">只要返回值不是-1就说明str是str2的子串。</span><br></pre></td></tr></table></figure>\n<h2 id=\"三-哈希表\"><a class=\"markdownIt-Anchor\" href=\"#三-哈希表\">#</a> 三、哈希表</h2>\n<ol>\n<li>\n<p>set (key,value): 设置键值对，如果某一键已经存在则会覆盖。第一个参数可以是数字，字符串，布尔值，数组，对象，函数等等值。</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr1 =[1,2],obj1=&#123;a:1&#125;,arr2 =[1,2],obj2=&#123;a:1&#125;,map = new Map(),fun1 =()=&gt;&#123;&#125;,fun2=()=&gt;&#123;&#125;</span><br><span class=\"line\">map.set(arr1,1)</span><br><span class=\"line\">map.set(obj1,1)</span><br><span class=\"line\">map.set(arr2,1)</span><br><span class=\"line\">map.set(obj2,1)</span><br><span class=\"line\">map.set(fun1,1)</span><br><span class=\"line\">map.set(fun2,1)</span><br><span class=\"line\">console.log(map.size)//6</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let arr1 =[1,2],arr2 =arr1,map = new Map()</span><br><span class=\"line\">map.set(arr1,1)</span><br><span class=\"line\">map.set(arr2,1)</span><br><span class=\"line\">console.log(map.size)//1</span><br><span class=\"line\"></span><br><span class=\"line\">可以发现像数组，对象，函数尽管一模一样，但是其变量储存的地址不同所以看做是不同的键，但是如果是浅拷贝储存变量的地址一致就视作是同一个键</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>get (key): 获取某一键值在哈希表中的值。</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let map = new Map()</span><br><span class=\"line\">map.set(1,2)</span><br><span class=\"line\">map.get(1)//2</span><br><span class=\"line\">map.get(2)//undefined 如果找不到就会返回undefined</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>has (key): 判断某个键是否存在，并返回布尔值。</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let map = new Map()</span><br><span class=\"line\">map.set(1,2)</span><br><span class=\"line\">console.log(map.has(1))//true</span><br><span class=\"line\">console.log(map.has(2))//false</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>clear (): 清除哈希表所有键值对。</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let map = new Map()</span><br><span class=\"line\">map.set(1,2)</span><br><span class=\"line\">console.log(map.has(1))//true</span><br><span class=\"line\">map.clear()</span><br><span class=\"line\">console.log(map.has(1))//false</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>delete (key): 删除某键。</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let map = new Map()</span><br><span class=\"line\">map.set(1,2)</span><br><span class=\"line\">console.log(map.has(1))//true</span><br><span class=\"line\">map.delete()</span><br><span class=\"line\">console.log(map.has(1))//false</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>keys (): 返回一个包含哈希表所有键的迭代器。</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr1 =[1,2],obj1=&#123;a:1&#125;,arr2 =[1,2],obj2=&#123;a:1&#125;,map = new Map(),fun1 =()=&gt;&#123;&#125;,fun2=()=&gt;&#123;&#125;</span><br><span class=\"line\">map.set(arr1,1)</span><br><span class=\"line\">map.set(obj1,1)</span><br><span class=\"line\">map.set(arr2,1)</span><br><span class=\"line\">map.set(obj2,1)</span><br><span class=\"line\">map.set(fun1,1)</span><br><span class=\"line\">map.set(fun2,1)</span><br><span class=\"line\">let key = map.keys()</span><br><span class=\"line\">for(let i of key)&#123;</span><br><span class=\"line\">    console.log(i) //[ 1, 2 ] &#123; a: 1 &#125; [ 1, 2 ] &#123; a: 1 &#125; [Function: fun1] [Function: fun2]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>values (): 返回一个包含哈希表所有值的迭代器。</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr1 =[1,2],obj1=&#123;a:1&#125;,arr2 =[1,2],obj2=&#123;a:1&#125;,map = new Map(),fun1 =()=&gt;&#123;&#125;,fun2=()=&gt;&#123;&#125;</span><br><span class=\"line\">map.set(arr1,1)</span><br><span class=\"line\">map.set(obj1,1)</span><br><span class=\"line\">map.set(arr2,1)</span><br><span class=\"line\">map.set(obj2,1)</span><br><span class=\"line\">map.set(fun1,1)</span><br><span class=\"line\">map.set(fun2,1)</span><br><span class=\"line\">let val = map.values()</span><br><span class=\"line\">for(let i of val)&#123;</span><br><span class=\"line\">    console.log(i) // 1 1 1 1 1 1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n",
            "tags": [
                "学习记录",
                "JavaScript"
            ]
        },
        {
            "id": "https://seele-exzzz.github.io/2023/07/17/algorithm/%E9%93%BE%E8%A1%A8%E5%9F%BA%E7%A1%80/",
            "url": "https://seele-exzzz.github.io/2023/07/17/algorithm/%E9%93%BE%E8%A1%A8%E5%9F%BA%E7%A1%80/",
            "title": "链表基础",
            "date_published": "2023-07-17T07:45:02.445Z",
            "content_html": "<p>[toc]</p>\n<h1 id=\"链表基础\"><a class=\"markdownIt-Anchor\" href=\"#链表基础\">#</a> 链表基础</h1>\n<h2 id=\"一-链表操作\"><a class=\"markdownIt-Anchor\" href=\"#一-链表操作\">#</a> 一、链表操作</h2>\n<h3 id=\"1力扣上的链表构造函数\"><a class=\"markdownIt-Anchor\" href=\"#1力扣上的链表构造函数\">#</a> 1. 力扣上的链表构造函数</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//注意这是力扣上的构造函数不是JavaScript内置函数</span><br><span class=\"line\">function ListNode(val, next) &#123;</span><br><span class=\"line\">    this.val = (val===undefined ? 0 : val)</span><br><span class=\"line\">    this.next = (next===undefined ? null : next)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let node = new ListNode(0,head)</span><br><span class=\"line\">//通常用来给链表加上虚拟头结点方便对链表进行操作，第一个形参传值，第二形参传链表</span><br><span class=\"line\">//另外如果用const定义变量再赋予链表，这个变量就无法操作了，原因应该是在操作链表时，链表所储存的变量的地址发生变化。</span><br></pre></td></tr></table></figure>\n<h3 id=\"2链表移动和删除\"><a class=\"markdownIt-Anchor\" href=\"#2链表移动和删除\">#</a> 2. 链表移动和删除</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let cur = head </span><br><span class=\"line\">/*</span><br><span class=\"line\">将head赋给变量cur，如果直接操作head然后再return的话会是null，由于这是浅拷贝，在操作cur时head也会发生改变，所以操作完cur再return head就行。</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">cur = cur.next //让将cur下一位赋给cur就完成了一次移动。</span><br><span class=\"line\"></span><br><span class=\"line\">while(cur)&#123;</span><br><span class=\"line\">\t...\t//对cur操作</span><br><span class=\"line\">\tcur = cur.next</span><br><span class=\"line\">&#125; //这就完成了一次遍历，这时cur是null，head已操作</span><br><span class=\"line\"></span><br><span class=\"line\">cur.netx = cur.next.next //想删除那个节点需找到那个节点的前面一个节点，将前面那个节点的指针指向删除节点后面那个节点。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//力扣上203. 移除链表元素</span><br><span class=\"line\"></span><br><span class=\"line\">//方法一，增加虚拟节点</span><br><span class=\"line\">var removeElements = function(head, val) &#123;</span><br><span class=\"line\">    const cur = new ListNode(0,head)</span><br><span class=\"line\">    let a = cur</span><br><span class=\"line\">    while(a.next)&#123;</span><br><span class=\"line\">        if(a.next.val==val)&#123;</span><br><span class=\"line\">            a.next = a.next.next</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            a = a.next </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return cur.next</span><br><span class=\"line\">&#125;;//增加虚拟头节点的好处在于，处理原链表的头节点与其他节点的方式一致，无需在额外考虑头节点如何处理，最后只要return cur.next就行。</span><br><span class=\"line\"></span><br><span class=\"line\">//方法二，在不增加虚拟头节点的情况下删除指定节点</span><br><span class=\"line\">var removeElements = function(head, val) &#123;</span><br><span class=\"line\">    let cur = head</span><br><span class=\"line\">    /*先用while将头节点中值等于val删除，之后就和方法一差不多，需要注意的是，删除后有可能是null或者传来的链表就是null，这是需要if条件判断一下，方法一无需判断是因为加了头节点所以不可能是null*/</span><br><span class=\"line\">    while(cur&amp;&amp;cur.val==val)&#123;</span><br><span class=\"line\">        cur = cur.next</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(!cur) return cur</span><br><span class=\"line\">    head = cur //将处理好的cur赋值给head，如果不赋值，前面的操作就没有用了。</span><br><span class=\"line\">    while(cur.next)&#123;</span><br><span class=\"line\">        if(cur.next.val==val)&#123;</span><br><span class=\"line\">            cur.next = cur.next.next</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            cur = cur.next</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return head</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3链表的插入\"><a class=\"markdownIt-Anchor\" href=\"#3链表的插入\">#</a> 3. 链表的插入</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//假设需要往链表head中的第n个节点插入val值，注意链表与数组一样下标从0开始</span><br><span class=\"line\">//首先声明一个变量并将head赋值给这个变量</span><br><span class=\"line\">let cur = head</span><br><span class=\"line\"></span><br><span class=\"line\">方法一：不使用虚拟节点</span><br><span class=\"line\"></span><br><span class=\"line\">//如果不使用虚拟节点的话，得分两种情况，第一种删除头节点，第二种删除后面的节点</span><br><span class=\"line\"></span><br><span class=\"line\">//插入头节点</span><br><span class=\"line\">if(n==0)&#123;</span><br><span class=\"line\">\thead = new ListNode(val,head)</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">\t//移动到第n-1个节点前</span><br><span class=\"line\">    while(n&gt;1)&#123; //从n减到1，这时cur到n-1节点前，如果加了虚拟头节点，这时的判断条件为0</span><br><span class=\"line\">\t  cur = cur.next</span><br><span class=\"line\">\t  n --</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   let node = new ListNode(val) </span><br><span class=\"line\">   /*注意这里先把cur.next先赋给node.next，如果反过来先让cur.next变成node.next，再让cur.next赋给node.next，这时cur.next已经是node，相当于自己指向自己。这里有点像两个变量交换。假设有a,b两个变量，交换a,b两个变量的值，不用解构赋值的话</span><br><span class=\"line\">   \t let c = a</span><br><span class=\"line\">   \t a = b</span><br><span class=\"line\">   \t b = c</span><br><span class=\"line\">   */</span><br><span class=\"line\">   node.next = cur.next</span><br><span class=\"line\">   cur.next = node</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">方法二：使用虚拟头节点</span><br><span class=\"line\">let cur = new ListNode(0,head)</span><br><span class=\"line\">let head = cur</span><br><span class=\"line\">while(n)&#123;</span><br><span class=\"line\">\tcur = cur.next</span><br><span class=\"line\">\tn--</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let node = new ListNode(val)</span><br><span class=\"line\">node.next = cur.next</span><br><span class=\"line\">cur.next = node</span><br><span class=\"line\">head = head.next //最后注意去除虚拟头节点</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "算法",
                "算法",
                "链表"
            ]
        },
        {
            "id": "https://seele-exzzz.github.io/2023/07/14/algorithm/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80/",
            "url": "https://seele-exzzz.github.io/2023/07/14/algorithm/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80/",
            "title": "二叉树基础",
            "date_published": "2023-07-14T14:04:41.779Z",
            "content_html": "<p>[toc]</p>\n<h1 id=\"二叉树基础\"><a class=\"markdownIt-Anchor\" href=\"#二叉树基础\">#</a> 二叉树基础</h1>\n<h2 id=\"一-二叉树种类\"><a class=\"markdownIt-Anchor\" href=\"#一-二叉树种类\">#</a> 一、二叉树种类</h2>\n<h3 id=\"1满二叉树\"><a class=\"markdownIt-Anchor\" href=\"#1满二叉树\">#</a> 1. 满二叉树</h3>\n<p>除最后一层有两个子节点外，最后一层没有子节点，如果某个满二叉树有 k 层则该满二叉树有 2 的 k 次方 - 1 个节点。</p>\n<h3 id=\"2-完全二叉树\"><a class=\"markdownIt-Anchor\" href=\"#2-完全二叉树\">#</a> 2. 完全二叉树</h3>\n<p>最后一层如果有缺的子节点则该子节点为右侧的子节点。如果某个完全二叉树有 k 层，则该完全二叉树则有 2 的 k-1 次方到 2 的 k 次方 - 1 个节点。满二叉树是特殊的完全二叉树</p>\n<p><img data-src=\"https://typora-seele-exzzz.oss-cn-guangzhou.aliyuncs.com/img/algorithm/binary_tree/%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%92%8C%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91.png\" alt=\"\"></p>\n<h3 id=\"3-二叉搜索树\"><a class=\"markdownIt-Anchor\" href=\"#3-二叉搜索树\">#</a> 3. 二叉搜索树</h3>\n<p>二叉搜索树中某个节点的左节点值小于该节点，右节点值大于该节点</p>\n<h3 id=\"4-二叉平衡树\"><a class=\"markdownIt-Anchor\" href=\"#4-二叉平衡树\">#</a> 4. 二叉平衡树</h3>\n<p>在二叉搜索树的条件下，每一个节点的左子树与右子树的高度差不大于一，二叉平衡树是特殊的二叉搜索树。另外二叉树的高度从下往上数，深度从上往下数。</p>\n<p><img data-src=\"https://typora-seele-exzzz.oss-cn-guangzhou.aliyuncs.com/img/algorithm/binary_tree/%E4%BA%8C%E5%8F%89%E5%B9%B3%E8%A1%A1%E6%A0%91.png\" alt=\"\"></p>\n<h2 id=\"二-二叉树的构建\"><a class=\"markdownIt-Anchor\" href=\"#二-二叉树的构建\">#</a> 二、 二叉树的构建</h2>\n<h3 id=\"1-构建力扣上的二叉树\"><a class=\"markdownIt-Anchor\" href=\"#1-构建力扣上的二叉树\">#</a> 1. 构建力扣上的二叉树</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在做力扣上102. 二叉树的层序遍历的时候，好奇试了一下console.dir(root)</span><br><span class=\"line\">TreeNode &#123;</span><br><span class=\"line\">  val: 3,</span><br><span class=\"line\">  left: TreeNode &#123; val: 9, left: null, right: null &#125;,</span><br><span class=\"line\">  right: TreeNode &#123;</span><br><span class=\"line\">    val: 20,</span><br><span class=\"line\">    left: TreeNode &#123; val: 15, left: null, right: null &#125;,</span><br><span class=\"line\">    right: TreeNode &#123; val: 7, left: null, right: null &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;// 结果是这个，根据这个我试着构建了一下二叉树，当然后面看别人的文章发现二叉树远不止这些属性和方法</span><br><span class=\"line\">class TreeNode &#123;</span><br><span class=\"line\">    constructor(val) &#123;</span><br><span class=\"line\">      this.val = val;</span><br><span class=\"line\">      this.left = null;</span><br><span class=\"line\">      this.right = null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    addleft(left)&#123;</span><br><span class=\"line\">        this.left = left</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    addright(right)&#123;</span><br><span class=\"line\">        this.right = right</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const root = new TreeNode(3)</span><br><span class=\"line\">root.addleft(new TreeNode(9))</span><br><span class=\"line\">root.addright(new TreeNode(20))</span><br><span class=\"line\">root.right.addleft(new TreeNode(15))</span><br><span class=\"line\">root.right.addright(new TreeNode(7))</span><br></pre></td></tr></table></figure>\n<h2 id=\"三-二叉树的遍历\"><a class=\"markdownIt-Anchor\" href=\"#三-二叉树的遍历\">#</a> 三、二叉树的遍历</h2>\n<p><img data-src=\"https://typora-seele-exzzz.oss-cn-guangzhou.aliyuncs.com/img/cover/algorithm/binary_tree/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%8D%E4%B8%AD%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86.png\" alt=\"\"></p>\n<h3 id=\"1-深度优先算法\"><a class=\"markdownIt-Anchor\" href=\"#1-深度优先算法\">#</a> 1. 深度优先算法</h3>\n<h4 id=\"1-递归法\"><a class=\"markdownIt-Anchor\" href=\"#1-递归法\">#</a> 1. 递归法</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//root为二叉树</span><br><span class=\"line\">const result =[]</span><br><span class=\"line\">const dfs = (root)=&gt;&#123;</span><br><span class=\"line\">    if(root==null) return</span><br><span class=\"line\">    //前序遍历</span><br><span class=\"line\">    result.push(root.val)</span><br><span class=\"line\">    dfs(root.left)</span><br><span class=\"line\">    dfs(root.right)</span><br><span class=\"line\">    //中序遍历</span><br><span class=\"line\">    dfs(root.left)</span><br><span class=\"line\">    result.push(root.val)</span><br><span class=\"line\">    dfs(root.right)</span><br><span class=\"line\">    //后序遍历</span><br><span class=\"line\">    dfs(root.left)</span><br><span class=\"line\">    dfs(root.right)</span><br><span class=\"line\">    result.push(root.val)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dfs(root)</span><br><span class=\"line\">return result</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-迭代法\"><a class=\"markdownIt-Anchor\" href=\"#2-迭代法\">#</a> 2. 迭代法</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//前序遍历</span><br><span class=\"line\">const result =[],arr=[root]</span><br><span class=\"line\">while(arr.length&gt;0)&#123;</span><br><span class=\"line\">    let tree = arr.pop()</span><br><span class=\"line\">    if(tree==null) continue</span><br><span class=\"line\">    result.push(tree.val)</span><br><span class=\"line\">\tarr.push(tree.right)</span><br><span class=\"line\">    arr.push(tree.left)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return result</span><br><span class=\"line\">//后序遍历 在前序遍历的情况下调换调换传入arr的两个子节点，同时将最后的数组反转。</span><br><span class=\"line\">const result =[],arr=[root]</span><br><span class=\"line\">while(arr.length&gt;0)&#123;</span><br><span class=\"line\">    let tree = arr.pop()</span><br><span class=\"line\">    if(tree==null) continue</span><br><span class=\"line\">    result.push(tree.val)</span><br><span class=\"line\">    arr.push(tree.left)</span><br><span class=\"line\">    arr.push(tree.right)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return result.reverse()</span><br><span class=\"line\">//中序遍历</span><br><span class=\"line\">const result =[],stack=[]</span><br><span class=\"line\">let tree = root</span><br><span class=\"line\">while(stack.length&gt;0||tree)&#123;</span><br><span class=\"line\">\tif(tree)&#123;</span><br><span class=\"line\">\t\tstack.push(tree)</span><br><span class=\"line\">\t\ttree = tree.left</span><br><span class=\"line\">\t&#125;else&#123;</span><br><span class=\"line\">\t\tlet rootTree = stack.pop()</span><br><span class=\"line\">\t\tresult.push(rootTree.val)</span><br><span class=\"line\">\t\ttree = rootTree.right</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return result</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-广度优先搜索span-stylefont-size16px层序遍历span\"><a class=\"markdownIt-Anchor\" href=\"#2-广度优先搜索span-stylefont-size16px层序遍历span\">#</a> 2. 广度优先搜索<span style=\"font-size:16px\">(层序遍历)</span></h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//力扣上的层序遍历最后的输出结果似乎都是二维数组，需要将每一层的值用数组储存然后将其储存进一个数组输出出去。</span><br><span class=\"line\">const result = [],arr=[root]</span><br><span class=\"line\">let res=[]</span><br><span class=\"line\">while(arr.length&gt;0)&#123;</span><br><span class=\"line\">    let len = arr.length //相当于快照用于储存当前层数的长度。</span><br><span class=\"line\">    while(len&gt;0)&#123; //当len为零时，说明当前层的值已全部弹出，这时应该用result储存当前层所有数组</span><br><span class=\"line\">        let tree = arr.shift() </span><br><span class=\"line\">        len -- </span><br><span class=\"line\">        if(tree!=null)&#123;</span><br><span class=\"line\">            res.push(tree.val)</span><br><span class=\"line\">            arr.push(tree.left)</span><br><span class=\"line\">            arr.push(tree.right)  </span><br><span class=\"line\">        &#125;     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(res.length==0) break </span><br><span class=\"line\">    result.push(res) </span><br><span class=\"line\">    res = [] //清空当前层用于记录下一层的值</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return result</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "算法",
                "二叉树",
                "算法"
            ]
        },
        {
            "id": "https://seele-exzzz.github.io/2023/07/12/Learning-record/%E6%AD%A3%E5%88%99%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/",
            "url": "https://seele-exzzz.github.io/2023/07/12/Learning-record/%E6%AD%A3%E5%88%99%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/",
            "title": "正则学习记录",
            "date_published": "2023-07-12T05:31:15.886Z",
            "content_html": "<h1 id=\"正则学习记录\"><a class=\"markdownIt-Anchor\" href=\"#正则学习记录\">#</a> 正则学习记录</h1>\n<p>[toc]</p>\n<h2 id=\"一-正则表达式的创建\"><a class=\"markdownIt-Anchor\" href=\"#一-正则表达式的创建\">#</a> 一、正则表达式的创建</h2>\n<h3 id=\"1-字面量创建\"><a class=\"markdownIt-Anchor\" href=\"#1-字面量创建\">#</a> 1. 字面量创建</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const a = /a/igm //i表示忽略大小写，g表示全局匹配，m表示多行匹配</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-构造函数创建\"><a class=\"markdownIt-Anchor\" href=\"#2-构造函数创建\">#</a> 2. 构造函数创建</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cosnt a = &#x27;a&#x27;</span><br><span class=\"line\">const b = new RegExp(&#x27;a&#x27;) 或者 b = new RegExp(a)//这里的b打印结果与上面字面量创建的a一致</span><br><span class=\"line\">// RegExp有两个参数，第一个参数传入一个字符串表示正则表达式，第二个参数有g全局匹配，i忽略大小写，m多行匹配</span><br></pre></td></tr></table></figure>\n<h2 id=\"二-javascript中正则方法\"><a class=\"markdownIt-Anchor\" href=\"#二-javascript中正则方法\">#</a> 二、JavaScript 中正则方法</h2>\n<h3 id=\"1-test方法\"><a class=\"markdownIt-Anchor\" href=\"#1-test方法\">#</a> 1. test 方法</h3>\n<p>用于测试某一字符串是否满足某一正则表达式，返回一个布尔值。正则表达式的方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const reg = /a/</span><br><span class=\"line\">const str = &#x27;abc&#x27;</span><br><span class=\"line\">reg.test(str)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-exec方法\"><a class=\"markdownIt-Anchor\" href=\"#2-exec方法\">#</a> 2. exec 方法</h3>\n<p>用于匹配某一字符串中满足正则表达式的内容，返回一个数组，第一项为匹配到的内容，第二项 index 为匹配到内容第一个字符所在的索引，input 为匹配的字符串，groups 为命名的捕获组。正则表达式的方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const reg = /a/</span><br><span class=\"line\">const str = &#x27;abcabcaa&#x27;</span><br><span class=\"line\">const result = reg.exec(str)</span><br><span class=\"line\">console.log(result) //[ &#x27;a&#x27;, index: 0, input: &#x27;abcabcaa&#x27;, groups: undefined ]</span><br><span class=\"line\">/*</span><br><span class=\"line\">\t如果正则表达式是全局匹配的话，exec会改变的lastindex，如果exec没匹配上，这时lastindexhi变为0</span><br><span class=\"line\">*/</span><br><span class=\"line\">const reg = /a/g</span><br><span class=\"line\">const str = &#x27;abac&#x27;</span><br><span class=\"line\">for(let i=0;i&lt;3;i++)&#123;</span><br><span class=\"line\">\tconsole.log(reg.lastIndex)</span><br><span class=\"line\">    reg.exec(str)</span><br><span class=\"line\">    console.log(reg.lastIndex)</span><br><span class=\"line\">&#125;// 0,1,1,3,3,0</span><br><span class=\"line\">//可以用?&lt;name&gt;给捕获组命名。这时如果成功匹配返回的对象中groups不再是undefined而是一个属性为捕获组名字，值为匹配到的内容的对象。</span><br><span class=\"line\">const reg = /(?&lt;year&gt;[0-9]+)-(?&lt;month&gt;[0-9]+)-(?&lt;day&gt;[0-9]&#123;2&#125;)/</span><br><span class=\"line\">const str = &#x27;2023-07-13&#x27;</span><br><span class=\"line\">const result = reg.exec(str)</span><br><span class=\"line\">console.log(result)</span><br><span class=\"line\">/*</span><br><span class=\"line\">[</span><br><span class=\"line\">  &#x27;2023-07-13&#x27;,</span><br><span class=\"line\">  &#x27;2023&#x27;,</span><br><span class=\"line\">  &#x27;07&#x27;,</span><br><span class=\"line\">  &#x27;13&#x27;,</span><br><span class=\"line\">  index: 0,</span><br><span class=\"line\">  input: &#x27;2023-07-13&#x27;,</span><br><span class=\"line\">  groups: [Object: null prototype] &#123; year: \t &#x27;2023&#x27;, month: &#x27;07&#x27;, day: &#x27;13&#x27; &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">*/</span><br><span class=\"line\">const reg = /(?&lt;year&gt;[0-9]+)-(?&lt;month&gt;[0-9]+)-(?&lt;day&gt;[0-9]&#123;2&#125;)/g</span><br><span class=\"line\">const str = &#x27;2023-07-13 1145-14-15&#x27;</span><br><span class=\"line\">reg.exec(str).groups</span><br><span class=\"line\">const &#123;year,month,day&#125; = reg.exec(str).groups</span><br><span class=\"line\">console.log(year,month,day) // 1145 14 15</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-match方法\"><a class=\"markdownIt-Anchor\" href=\"#3-match方法\">#</a> 3. match 方法</h3>\n<p>匹配字符串中满足正则表达式的内容并返回一个数组，注意 match 是字符串的方法不是正则表达式的方法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const reg = /a/</span><br><span class=\"line\">const regG = /a/g</span><br><span class=\"line\">const str = &#x27;abcabcaa&#x27;</span><br><span class=\"line\">const result = str.match(reg) // 如果正则表达式不是全局匹配这时match返回值与exec一致</span><br><span class=\"line\">console.log(result)//[ &#x27;a&#x27;, index: 0, input: &#x27;abcabcaa&#x27;, groups: undefined ]</span><br><span class=\"line\">const resultG = str.match(regG)// 这时会返回一个数组，数组中每一项为满足字符串中满足正则表达式中匹配规则的部分。</span><br><span class=\"line\">console.log(resultG)//[ &#x27;a&#x27;, &#x27;a&#x27;, &#x27;a&#x27;, &#x27;a&#x27; ]</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-search方法\"><a class=\"markdownIt-Anchor\" href=\"#4-search方法\">#</a> 4. search 方法</h3>\n<p>匹配字符串中满足正则表达式的内容并返回第一个匹配到字符的索引。同样这也是字符串方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const reg = /a/</span><br><span class=\"line\">const regG = /a/g</span><br><span class=\"line\">const str = &#x27;babcabcaa&#x27;</span><br><span class=\"line\">const result = str.search(reg) </span><br><span class=\"line\">const resultG = str.search(regG)// 全局匹配一样只返回匹配到第一个满足条件的字符的索引</span><br><span class=\"line\">console.log(result)//1</span><br><span class=\"line\">console.log(resultG)//1</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-replace方法\"><a class=\"markdownIt-Anchor\" href=\"#5-replace方法\">#</a> 5. replace () 方法</h3>\n<p>匹配字符串中满足某字符串或者正则表达式的内容并进行替换，同样也是字符串方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const reg = /a/</span><br><span class=\"line\">const regG = /a/g</span><br><span class=\"line\">const str = &#x27;babcabcaa&#x27;</span><br><span class=\"line\">const result = str.replace(reg,&#x27;*&#x27;) //没有全局匹配只匹配第一个满足条件的</span><br><span class=\"line\">const resultG = str.replace(regG,&#x27;*&#x27;)</span><br><span class=\"line\">console.log(result) //b*bcabcaa</span><br><span class=\"line\">console.log(resultG) //b*bc*bc**</span><br><span class=\"line\">/*</span><br><span class=\"line\">\treplace的第二个参数可以传递一个函数，函数的参数为匹配到的内容，如果正则表达式是全局匹配的话且能匹配到多个字符，则每匹配到一个就会调用一次函数，形参为匹配到的内容</span><br><span class=\"line\">*/</span><br><span class=\"line\">const result = str.replace(reg,(data)=&gt;&#123;</span><br><span class=\"line\">    console.log(data) // a </span><br><span class=\"line\">&#125;) </span><br><span class=\"line\">const resultG = str.replace(regG,(data)=&gt;&#123;</span><br><span class=\"line\">    console.log(data) // a</span><br><span class=\"line\">&#125;) //回调函数调用了3次</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-split方法\"><a class=\"markdownIt-Anchor\" href=\"#6-split方法\">#</a> 6. split 方法</h3>\n<p>用字符串分割数组，分割方式可以为一个正则表达式并返回一个数组，数组每一项为分割后的字符串。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const str = &#x27;abc&#x27;</span><br><span class=\"line\">const newstr = str.split(&#x27;&#x27;)</span><br><span class=\"line\">console.log(newstr) //[ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27; ]</span><br><span class=\"line\">/*</span><br><span class=\"line\">\tJavaScript中字符串的方法有限，如果想要反转字符串，简单的办法是用split(&#x27;&#x27;)转化为数\t组然后调用reverse方法反转数组并调用join(&#x27;&#x27;)转回字符串</span><br><span class=\"line\">*/</span><br><span class=\"line\">const reStr = str.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) </span><br><span class=\"line\">console.log(reStr) // cba</span><br><span class=\"line\"></span><br><span class=\"line\">const str = &#x27;2023-7-12&#x27; //如果想要这个字符串中的数字</span><br><span class=\"line\">const newstr = str.split(/-/)</span><br><span class=\"line\">console.log(newstr) [ &#x27;2023&#x27;, &#x27;7&#x27;, &#x27;12&#x27; ]</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "学习记录",
                "正则"
            ]
        },
        {
            "id": "https://seele-exzzz.github.io/2023/07/08/Learning-record/Typescript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/",
            "url": "https://seele-exzzz.github.io/2023/07/08/Learning-record/Typescript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/",
            "title": "Typescript学习记录",
            "date_published": "2023-07-08T10:22:13.494Z",
            "content_html": "<h1 id=\"typescript学习记录\"><a class=\"markdownIt-Anchor\" href=\"#typescript学习记录\">#</a> Typescript 学习记录</h1>\n<p>[toc]</p>\n<h2 id=\"一-基本类型\"><a class=\"markdownIt-Anchor\" href=\"#一-基本类型\">#</a> 一、基本类型</h2>\n<h3 id=\"1-基本数据类型span-stylefont-size14px-type代表类型span\"><a class=\"markdownIt-Anchor\" href=\"#1-基本数据类型span-stylefont-size14px-type代表类型span\">#</a> 1. 基本数据类型<span style='font-size:14px' >(type 代表类型)</span></h3>\n<ul>\n<li>any: 任意类型</li>\n<li>string: 字符串类型</li>\n<li>boolean: 布尔类型</li>\n<li>type[]，Array<type>: 数组类型两种表示方法</li>\n<li>[type] : 元组，如果要储存类似经纬度这类需要两个数字的数据则可以用 [number,number]</li>\n<li>void : 表示函数无返回值</li>\n<li>null : null 类型</li>\n<li>undefined : undefined 类型</li>\n<li>never : 表示从来不会出现的值</li>\n</ul>\n<h3 id=\"2-函数形参和返回值的类型\"><a class=\"markdownIt-Anchor\" href=\"#2-函数形参和返回值的类型\">#</a> 2. 函数形参和返回值的类型</h3>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> f = (<span class=\"attr\">a</span>:<span class=\"built_in\">number</span>,<span class=\"attr\">b</span>:<span class=\"built_in\">string</span>):<span class=\"function\"><span class=\"params\">string</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> f = (<span class=\"attr\">a</span>:<span class=\"built_in\">number</span>,<span class=\"attr\">b</span>:<span class=\"built_in\">string</span>):<span class=\"function\"><span class=\"params\">void</span>=&gt;</span>&#123;&#125;<span class=\"comment\">//void 表示无返回值</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-类型推断\"><a class=\"markdownIt-Anchor\" href=\"#3-类型推断\">#</a> 3. 类型推断</h3>\n<p>ide 在编译文件时会对变量的类型进行判断，所以在声明一个变量后立马赋值，声明一个对象并对其中的属性赋值又或者函数的返回值与形参有关可以推断出来等等，这些可以推断出来的就无需加上类型。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span> <span class=\"comment\">//ide会推断这个变量a的类型为number类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    a : <span class=\"number\">1</span> <span class=\"comment\">//同样ide会推断这个a属性为number类型</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> fun = (<span class=\"attr\">a</span>:<span class=\"built_in\">number</span>,<span class=\"attr\">b</span>:<span class=\"built_in\">string</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b <span class=\"comment\">//ide会推断这里的返回值为string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-关键字type和联合类型\"><a class=\"markdownIt-Anchor\" href=\"#4-关键字type和联合类型\">#</a> 4. 关键字 type 和联合类型</h3>\n<p>利用 type 给类型取一个别名，type 可以与联合类型一起使用</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> str1 = <span class=\"built_in\">string</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>:str1</span><br><span class=\"line\"><span class=\"keyword\">type</span> t = <span class=\"built_in\">number</span> | str1</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">b</span>:t</span><br><span class=\"line\"><span class=\"keyword\">type</span> funType = <span class=\"built_in\">number</span> | <span class=\"built_in\">string</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">fun</span> = (<span class=\"params\">a:funType</span>)=&gt;&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二-接口\"><a class=\"markdownIt-Anchor\" href=\"#二-接口\">#</a> 二、接口</h2>\n<p>如果一个对象会重复使用，则可以使用将其抽出写成接口。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Iobj</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>:<span class=\"built_in\">number</span></span><br><span class=\"line\">    <span class=\"attr\">b</span>:<span class=\"built_in\">string</span></span><br><span class=\"line\">&#125; <span class=\"comment\">//接口与对象不同，属性之间可不加逗号</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> fun=(<span class=\"attr\">b</span>:<span class=\"title class_\">Iobj</span>):<span class=\"function\"><span class=\"params\">void</span>=&gt;</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-接口属性\"><a class=\"markdownIt-Anchor\" href=\"#1-接口属性\">#</a> 1. 接口属性</h3>\n<ul>\n<li>可选属性：如果函数的形参对象中的某些属性是可选的。比如在使用 axios 时，传入的配置对象中 method 属性是可选属性如果不传默认是 get。</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Iobj</span>&#123;</span><br><span class=\"line\">    a?:<span class=\"built_in\">number</span></span><br><span class=\"line\">    <span class=\"attr\">b</span>:<span class=\"built_in\">string</span></span><br><span class=\"line\">&#125; <span class=\"comment\">//a是可选属性，可不传。</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> fun=(<span class=\"attr\">b</span>:<span class=\"title class_\">Iobj</span>):<span class=\"function\"><span class=\"params\">void</span>=&gt;</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fun=(&#123;a=<span class=\"number\">1</span>,b&#125;:<span class=\"title class_\">Iobj</span>):<span class=\"function\"><span class=\"params\">void</span>=&gt;</span>&#123;&#125; <span class=\"comment\">//如果想给a一个默认值，如果没传就使用默认值的话</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>只读属性：如果接口中的某些属性不可修改，只读的话则可以使用只读属性</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Iobj</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">readonly</span> <span class=\"attr\">a</span>:<span class=\"built_in\">number</span></span><br><span class=\"line\">   <span class=\"keyword\">readonly</span> <span class=\"attr\">b</span>:<span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> fun=(&#123;a,b&#125;:<span class=\"title class_\">Iobj</span>):<span class=\"function\"><span class=\"params\">void</span>=&gt;</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>索引类型：索引签名允许我们定义一个可以包含不同属性名称的动态对象并且固定属性的类型必须与索引类型相同或是其子级。</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Iobj</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>:<span class=\"built_in\">number</span></span><br><span class=\"line\">    <span class=\"attr\">b</span>:<span class=\"built_in\">string</span></span><br><span class=\"line\">    [<span class=\"attr\">propName</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> fun=(<span class=\"attr\">abc</span>:<span class=\"title class_\">Iobj</span>):<span class=\"function\"><span class=\"params\">void</span>=&gt;</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "学习记录",
                "typescript"
            ]
        }
    ]
}