<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://seele-exzzz.github.io</id>
    <title>个人博客</title>
    <subtitle></subtitle>
    <icon>https://seele-exzzz.github.io/assets/favicon.ico</icon>
    <link href="https://seele-exzzz.github.io" />
    <author>
      <name>SEELE-EXZzz(纯希)</name>
    </author>
    <updated>2023-07-14T14:04:41.779Z</updated>
    <entry>
        <id>https://seele-exzzz.github.io/2023/07/14/algorithm/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80/</id>
        <title>二叉树基础</title>
        <link rel="alternate" href="https://seele-exzzz.github.io/2023/07/14/algorithm/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80/"/>
        <content type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&#34;二叉树基础&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二叉树基础&#34;&gt;#&lt;/a&gt; 二叉树基础&lt;/h1&gt;
&lt;h2 id=&#34;一-二叉树种类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-二叉树种类&#34;&gt;#&lt;/a&gt; 一、二叉树种类&lt;/h2&gt;
&lt;h3 id=&#34;1满二叉树&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1满二叉树&#34;&gt;#&lt;/a&gt; 1. 满二叉树&lt;/h3&gt;
&lt;p&gt;除最后一层有两个子节点外，最后一层没有子节点，如果某个满二叉树有 k 层则该满二叉树有 2 的 k 次方 - 1 个节点。&lt;/p&gt;
&lt;h3 id=&#34;2-完全二叉树&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-完全二叉树&#34;&gt;#&lt;/a&gt; 2. 完全二叉树&lt;/h3&gt;
&lt;p&gt;最后一层如果有缺的子节点则该子节点为右侧的子节点。如果某个完全二叉树有 k 层，则该完全二叉树则有 2 的 k-1 次方到 2 的 k 次方 - 1 个节点。满二叉树是特殊的完全二叉树&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://typora-seele-exzzz.oss-cn-guangzhou.aliyuncs.com/img/algorithm/binary_tree/%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%92%8C%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91.png?Expires=1689344833&amp;amp;OSSAccessKeyId=TMP.3Kjp4GsqVbpTyN17mUPbjxYJxy7mnNaFBXqimbnPiitNoBGVgcPG3HMHEHgJ6jtQp6F2obNtKLWa3Z2XUSMr7fKLChag8K&amp;amp;Signature=YJ7eSaBqsJXLZXTPxrdpPPsw0FY%3D&#34; alt=&#34;文件无法预览。&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-二叉搜索树&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-二叉搜索树&#34;&gt;#&lt;/a&gt; 3. 二叉搜索树&lt;/h3&gt;
&lt;p&gt;二叉搜索树中某个节点的左节点值小于该节点，右节点值大于该节点&lt;/p&gt;
&lt;h3 id=&#34;4-二叉平衡树&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-二叉平衡树&#34;&gt;#&lt;/a&gt; 4. 二叉平衡树&lt;/h3&gt;
&lt;p&gt;在二叉搜索树的条件下，高度差不大于一，二叉平衡树是特殊的二叉搜索树。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://typora-seele-exzzz.oss-cn-guangzhou.aliyuncs.com/img/algorithm/binary_tree/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E5%92%8C%E4%BA%8C%E5%8F%89%E5%B9%B3%E8%A1%A1%E6%A0%91.png?Expires=1689344868&amp;amp;OSSAccessKeyId=TMP.3Kjp4GsqVbpTyN17mUPbjxYJxy7mnNaFBXqimbnPiitNoBGVgcPG3HMHEHgJ6jtQp6F2obNtKLWa3Z2XUSMr7fKLChag8K&amp;amp;Signature=%2FG9MisM5v6Ig%2BeKLZqYCLCpAWK0%3D&#34; alt=&#34;文件无法预览。&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;三-二叉树的遍历&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-二叉树的遍历&#34;&gt;#&lt;/a&gt; 三、二叉树的遍历&lt;/h2&gt;
&lt;h3 id=&#34;1-深度优先算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-深度优先算法&#34;&gt;#&lt;/a&gt; 1. 深度优先算法&lt;/h3&gt;
&lt;h4 id=&#34;1-递归法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-递归法&#34;&gt;#&lt;/a&gt; 1. 递归法&lt;/h4&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;//root为二叉树&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const result =[]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const dfs = (root)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(root==null) return&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //前序遍历&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result.push(root.val)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dfs(root.left)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dfs(root.right)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //中序遍历&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dfs(root.left)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result.push(root.val)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dfs(root.right)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //后序遍历&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dfs(root.left)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dfs(root.right)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result.push(root.val)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dfs(root)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return result&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;2-迭代法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-迭代法&#34;&gt;#&lt;/a&gt; 2. 迭代法&lt;/h4&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;//前序遍历&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const result =[],arr=[root]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;while(arr.length&amp;gt;0)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    let tree = arr.pop()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(tree==null) continue&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result.push(tree.val)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	arr.push(tree.right)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    arr.push(tree.left)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return result&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//后序遍历 在前序遍历的情况下调换调换传入arr的两个子节点，同时将最后的数组反转。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const result =[],arr=[root]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;while(arr.length&amp;gt;0)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    let tree = arr.pop()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(tree==null) continue&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result.push(tree.val)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    arr.push(tree.left)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    arr.push(tree.right)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return result.reverse()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
        <category term="算法" scheme="https://seele-exzzz.github.io/categories/algorithm/" />
        <category term="二叉树" scheme="https://seele-exzzz.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/" />
        <updated>2023-07-14T14:04:41.779Z</updated>
    </entry>
    <entry>
        <id>https://seele-exzzz.github.io/2023/07/12/Learning-record/%E6%AD%A3%E5%88%99%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
        <title>正则学习记录</title>
        <link rel="alternate" href="https://seele-exzzz.github.io/2023/07/12/Learning-record/%E6%AD%A3%E5%88%99%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
        <content type="html">&lt;h1 id=&#34;正则学习记录&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#正则学习记录&#34;&gt;#&lt;/a&gt; 正则学习记录&lt;/h1&gt;
&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&#34;一-正则表达式的创建&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-正则表达式的创建&#34;&gt;#&lt;/a&gt; 一、正则表达式的创建&lt;/h2&gt;
&lt;h3 id=&#34;1-字面量创建&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-字面量创建&#34;&gt;#&lt;/a&gt; 1. 字面量创建&lt;/h3&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const a = /a/igm //i表示忽略大小写，g表示全局匹配，m表示多行匹配&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;2-构造函数创建&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-构造函数创建&#34;&gt;#&lt;/a&gt; 2. 构造函数创建&lt;/h3&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cosnt a = &amp;#x27;a&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const b = new RegExp(&amp;#x27;a&amp;#x27;) 或者 b = new RegExp(a)//这里的b打印结果与上面字面量创建的a一致&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;二-javascript中正则方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-javascript中正则方法&#34;&gt;#&lt;/a&gt; 二、JavaScript 中正则方法&lt;/h2&gt;
&lt;h3 id=&#34;1-test方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-test方法&#34;&gt;#&lt;/a&gt; 1. test 方法&lt;/h3&gt;
&lt;p&gt;用于测试某一字符串是否满足某一正则表达式，返回一个布尔值。正则表达式的方法&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const reg = /a/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const str = &amp;#x27;abc&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;reg.test(str)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;2-exec方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-exec方法&#34;&gt;#&lt;/a&gt; 2. exec 方法&lt;/h3&gt;
&lt;p&gt;用于匹配某一字符串中满足正则表达式的内容，返回一个数组，第一项为匹配到的内容，第二项 index 为匹配到内容第一个字符所在的索引，input 为匹配的字符串，groups 为命名的捕获组。正则表达式的方法&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const reg = /a/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const str = &amp;#x27;abcabcaa&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const result = reg.exec(str)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(result) //[ &amp;#x27;a&amp;#x27;, index: 0, input: &amp;#x27;abcabcaa&amp;#x27;, groups: undefined ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	如果正则表达式是全局匹配的话，exec会改变的lastindex，如果exec没匹配上，这时lastindexhi变为0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const reg = /a/g&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const str = &amp;#x27;abac&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for(let i=0;i&amp;lt;3;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	console.log(reg.lastIndex)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    reg.exec(str)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    console.log(reg.lastIndex)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;// 0,1,1,3,3,0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//可以用?&amp;lt;name&amp;gt;给捕获组命名。这时如果成功匹配返回的对象中groups不再是undefined而是一个属性为捕获组名字，值为匹配到的内容的对象。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const reg = /(?&amp;lt;year&amp;gt;[0-9]+)-(?&amp;lt;month&amp;gt;[0-9]+)-(?&amp;lt;day&amp;gt;[0-9]&amp;#123;2&amp;#125;)/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const str = &amp;#x27;2023-07-13&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const result = reg.exec(str)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(result)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#x27;2023-07-13&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#x27;2023&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#x27;07&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#x27;13&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  index: 0,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  input: &amp;#x27;2023-07-13&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  groups: [Object: null prototype] &amp;#123; year: 	 &amp;#x27;2023&amp;#x27;, month: &amp;#x27;07&amp;#x27;, day: &amp;#x27;13&amp;#x27; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const reg = /(?&amp;lt;year&amp;gt;[0-9]+)-(?&amp;lt;month&amp;gt;[0-9]+)-(?&amp;lt;day&amp;gt;[0-9]&amp;#123;2&amp;#125;)/g&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const str = &amp;#x27;2023-07-13 1145-14-15&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;reg.exec(str).groups&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const &amp;#123;year,month,day&amp;#125; = reg.exec(str).groups&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(year,month,day) // 1145 14 15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;3-match方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-match方法&#34;&gt;#&lt;/a&gt; 3. match 方法&lt;/h3&gt;
&lt;p&gt;匹配字符串中满足正则表达式的内容并返回一个数组，注意 match 是字符串的方法不是正则表达式的方法。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const reg = /a/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const regG = /a/g&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const str = &amp;#x27;abcabcaa&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const result = str.match(reg) // 如果正则表达式不是全局匹配这时match返回值与exec一致&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(result)//[ &amp;#x27;a&amp;#x27;, index: 0, input: &amp;#x27;abcabcaa&amp;#x27;, groups: undefined ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const resultG = str.match(regG)// 这时会返回一个数组，数组中每一项为满足字符串中满足正则表达式中匹配规则的部分。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(resultG)//[ &amp;#x27;a&amp;#x27;, &amp;#x27;a&amp;#x27;, &amp;#x27;a&amp;#x27;, &amp;#x27;a&amp;#x27; ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;4-search方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-search方法&#34;&gt;#&lt;/a&gt; 4. search 方法&lt;/h3&gt;
&lt;p&gt;匹配字符串中满足正则表达式的内容并返回第一个匹配到字符的索引。同样这也是字符串方法&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const reg = /a/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const regG = /a/g&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const str = &amp;#x27;babcabcaa&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const result = str.search(reg) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const resultG = str.search(regG)// 全局匹配一样只返回匹配到第一个满足条件的字符的索引&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(result)//1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(resultG)//1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;5-replace方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-replace方法&#34;&gt;#&lt;/a&gt; 5. replace () 方法&lt;/h3&gt;
&lt;p&gt;匹配字符串中满足某字符串或者正则表达式的内容并进行替换，同样也是字符串方法&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const reg = /a/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const regG = /a/g&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const str = &amp;#x27;babcabcaa&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const result = str.replace(reg,&amp;#x27;*&amp;#x27;) //没有全局匹配只匹配第一个满足条件的&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const resultG = str.replace(regG,&amp;#x27;*&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(result) //b*bcabcaa&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(resultG) //b*bc*bc**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	replace的第二个参数可以传递一个函数，函数的参数为匹配到的内容，如果正则表达式是全局匹配的话且能匹配到多个字符，则每匹配到一个就会调用一次函数，形参为匹配到的内容&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const result = str.replace(reg,(data)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    console.log(data) // a &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const resultG = str.replace(regG,(data)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    console.log(data) // a&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;) //回调函数调用了3次&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;6-split方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-split方法&#34;&gt;#&lt;/a&gt; 6. split 方法&lt;/h3&gt;
&lt;p&gt;用字符串分割数组，分割方式可以为一个正则表达式并返回一个数组，数组每一项为分割后的字符串。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const str = &amp;#x27;abc&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const newstr = str.split(&amp;#x27;&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(newstr) //[ &amp;#x27;a&amp;#x27;, &amp;#x27;b&amp;#x27;, &amp;#x27;c&amp;#x27; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	JavaScript中字符串的方法有限，如果想要反转字符串，简单的办法是用split(&amp;#x27;&amp;#x27;)转化为数	组然后调用reverse方法反转数组并调用join(&amp;#x27;&amp;#x27;)转回字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const reStr = str.split(&amp;#x27;&amp;#x27;).reverse().join(&amp;#x27;&amp;#x27;) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(reStr) // cba&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const str = &amp;#x27;2023-7-12&amp;#x27; //如果想要这个字符串中的数字&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const newstr = str.split(/-/)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(newstr) [ &amp;#x27;2023&amp;#x27;, &amp;#x27;7&amp;#x27;, &amp;#x27;12&amp;#x27; ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
        <category term="学习记录" scheme="https://seele-exzzz.github.io/categories/Learning-record/" />
        <category term="正则" scheme="https://seele-exzzz.github.io/tags/%E6%AD%A3%E5%88%99/" />
        <updated>2023-07-12T05:31:15.886Z</updated>
    </entry>
    <entry>
        <id>https://seele-exzzz.github.io/2023/07/08/Learning-record/Typescript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
        <title>Typescript学习记录</title>
        <link rel="alternate" href="https://seele-exzzz.github.io/2023/07/08/Learning-record/Typescript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
        <content type="html">&lt;h1 id=&#34;typescript学习记录&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#typescript学习记录&#34;&gt;#&lt;/a&gt; Typescript 学习记录&lt;/h1&gt;
&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&#34;一-基本类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-基本类型&#34;&gt;#&lt;/a&gt; 一、基本类型&lt;/h2&gt;
&lt;h3 id=&#34;1-基本数据类型span-stylefont-size14px-type代表类型span&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-基本数据类型span-stylefont-size14px-type代表类型span&#34;&gt;#&lt;/a&gt; 1. 基本数据类型&lt;span style=&#39;font-size:14px&#39; &gt;(type 代表类型)&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;any: 任意类型&lt;/li&gt;
&lt;li&gt;string: 字符串类型&lt;/li&gt;
&lt;li&gt;boolean: 布尔类型&lt;/li&gt;
&lt;li&gt;type[]，Array&lt;type&gt;: 数组类型两种表示方法&lt;/li&gt;
&lt;li&gt;[type] : 元组，如果要储存类似经纬度这类需要两个数字的数据则可以用 [number,number]&lt;/li&gt;
&lt;li&gt;void : 表示函数无返回值&lt;/li&gt;
&lt;li&gt;null : null 类型&lt;/li&gt;
&lt;li&gt;undefined : undefined 类型&lt;/li&gt;
&lt;li&gt;never : 表示从来不会出现的值&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-函数形参和返回值的类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-函数形参和返回值的类型&#34;&gt;#&lt;/a&gt; 2. 函数形参和返回值的类型&lt;/h3&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; f = (&lt;span class=&#34;attr&#34;&gt;a&lt;/span&gt;:&lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;,&lt;span class=&#34;attr&#34;&gt;b&lt;/span&gt;:&lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;):&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;string&lt;/span&gt;=&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; a+b&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; f = (&lt;span class=&#34;attr&#34;&gt;a&lt;/span&gt;:&lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;,&lt;span class=&#34;attr&#34;&gt;b&lt;/span&gt;:&lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;):&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;void&lt;/span&gt;=&amp;gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;span class=&#34;comment&#34;&gt;//void 表示无返回值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;3-类型推断&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-类型推断&#34;&gt;#&lt;/a&gt; 3. 类型推断&lt;/h3&gt;
&lt;p&gt;ide 在编译文件时会对变量的类型进行判断，所以在声明一个变量后立马赋值，声明一个对象并对其中的属性赋值又或者函数的返回值与形参有关可以推断出来等等，这些可以推断出来的就无需加上类型。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; a = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;//ide会推断这个变量a的类型为number类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a : &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;//同样ide会推断这个a属性为number类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; fun = (&lt;span class=&#34;attr&#34;&gt;a&lt;/span&gt;:&lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;,&lt;span class=&#34;attr&#34;&gt;b&lt;/span&gt;:&lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; a+b &lt;span class=&#34;comment&#34;&gt;//ide会推断这里的返回值为string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;4-关键字type和联合类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-关键字type和联合类型&#34;&gt;#&lt;/a&gt; 4. 关键字 type 和联合类型&lt;/h3&gt;
&lt;p&gt;利用 type 给类型取一个别名，type 可以与联合类型一起使用&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; str1 = &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;a&lt;/span&gt;:str1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; t = &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt; | str1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;b&lt;/span&gt;:t&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; funType = &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt; | &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;fun&lt;/span&gt; = (&lt;span class=&#34;params&#34;&gt;a:funType&lt;/span&gt;)=&amp;gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;二-接口&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-接口&#34;&gt;#&lt;/a&gt; 二、接口&lt;/h2&gt;
&lt;p&gt;如果一个对象会重复使用，则可以使用将其抽出写成接口。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Iobj&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;a&lt;/span&gt;:&lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;b&lt;/span&gt;:&lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;comment&#34;&gt;//接口与对象不同，属性之间可不加逗号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; fun=(&lt;span class=&#34;attr&#34;&gt;b&lt;/span&gt;:&lt;span class=&#34;title class_&#34;&gt;Iobj&lt;/span&gt;):&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;void&lt;/span&gt;=&amp;gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;1-接口属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-接口属性&#34;&gt;#&lt;/a&gt; 1. 接口属性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可选属性：如果函数的形参对象中的某些属性是可选的。比如在使用 axios 时，传入的配置对象中 method 属性是可选属性如果不传默认是 get。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Iobj&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a?:&lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;b&lt;/span&gt;:&lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;comment&#34;&gt;//a是可选属性，可不传。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; fun=(&lt;span class=&#34;attr&#34;&gt;b&lt;/span&gt;:&lt;span class=&#34;title class_&#34;&gt;Iobj&lt;/span&gt;):&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;void&lt;/span&gt;=&amp;gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; fun=(&amp;#123;a=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,b&amp;#125;:&lt;span class=&#34;title class_&#34;&gt;Iobj&lt;/span&gt;):&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;void&lt;/span&gt;=&amp;gt;&lt;/span&gt;&amp;#123;&amp;#125; &lt;span class=&#34;comment&#34;&gt;//如果想给a一个默认值，如果没传就使用默认值的话&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;只读属性：如果接口中的某些属性不可修改，只读的话则可以使用只读属性&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Iobj&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;a&lt;/span&gt;:&lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;b&lt;/span&gt;:&lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; fun=(&amp;#123;a,b&amp;#125;:&lt;span class=&#34;title class_&#34;&gt;Iobj&lt;/span&gt;):&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;void&lt;/span&gt;=&amp;gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;索引类型：索引签名允许我们定义一个可以包含不同属性名称的动态对象并且固定属性的类型必须与索引类型相同或是其子级。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Iobj&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;a&lt;/span&gt;:&lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;b&lt;/span&gt;:&lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;attr&#34;&gt;propName&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;]: &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; fun=(&lt;span class=&#34;attr&#34;&gt;abc&lt;/span&gt;:&lt;span class=&#34;title class_&#34;&gt;Iobj&lt;/span&gt;):&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;void&lt;/span&gt;=&amp;gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
        <category term="学习记录" scheme="https://seele-exzzz.github.io/categories/Learning-record/" />
        <category term="typescript" scheme="https://seele-exzzz.github.io/tags/typescript/" />
        <updated>2023-07-08T10:22:13.494Z</updated>
    </entry>
</feed>
